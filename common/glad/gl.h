/**
 * Loader generated by glad 2.0.0-beta on Sat Apr 27 09:53:01 2019
 *
 * Generator: C/C++
 * Specification: gl
 * Extensions: 0
 *
 * APIs:
 *  - gl:compatibility=4.6
 *
 * Options:
 *  - MX_GLOBAL = False
 *  - LOADER = False
 *  - ALIAS = False
 *  - HEADER_ONLY = True
 *  - DEBUG = True
 *  - MX = False
 *
 * Commandline:
 *    --api='gl:compatibility=4.6' --extensions='' c --header-only --debug
 *
 * Online:
 *    http://glad.sh/#api=gl%3Acompatibility%3D4.6&extensions=&generator=c&options=HEADER_ONLY%2CDEBUG
 *
 */

#ifndef GLAD_GL_H_
#define GLAD_GL_H_

#ifdef __gl_h_
    #error OpenGL header already included (API: gl), remove previous include!
#endif
#define __gl_h_ 1


#define GLAD_GL
#define GLAD_OPTION_GL_HEADER_ONLY
#define GLAD_OPTION_GL_DEBUG

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif


#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(const char *name, void *userptr);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GL_2D 0x0600
#define GL_2_BYTES 0x1407
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_3_BYTES 0x1408
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_4_BYTES 0x1409
#define GL_ACCUM 0x0100
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_ADD 0x0104
#define GL_ADD_SIGNED 0x8574
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALPHA 0x1906
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_ALPHA_BITS 0x0D55
#define GL_ALPHA_INTEGER 0x8D97
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALREADY_SIGNALED 0x911A
#define GL_ALWAYS 0x0207
#define GL_AMBIENT 0x1200
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_AND 0x1501
#define GL_AND_INVERTED 0x1504
#define GL_AND_REVERSE 0x1502
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ARRAY_SIZE 0x92FB
#define GL_ARRAY_STRIDE 0x92FE
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_AUTO_NORMAL 0x0D80
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_AUX_BUFFERS 0x0C00
#define GL_BACK 0x0405
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGR_INTEGER 0x8D9A
#define GL_BITMAP 0x1A00
#define GL_BITMAP_TOKEN 0x0704
#define GL_BLEND 0x0BE2
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLOCK_INDEX 0x92FD
#define GL_BLUE 0x1905
#define GL_BLUE_BIAS 0x0D1B
#define GL_BLUE_BITS 0x0D54
#define GL_BLUE_INTEGER 0x8D96
#define GL_BLUE_SCALE 0x0D1A
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BUFFER 0x82E0
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_BUFFER_USAGE 0x8765
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_BYTE 0x1400
#define GL_C3F_V3F 0x2A24
#define GL_C4F_N3F_V3F 0x2A26
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_CCW 0x0901
#define GL_CLAMP 0x2900
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLEAR 0x1500
#define GL_CLEAR_BUFFER 0x82B4
#define GL_CLEAR_TEXTURE 0x9365
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_COEFF 0x0A00
#define GL_COLOR 0x1800
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_COMPONENTS 0x8283
#define GL_COLOR_ENCODING 0x8296
#define GL_COLOR_INDEX 0x1900
#define GL_COLOR_INDEXES 0x1603
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_COLOR_MATERIAL 0x0B57
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_RENDERABLE 0x8286
#define GL_COLOR_SUM 0x8458
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COMBINE 0x8570
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_RGB 0x8571
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_COMPILE_STATUS 0x8B81
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RG 0x8226
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_COMPUTE_SHADER 0x91B9
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONSTANT 0x8576
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_FLAGS 0x821E
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_COORD_REPLACE 0x8862
#define GL_COPY 0x1503
#define GL_COPY_INVERTED 0x150C
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CURRENT_BIT 0x00000001
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CW 0x0900
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DECAL 0x2101
#define GL_DECR 0x1E03
#define GL_DECR_WRAP 0x8508
#define GL_DELETE_STATUS 0x8B80
#define GL_DEPTH 0x1801
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_BIAS 0x0D1F
#define GL_DEPTH_BITS 0x0D56
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_CLAMP 0x864F
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DIFFUSE 0x1201
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_DISPLAY_LIST 0x82E7
#define GL_DITHER 0x0BD0
#define GL_DOMAIN 0x0A02
#define GL_DONT_CARE 0x1100
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_DOUBLE 0x140A
#define GL_DOUBLEBUFFER 0x0C32
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_DST_ALPHA 0x0304
#define GL_DST_COLOR 0x0306
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_EDGE_FLAG 0x0B43
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_EMISSION 0x1600
#define GL_ENABLE_BIT 0x00002000
#define GL_EQUAL 0x0202
#define GL_EQUIV 0x1509
#define GL_EVAL_BIT 0x00010000
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_EXTENSIONS 0x1F03
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_PLANE 0x2502
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FEEDBACK 0x1C01
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_FILL 0x1B02
#define GL_FILTER 0x829A
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FIXED 0x140C
#define GL_FIXED_ONLY 0x891D
#define GL_FLAT 0x1D00
#define GL_FLOAT 0x1406
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FOG 0x0B60
#define GL_FOG_BIT 0x00000080
#define GL_FOG_COLOR 0x0B66
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE 0x8451
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_END 0x0B64
#define GL_FOG_HINT 0x0C54
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_MODE 0x0B65
#define GL_FOG_START 0x0B63
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_FULL_SUPPORT 0x82B7
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEQUAL 0x0206
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_GREATER 0x0204
#define GL_GREEN 0x1904
#define GL_GREEN_BIAS 0x0D19
#define GL_GREEN_BITS 0x0D53
#define GL_GREEN_INTEGER 0x8D95
#define GL_GREEN_SCALE 0x0D18
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_HALF_FLOAT 0x140B
#define GL_HIGH_FLOAT 0x8DF2
#define GL_HIGH_INT 0x8DF5
#define GL_HINT_BIT 0x00008000
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_INCR 0x1E02
#define GL_INCR_WRAP 0x8507
#define GL_INDEX 0x8222
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_BITS 0x0D51
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_INDEX_MODE 0x0C30
#define GL_INDEX_OFFSET 0x0D13
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_INT 0x1404
#define GL_INTENSITY 0x8049
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERPOLATE 0x8575
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVERT 0x150A
#define GL_ISOLINES 0x8E7A
#define GL_IS_PER_PATCH 0x92E7
#define GL_IS_ROW_MAJOR 0x9300
#define GL_KEEP 0x1E00
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LEFT 0x0406
#define GL_LEQUAL 0x0203
#define GL_LESS 0x0201
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_LIGHTING 0x0B50
#define GL_LIGHTING_BIT 0x00000040
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LINE 0x1B01
#define GL_LINEAR 0x2601
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINES 0x0001
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_BIT 0x00000004
#define GL_LINE_LOOP 0x0002
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LINE_STRIP 0x0003
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_LINE_TOKEN 0x0702
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINK_STATUS 0x8B82
#define GL_LIST_BASE 0x0B32
#define GL_LIST_BIT 0x00020000
#define GL_LIST_INDEX 0x0B33
#define GL_LIST_MODE 0x0B30
#define GL_LOAD 0x0101
#define GL_LOCATION 0x930E
#define GL_LOCATION_COMPONENT 0x934A
#define GL_LOCATION_INDEX 0x930F
#define GL_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_LOWER_LEFT 0x8CA1
#define GL_LOW_FLOAT 0x8DF0
#define GL_LOW_INT 0x8DF3
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_MAJOR_VERSION 0x821B
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_STENCIL 0x0D11
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MATRIX_MODE 0x0BA0
#define GL_MATRIX_STRIDE 0x92FF
#define GL_MAX 0x8008
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VIEWPORTS 0x825B
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MAX_WIDTH 0x827E
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_MEDIUM_INT 0x8DF4
#define GL_MIN 0x8007
#define GL_MINOR_VERSION 0x821C
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIPMAP 0x8293
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_MODULATE 0x2100
#define GL_MULT 0x0103
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_N3F_V3F 0x2A25
#define GL_NAME_LENGTH 0x92F9
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_NAND 0x150E
#define GL_NEAREST 0x2600
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_NEVER 0x0200
#define GL_NICEST 0x1102
#define GL_NONE 0
#define GL_NOOP 0x1505
#define GL_NOR 0x1508
#define GL_NORMALIZE 0x0BA1
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_MAP 0x8511
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_EXTENSIONS 0x821D
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_PLANE 0x2501
#define GL_OBJECT_TYPE 0x9112
#define GL_OFFSET 0x92FC
#define GL_ONE 1
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_RGB 0x8592
#define GL_OR 0x1507
#define GL_ORDER 0x0A01
#define GL_OR_INVERTED 0x150D
#define GL_OR_REVERSE 0x150B
#define GL_OUT_OF_MEMORY 0x0505
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_PATCHES 0x000E
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_PATCH_VERTICES 0x8E72
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_POINT 0x1B00
#define GL_POINTS 0x0000
#define GL_POINT_BIT 0x00000002
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_POINT_SPRITE 0x8861
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_POINT_TOKEN 0x0701
#define GL_POLYGON 0x0009
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_POLYGON_TOKEN 0x0703
#define GL_POSITION 0x1203
#define GL_PREVIOUS 0x8578
#define GL_PRIMARY_COLOR 0x8577
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_PROGRAM 0x82E2
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PROJECTION 0x1701
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_Q 0x2003
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_QUADS 0x0007
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_QUAD_STRIP 0x0008
#define GL_QUERY 0x82E3
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_QUERY_TARGET 0x82EA
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_R 0x2002
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R16 0x822A
#define GL_R16F 0x822D
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R16_SNORM 0x8F98
#define GL_R32F 0x822E
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_R3_G3_B2 0x2A10
#define GL_R8 0x8229
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R8_SNORM 0x8F94
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_READ_BUFFER 0x0C02
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_ONLY 0x88B8
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_READ_WRITE 0x88BA
#define GL_RED 0x1903
#define GL_RED_BIAS 0x0D15
#define GL_RED_BITS 0x0D52
#define GL_RED_INTEGER 0x8D94
#define GL_RED_SCALE 0x0D14
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFLECTION_MAP 0x8512
#define GL_RENDER 0x1C00
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERER 0x1F01
#define GL_RENDER_MODE 0x0C40
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_RESCALE_NORMAL 0x803A
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_RETURN 0x0102
#define GL_RG 0x8227
#define GL_RG16 0x822C
#define GL_RG16F 0x822F
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG16_SNORM 0x8F99
#define GL_RG32F 0x8230
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_RG8 0x822B
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG8_SNORM 0x8F95
#define GL_RGB 0x1907
#define GL_RGB10 0x8052
#define GL_RGB10_A2 0x8059
#define GL_RGB10_A2UI 0x906F
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGB16F 0x881B
#define GL_RGB16I 0x8D89
#define GL_RGB16UI 0x8D77
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGB32F 0x8815
#define GL_RGB32I 0x8D83
#define GL_RGB32UI 0x8D71
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB565 0x8D62
#define GL_RGB5_A1 0x8057
#define GL_RGB8 0x8051
#define GL_RGB8I 0x8D8F
#define GL_RGB8UI 0x8D7D
#define GL_RGB8_SNORM 0x8F96
#define GL_RGB9_E5 0x8C3D
#define GL_RGBA 0x1908
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA16F 0x881A
#define GL_RGBA16I 0x8D88
#define GL_RGBA16UI 0x8D76
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RGBA2 0x8055
#define GL_RGBA32F 0x8814
#define GL_RGBA32I 0x8D82
#define GL_RGBA32UI 0x8D70
#define GL_RGBA4 0x8056
#define GL_RGBA8 0x8058
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA8_SNORM 0x8F97
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGBA_MODE 0x0C31
#define GL_RGB_INTEGER 0x8D98
#define GL_RGB_SCALE 0x8573
#define GL_RG_INTEGER 0x8228
#define GL_RIGHT 0x0407
#define GL_S 0x2000
#define GL_SAMPLER 0x82E6
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_BINDING 0x8919
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLES 0x80A9
#define GL_SAMPLES_PASSED 0x8914
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_SHADING 0x8C36
#define GL_SCISSOR_BIT 0x00080000
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SELECT 0x1C02
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SET 0x150F
#define GL_SHADER 0x82E1
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_TYPE 0x8B4F
#define GL_SHADE_MODEL 0x0B54
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHININESS 0x1601
#define GL_SHORT 0x1402
#define GL_SIGNALED 0x9119
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_SINGLE_COLOR 0x81F9
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SMOOTH 0x1D01
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_RGB 0x8582
#define GL_SPECULAR 0x1202
#define GL_SPHERE_MAP 0x2402
#define GL_SPIR_V_BINARY 0x9552
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_SPOT_CUTOFF 0x1206
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_COLOR 0x88F9
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_ALPHA 0x858A
#define GL_SRC2_RGB 0x8582
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_COLOR 0x0300
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STENCIL 0x1802
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_STENCIL_BITS 0x0D57
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_STEREO 0x0C33
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_SUBTRACT 0x84E7
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_STATUS 0x9114
#define GL_T 0x2001
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_V3F 0x2A27
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_T4F_V4F 0x2A28
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TEXTURE 0x1702
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_TEXTURE_BIT 0x00040000
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_ENV 0x2300
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TEXTURE_TARGET 0x1006
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_TEXTURE_VIEW 0x82B5
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_TIMESTAMP 0x8E28
#define GL_TIME_ELAPSED 0x88BF
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_TRANSFORM_BIT 0x00001000
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_TRUE 1
#define GL_TYPE 0x92FA
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_INT 0x1405
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_SHORT 0x1403
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UPPER_LEFT 0x8CA2
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_VALIDATE_STATUS 0x8B83
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_VERTEX_SHADER 0x8B31
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_VERTEX_TEXTURE 0x829B
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_VIEWPORT 0x0BA2
#define GL_VIEWPORT_BIT 0x00000800
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_WAIT_FAILED 0x911D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_WRITE_ONLY 0x88B9
#define GL_XOR 0x1506
#define GL_ZERO 0
#define GL_ZERO_TO_ONE 0x935F
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17


#include <stddef.h>
#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_GLAD_API_PTR
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_GLAD_API_PTR funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(_WIN32) && !defined(__SCITECH_SNAP__)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_GLAD_API_PTR
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__)
    /* Win32 but not WinCE */
#   define KHRONOS_GLAD_API_PTR __stdcall
#else
#   define KHRONOS_GLAD_API_PTR
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef _WIN64
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLclampx;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef unsigned short GLhalfARB;
typedef unsigned short GLhalf;
typedef GLint GLfixed;
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptr;
#else
typedef khronos_intptr_t GLintptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptr;
#else
typedef khronos_ssize_t GLsizeiptr;
#endif
typedef int64_t GLint64;
typedef uint64_t GLuint64;
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef long GLintptrARB;
#else
typedef ptrdiff_t GLintptrARB;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef long GLsizeiptrARB;
#else
typedef ptrdiff_t GLsizeiptrARB;
#endif
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void ( *GLVULKANPROCNV)(void);


#define GL_VERSION_1_0 1
GLAD_API_CALL int GLAD_GL_VERSION_1_0;
#define GL_VERSION_1_1 1
GLAD_API_CALL int GLAD_GL_VERSION_1_1;
#define GL_VERSION_1_2 1
GLAD_API_CALL int GLAD_GL_VERSION_1_2;
#define GL_VERSION_1_3 1
GLAD_API_CALL int GLAD_GL_VERSION_1_3;
#define GL_VERSION_1_4 1
GLAD_API_CALL int GLAD_GL_VERSION_1_4;
#define GL_VERSION_1_5 1
GLAD_API_CALL int GLAD_GL_VERSION_1_5;
#define GL_VERSION_2_0 1
GLAD_API_CALL int GLAD_GL_VERSION_2_0;
#define GL_VERSION_2_1 1
GLAD_API_CALL int GLAD_GL_VERSION_2_1;
#define GL_VERSION_3_0 1
GLAD_API_CALL int GLAD_GL_VERSION_3_0;
#define GL_VERSION_3_1 1
GLAD_API_CALL int GLAD_GL_VERSION_3_1;
#define GL_VERSION_3_2 1
GLAD_API_CALL int GLAD_GL_VERSION_3_2;
#define GL_VERSION_3_3 1
GLAD_API_CALL int GLAD_GL_VERSION_3_3;
#define GL_VERSION_4_0 1
GLAD_API_CALL int GLAD_GL_VERSION_4_0;
#define GL_VERSION_4_1 1
GLAD_API_CALL int GLAD_GL_VERSION_4_1;
#define GL_VERSION_4_2 1
GLAD_API_CALL int GLAD_GL_VERSION_4_2;
#define GL_VERSION_4_3 1
GLAD_API_CALL int GLAD_GL_VERSION_4_3;
#define GL_VERSION_4_4 1
GLAD_API_CALL int GLAD_GL_VERSION_4_4;
#define GL_VERSION_4_5 1
GLAD_API_CALL int GLAD_GL_VERSION_4_5;
#define GL_VERSION_4_6 1
GLAD_API_CALL int GLAD_GL_VERSION_4_6;


typedef void (GLAD_API_PTR *PFNGLACCUMPROC)(GLenum   op, GLfloat   value);
typedef void (GLAD_API_PTR *PFNGLACTIVESHADERPROGRAMPROC)(GLuint   pipeline, GLuint   program);
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREPROC)(GLenum   texture);
typedef void (GLAD_API_PTR *PFNGLALPHAFUNCPROC)(GLenum   func, GLfloat   ref);
typedef GLboolean (GLAD_API_PTR *PFNGLARETEXTURESRESIDENTPROC)(GLsizei   n, const  GLuint  * textures, GLboolean  * residences);
typedef void (GLAD_API_PTR *PFNGLARRAYELEMENTPROC)(GLint   i);
typedef void (GLAD_API_PTR *PFNGLATTACHSHADERPROC)(GLuint   program, GLuint   shader);
typedef void (GLAD_API_PTR *PFNGLBEGINPROC)(GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERPROC)(GLuint   id, GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYPROC)(GLenum   target, GLuint   id);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYINDEXEDPROC)(GLenum   target, GLuint   index, GLuint   id);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum   primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONPROC)(GLuint   program, GLuint   index, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERPROC)(GLenum   target, GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASEPROC)(GLenum   target, GLuint   index, GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGEPROC)(GLenum   target, GLuint   index, GLuint   buffer, GLintptr   offset, GLsizeiptr   size);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERSBASEPROC)(GLenum   target, GLuint   first, GLsizei   count, const  GLuint  * buffers);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERSRANGEPROC)(GLenum   target, GLuint   first, GLsizei   count, const  GLuint  * buffers, const  GLintptr  * offsets, const  GLsizeiptr  * sizes);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONPROC)(GLuint   program, GLuint   color, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint   program, GLuint   colorNumber, GLuint   index, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFERPROC)(GLenum   target, GLuint   framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDIMAGETEXTUREPROC)(GLuint   unit, GLuint   texture, GLint   level, GLboolean   layered, GLint   layer, GLenum   access, GLenum   format);
typedef void (GLAD_API_PTR *PFNGLBINDIMAGETEXTURESPROC)(GLuint   first, GLsizei   count, const  GLuint  * textures);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMPIPELINEPROC)(GLuint   pipeline);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFERPROC)(GLenum   target, GLuint   renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDSAMPLERPROC)(GLuint   unit, GLuint   sampler);
typedef void (GLAD_API_PTR *PFNGLBINDSAMPLERSPROC)(GLuint   first, GLsizei   count, const  GLuint  * samplers);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREPROC)(GLenum   target, GLuint   texture);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREUNITPROC)(GLuint   unit, GLuint   texture);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTURESPROC)(GLuint   first, GLsizei   count, const  GLuint  * textures);
typedef void (GLAD_API_PTR *PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum   target, GLuint   id);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYPROC)(GLuint   array);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXBUFFERPROC)(GLuint   bindingindex, GLuint   buffer, GLintptr   offset, GLsizei   stride);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXBUFFERSPROC)(GLuint   first, GLsizei   count, const  GLuint  * buffers, const  GLintptr  * offsets, const  GLsizei  * strides);
typedef void (GLAD_API_PTR *PFNGLBITMAPPROC)(GLsizei   width, GLsizei   height, GLfloat   xorig, GLfloat   yorig, GLfloat   xmove, GLfloat   ymove, const  GLubyte  * bitmap);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLORPROC)(GLfloat   red, GLfloat   green, GLfloat   blue, GLfloat   alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONPROC)(GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum   modeRGB, GLenum   modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint   buf, GLenum   modeRGB, GLenum   modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONIPROC)(GLuint   buf, GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCPROC)(GLenum   sfactor, GLenum   dfactor);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEPROC)(GLenum   sfactorRGB, GLenum   dfactorRGB, GLenum   sfactorAlpha, GLenum   dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIPROC)(GLuint   buf, GLenum   srcRGB, GLenum   dstRGB, GLenum   srcAlpha, GLenum   dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCIPROC)(GLuint   buf, GLenum   src, GLenum   dst);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFERPROC)(GLint   srcX0, GLint   srcY0, GLint   srcX1, GLint   srcY1, GLint   dstX0, GLint   dstY0, GLint   dstX1, GLint   dstY1, GLbitfield   mask, GLenum   filter);
typedef void (GLAD_API_PTR *PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint   readFramebuffer, GLuint   drawFramebuffer, GLint   srcX0, GLint   srcY0, GLint   srcX1, GLint   srcY1, GLint   dstX0, GLint   dstY0, GLint   dstX1, GLint   dstY1, GLbitfield   mask, GLenum   filter);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAPROC)(GLenum   target, GLsizeiptr   size, const void * data, GLenum   usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERSTORAGEPROC)(GLenum   target, GLsizeiptr   size, const void * data, GLbitfield   flags);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   size, const void * data);
typedef void (GLAD_API_PTR *PFNGLCALLLISTPROC)(GLuint   list);
typedef void (GLAD_API_PTR *PFNGLCALLLISTSPROC)(GLsizei   n, GLenum   type, const void * lists);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum   target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint   framebuffer, GLenum   target);
typedef void (GLAD_API_PTR *PFNGLCLAMPCOLORPROC)(GLenum   target, GLenum   clamp);
typedef void (GLAD_API_PTR *PFNGLCLEARPROC)(GLbitfield   mask);
typedef void (GLAD_API_PTR *PFNGLCLEARACCUMPROC)(GLfloat   red, GLfloat   green, GLfloat   blue, GLfloat   alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERDATAPROC)(GLenum   target, GLenum   internalformat, GLenum   format, GLenum   type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERSUBDATAPROC)(GLenum   target, GLenum   internalformat, GLintptr   offset, GLsizeiptr   size, GLenum   format, GLenum   type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFIPROC)(GLenum   buffer, GLint   drawbuffer, GLfloat   depth, GLint   stencil);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFVPROC)(GLenum   buffer, GLint   drawbuffer, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERIVPROC)(GLenum   buffer, GLint   drawbuffer, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERUIVPROC)(GLenum   buffer, GLint   drawbuffer, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORPROC)(GLfloat   red, GLfloat   green, GLfloat   blue, GLfloat   alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHPROC)(GLdouble   depth);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHFPROC)(GLfloat   d);
typedef void (GLAD_API_PTR *PFNGLCLEARINDEXPROC)(GLfloat   c);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint   buffer, GLenum   internalformat, GLenum   format, GLenum   type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint   buffer, GLenum   internalformat, GLintptr   offset, GLsizeiptr   size, GLenum   format, GLenum   type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint   framebuffer, GLenum   buffer, GLint   drawbuffer, GLfloat   depth, GLint   stencil);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint   framebuffer, GLenum   buffer, GLint   drawbuffer, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint   framebuffer, GLenum   buffer, GLint   drawbuffer, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint   framebuffer, GLenum   buffer, GLint   drawbuffer, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLCLEARSTENCILPROC)(GLint   s);
typedef void (GLAD_API_PTR *PFNGLCLEARTEXIMAGEPROC)(GLuint   texture, GLint   level, GLenum   format, GLenum   type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARTEXSUBIMAGEPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth, GLenum   format, GLenum   type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLIENTACTIVETEXTUREPROC)(GLenum   texture);
typedef GLenum (GLAD_API_PTR *PFNGLCLIENTWAITSYNCPROC)(GLsync   sync, GLbitfield   flags, GLuint64   timeout);
typedef void (GLAD_API_PTR *PFNGLCLIPCONTROLPROC)(GLenum   origin, GLenum   depth);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEPROC)(GLenum   plane, const  GLdouble  * equation);
typedef void (GLAD_API_PTR *PFNGLCOLOR3BPROC)(GLbyte   red, GLbyte   green, GLbyte   blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3BVPROC)(const  GLbyte  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3DPROC)(GLdouble   red, GLdouble   green, GLdouble   blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FPROC)(GLfloat   red, GLfloat   green, GLfloat   blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3IPROC)(GLint   red, GLint   green, GLint   blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3SPROC)(GLshort   red, GLshort   green, GLshort   blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UBPROC)(GLubyte   red, GLubyte   green, GLubyte   blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UBVPROC)(const  GLubyte  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UIPROC)(GLuint   red, GLuint   green, GLuint   blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UIVPROC)(const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3USPROC)(GLushort   red, GLushort   green, GLushort   blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3USVPROC)(const  GLushort  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4BPROC)(GLbyte   red, GLbyte   green, GLbyte   blue, GLbyte   alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4BVPROC)(const  GLbyte  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4DPROC)(GLdouble   red, GLdouble   green, GLdouble   blue, GLdouble   alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FPROC)(GLfloat   red, GLfloat   green, GLfloat   blue, GLfloat   alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4IPROC)(GLint   red, GLint   green, GLint   blue, GLint   alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4SPROC)(GLshort   red, GLshort   green, GLshort   blue, GLshort   alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBPROC)(GLubyte   red, GLubyte   green, GLubyte   blue, GLubyte   alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBVPROC)(const  GLubyte  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UIPROC)(GLuint   red, GLuint   green, GLuint   blue, GLuint   alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UIVPROC)(const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4USPROC)(GLushort   red, GLushort   green, GLushort   blue, GLushort   alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4USVPROC)(const  GLushort  * v);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKPROC)(GLboolean   red, GLboolean   green, GLboolean   blue, GLboolean   alpha);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKIPROC)(GLuint   index, GLboolean   r, GLboolean   g, GLboolean   b, GLboolean   a);
typedef void (GLAD_API_PTR *PFNGLCOLORMATERIALPROC)(GLenum   face, GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLCOLORP3UIPROC)(GLenum   type, GLuint   color);
typedef void (GLAD_API_PTR *PFNGLCOLORP3UIVPROC)(GLenum   type, const  GLuint  * color);
typedef void (GLAD_API_PTR *PFNGLCOLORP4UIPROC)(GLenum   type, GLuint   color);
typedef void (GLAD_API_PTR *PFNGLCOLORP4UIVPROC)(GLenum   type, const  GLuint  * color);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTERPROC)(GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERPROC)(GLuint   shader);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLsizei   width, GLint   border, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLsizei   width, GLsizei   height, GLint   border, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth, GLint   border, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLsizei   width, GLenum   format, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLsizei   width, GLsizei   height, GLenum   format, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth, GLenum   format, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLsizei   width, GLenum   format, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLint   yoffset, GLsizei   width, GLsizei   height, GLenum   format, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth, GLenum   format, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOPYBUFFERSUBDATAPROC)(GLenum   readTarget, GLenum   writeTarget, GLintptr   readOffset, GLintptr   writeOffset, GLsizeiptr   size);
typedef void (GLAD_API_PTR *PFNGLCOPYIMAGESUBDATAPROC)(GLuint   srcName, GLenum   srcTarget, GLint   srcLevel, GLint   srcX, GLint   srcY, GLint   srcZ, GLuint   dstName, GLenum   dstTarget, GLint   dstLevel, GLint   dstX, GLint   dstY, GLint   dstZ, GLsizei   srcWidth, GLsizei   srcHeight, GLsizei   srcDepth);
typedef void (GLAD_API_PTR *PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint   readBuffer, GLuint   writeBuffer, GLintptr   readOffset, GLintptr   writeOffset, GLsizeiptr   size);
typedef void (GLAD_API_PTR *PFNGLCOPYPIXELSPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLenum   type);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLint   x, GLint   y, GLsizei   width, GLint   border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLint   border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   x, GLint   y, GLsizei   width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLint   x, GLint   y, GLsizei   width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLint   yoffset, GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLCREATEBUFFERSPROC)(GLsizei   n, GLuint  * buffers);
typedef void (GLAD_API_PTR *PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei   n, GLuint  * framebuffers);
typedef GLuint (GLAD_API_PTR *PFNGLCREATEPROGRAMPROC)(void);
typedef void (GLAD_API_PTR *PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei   n, GLuint  * pipelines);
typedef void (GLAD_API_PTR *PFNGLCREATEQUERIESPROC)(GLenum   target, GLsizei   n, GLuint  * ids);
typedef void (GLAD_API_PTR *PFNGLCREATERENDERBUFFERSPROC)(GLsizei   n, GLuint  * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLCREATESAMPLERSPROC)(GLsizei   n, GLuint  * samplers);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROC)(GLenum   type);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROGRAMVPROC)(GLenum   type, GLsizei   count, const  GLchar  *const* strings);
typedef void (GLAD_API_PTR *PFNGLCREATETEXTURESPROC)(GLenum   target, GLsizei   n, GLuint  * textures);
typedef void (GLAD_API_PTR *PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei   n, GLuint  * ids);
typedef void (GLAD_API_PTR *PFNGLCREATEVERTEXARRAYSPROC)(GLsizei   n, GLuint  * arrays);
typedef void (GLAD_API_PTR *PFNGLCULLFACEPROC)(GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC   callback, const void * userParam);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECONTROLPROC)(GLenum   source, GLenum   type, GLenum   severity, GLsizei   count, const  GLuint  * ids, GLboolean   enabled);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEINSERTPROC)(GLenum   source, GLenum   type, GLuint   id, GLenum   severity, GLsizei   length, const  GLchar  * buf);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSPROC)(GLsizei   n, const  GLuint  * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei   n, const  GLuint  * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETELISTSPROC)(GLuint   list, GLsizei   range);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPROC)(GLuint   program);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei   n, const  GLuint  * pipelines);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESPROC)(GLsizei   n, const  GLuint  * ids);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSPROC)(GLsizei   n, const  GLuint  * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETESAMPLERSPROC)(GLsizei   count, const  GLuint  * samplers);
typedef void (GLAD_API_PTR *PFNGLDELETESHADERPROC)(GLuint   shader);
typedef void (GLAD_API_PTR *PFNGLDELETESYNCPROC)(GLsync   sync);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESPROC)(GLsizei   n, const  GLuint  * textures);
typedef void (GLAD_API_PTR *PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei   n, const  GLuint  * ids);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSPROC)(GLsizei   n, const  GLuint  * arrays);
typedef void (GLAD_API_PTR *PFNGLDEPTHFUNCPROC)(GLenum   func);
typedef void (GLAD_API_PTR *PFNGLDEPTHMASKPROC)(GLboolean   flag);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEPROC)(GLdouble   n, GLdouble   f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEARRAYVPROC)(GLuint   first, GLsizei   count, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEINDEXEDPROC)(GLuint   index, GLdouble   n, GLdouble   f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEFPROC)(GLfloat   n, GLfloat   f);
typedef void (GLAD_API_PTR *PFNGLDETACHSHADERPROC)(GLuint   program, GLuint   shader);
typedef void (GLAD_API_PTR *PFNGLDISABLEPROC)(GLenum   cap);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEPROC)(GLenum   array);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint   vaobj, GLuint   index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint   index);
typedef void (GLAD_API_PTR *PFNGLDISABLEIPROC)(GLenum   target, GLuint   index);
typedef void (GLAD_API_PTR *PFNGLDISPATCHCOMPUTEPROC)(GLuint   num_groups_x, GLuint   num_groups_y, GLuint   num_groups_z);
typedef void (GLAD_API_PTR *PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr   indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSPROC)(GLenum   mode, GLint   first, GLsizei   count);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINDIRECTPROC)(GLenum   mode, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum   mode, GLint   first, GLsizei   count, GLsizei   instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum   mode, GLint   first, GLsizei   count, GLsizei   instancecount, GLuint   baseinstance);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERPROC)(GLenum   buf);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSPROC)(GLsizei   n, const  GLenum  * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices, GLint   basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum   mode, GLenum   type, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices, GLsizei   instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices, GLsizei   instancecount, GLuint   baseinstance);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices, GLsizei   instancecount, GLint   basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices, GLsizei   instancecount, GLint   basevertex, GLuint   baseinstance);
typedef void (GLAD_API_PTR *PFNGLDRAWPIXELSPROC)(GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSPROC)(GLenum   mode, GLuint   start, GLuint   end, GLsizei   count, GLenum   type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum   mode, GLuint   start, GLuint   end, GLsizei   count, GLenum   type, const void * indices, GLint   basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum   mode, GLuint   id);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum   mode, GLuint   id, GLsizei   instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum   mode, GLuint   id, GLuint   stream);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum   mode, GLuint   id, GLuint   stream, GLsizei   instancecount);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPROC)(GLboolean   flag);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPOINTERPROC)(GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGVPROC)(const  GLboolean  * flag);
typedef void (GLAD_API_PTR *PFNGLENABLEPROC)(GLenum   cap);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEPROC)(GLenum   array);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint   vaobj, GLuint   index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint   index);
typedef void (GLAD_API_PTR *PFNGLENABLEIPROC)(GLenum   target, GLuint   index);
typedef void (GLAD_API_PTR *PFNGLENDPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDLISTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDQUERYPROC)(GLenum   target);
typedef void (GLAD_API_PTR *PFNGLENDQUERYINDEXEDPROC)(GLenum   target, GLuint   index);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1DPROC)(GLdouble   u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1DVPROC)(const  GLdouble  * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1FPROC)(GLfloat   u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1FVPROC)(const  GLfloat  * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2DPROC)(GLdouble   u, GLdouble   v);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2DVPROC)(const  GLdouble  * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2FPROC)(GLfloat   u, GLfloat   v);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2FVPROC)(const  GLfloat  * u);
typedef void (GLAD_API_PTR *PFNGLEVALMESH1PROC)(GLenum   mode, GLint   i1, GLint   i2);
typedef void (GLAD_API_PTR *PFNGLEVALMESH2PROC)(GLenum   mode, GLint   i1, GLint   i2, GLint   j1, GLint   j2);
typedef void (GLAD_API_PTR *PFNGLEVALPOINT1PROC)(GLint   i);
typedef void (GLAD_API_PTR *PFNGLEVALPOINT2PROC)(GLint   i, GLint   j);
typedef void (GLAD_API_PTR *PFNGLFEEDBACKBUFFERPROC)(GLsizei   size, GLenum   type, GLfloat  * buffer);
typedef GLsync (GLAD_API_PTR *PFNGLFENCESYNCPROC)(GLenum   condition, GLbitfield   flags);
typedef void (GLAD_API_PTR *PFNGLFINISHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   length);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint   buffer, GLintptr   offset, GLsizeiptr   length);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDPOINTERPROC)(GLenum   type, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDDPROC)(GLdouble   coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDDVPROC)(const  GLdouble  * coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDFPROC)(GLfloat   coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDFVPROC)(const  GLfloat  * coord);
typedef void (GLAD_API_PTR *PFNGLFOGFPROC)(GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLFOGFVPROC)(GLenum   pname, const  GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLFOGIPROC)(GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLFOGIVPROC)(GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum   target, GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum   target, GLenum   attachment, GLenum   renderbuffertarget, GLuint   renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum   target, GLenum   attachment, GLuint   texture, GLint   level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum   target, GLenum   attachment, GLenum   textarget, GLuint   texture, GLint   level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum   target, GLenum   attachment, GLenum   textarget, GLuint   texture, GLint   level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum   target, GLenum   attachment, GLenum   textarget, GLuint   texture, GLint   level, GLint   zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum   target, GLenum   attachment, GLuint   texture, GLint   level, GLint   layer);
typedef void (GLAD_API_PTR *PFNGLFRONTFACEPROC)(GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMPROC)(GLdouble   left, GLdouble   right, GLdouble   bottom, GLdouble   top, GLdouble   zNear, GLdouble   zFar);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSPROC)(GLsizei   n, GLuint  * buffers);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSPROC)(GLsizei   n, GLuint  * framebuffers);
typedef GLuint (GLAD_API_PTR *PFNGLGENLISTSPROC)(GLsizei   range);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMPIPELINESPROC)(GLsizei   n, GLuint  * pipelines);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESPROC)(GLsizei   n, GLuint  * ids);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSPROC)(GLsizei   n, GLuint  * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENSAMPLERSPROC)(GLsizei   count, GLuint  * samplers);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESPROC)(GLsizei   n, GLuint  * textures);
typedef void (GLAD_API_PTR *PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei   n, GLuint  * ids);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSPROC)(GLsizei   n, GLuint  * arrays);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPPROC)(GLenum   target);
typedef void (GLAD_API_PTR *PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint   texture);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint   program, GLuint   bufferIndex, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBPROC)(GLuint   program, GLuint   index, GLsizei   bufSize, GLsizei  * length, GLint  * size, GLenum  * type, GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint   program, GLenum   shadertype, GLuint   index, GLsizei   bufsize, GLsizei  * length, GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint   program, GLenum   shadertype, GLuint   index, GLsizei   bufsize, GLsizei  * length, GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint   program, GLenum   shadertype, GLuint   index, GLenum   pname, GLint  * values);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMPROC)(GLuint   program, GLuint   index, GLsizei   bufSize, GLsizei  * length, GLint  * size, GLenum  * type, GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint   program, GLuint   uniformBlockIndex, GLsizei   bufSize, GLsizei  * length, GLchar  * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint   program, GLuint   uniformBlockIndex, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint   program, GLuint   uniformIndex, GLsizei   bufSize, GLsizei  * length, GLchar  * uniformName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint   program, GLsizei   uniformCount, const  GLuint  * uniformIndices, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDSHADERSPROC)(GLuint   program, GLsizei   maxCount, GLsizei  * count, GLuint  * shaders);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONPROC)(GLuint   program, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANI_VPROC)(GLenum   target, GLuint   index, GLboolean  * data);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANVPROC)(GLenum   pname, GLboolean  * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum   target, GLenum   pname, GLint64  * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVPROC)(GLenum   target, GLenum   pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEPROC)(GLenum   plane, GLdouble  * equation);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum   target, GLint   level, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint   texture, GLint   level, GLsizei   bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth, GLsizei   bufSize, void * pixels);
typedef GLuint (GLAD_API_PTR *PFNGLGETDEBUGMESSAGELOGPROC)(GLuint   count, GLsizei   bufSize, GLenum  * sources, GLenum  * types, GLuint  * ids, GLenum  * severities, GLsizei  * lengths, GLchar  * messageLog);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEI_VPROC)(GLenum   target, GLuint   index, GLdouble  * data);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEVPROC)(GLenum   pname, GLdouble  * data);
typedef GLenum (GLAD_API_PTR *PFNGLGETERRORPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETFLOATI_VPROC)(GLenum   target, GLuint   index, GLfloat  * data);
typedef void (GLAD_API_PTR *PFNGLGETFLOATVPROC)(GLenum   pname, GLfloat  * data);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATAINDEXPROC)(GLuint   program, const  GLchar  * name);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONPROC)(GLuint   program, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum   target, GLenum   attachment, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef GLenum (GLAD_API_PTR *PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64I_VPROC)(GLenum   target, GLuint   index, GLint64  * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64VPROC)(GLenum   pname, GLint64  * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERI_VPROC)(GLenum   target, GLuint   index, GLint  * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERVPROC)(GLenum   pname, GLint  * data);
typedef void (GLAD_API_PTR *PFNGLGETINTERNALFORMATI64VPROC)(GLenum   target, GLenum   internalformat, GLenum   pname, GLsizei   bufSize, GLint64  * params);
typedef void (GLAD_API_PTR *PFNGLGETINTERNALFORMATIVPROC)(GLenum   target, GLenum   internalformat, GLenum   pname, GLsizei   bufSize, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTFVPROC)(GLenum   light, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTIVPROC)(GLenum   light, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETMAPDVPROC)(GLenum   target, GLenum   query, GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLGETMAPFVPROC)(GLenum   target, GLenum   query, GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLGETMAPIVPROC)(GLenum   target, GLenum   query, GLint  * v);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALFVPROC)(GLenum   face, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALIVPROC)(GLenum   face, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTISAMPLEFVPROC)(GLenum   pname, GLuint   index, GLfloat  * val);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint   buffer, GLenum   pname, GLint64  * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint   buffer, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint   buffer, GLenum   pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint   buffer, GLintptr   offset, GLsizeiptr   size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint   framebuffer, GLenum   attachment, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint   framebuffer, GLenum   pname, GLint  * param);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint   renderbuffer, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTLABELPROC)(GLenum   identifier, GLuint   name, GLsizei   bufSize, GLsizei  * length, GLchar  * label);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPTRLABELPROC)(const void * ptr, GLsizei   bufSize, GLsizei  * length, GLchar  * label);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPFVPROC)(GLenum   map, GLfloat  * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPUIVPROC)(GLenum   map, GLuint  * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPUSVPROC)(GLenum   map, GLushort  * values);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVPROC)(GLenum   pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte  * mask);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMBINARYPROC)(GLuint   program, GLsizei   bufSize, GLsizei  * length, GLenum  * binaryFormat, void * binary);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMINFOLOGPROC)(GLuint   program, GLsizei   bufSize, GLsizei  * length, GLchar  * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint   program, GLenum   programInterface, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint   pipeline, GLsizei   bufSize, GLsizei  * length, GLchar  * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint   pipeline, GLenum   pname, GLint  * params);
typedef GLuint (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint   program, GLenum   programInterface, const  GLchar  * name);
typedef GLint (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint   program, GLenum   programInterface, const  GLchar  * name);
typedef GLint (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint   program, GLenum   programInterface, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint   program, GLenum   programInterface, GLuint   index, GLsizei   bufSize, GLsizei  * length, GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint   program, GLenum   programInterface, GLuint   index, GLsizei   propCount, const  GLenum  * props, GLsizei   bufSize, GLsizei  * length, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTAGEIVPROC)(GLuint   program, GLenum   shadertype, GLenum   pname, GLint  * values);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVPROC)(GLuint   program, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint   id, GLuint   buffer, GLenum   pname, GLintptr   offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint   id, GLuint   buffer, GLenum   pname, GLintptr   offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint   id, GLuint   buffer, GLenum   pname, GLintptr   offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint   id, GLuint   buffer, GLenum   pname, GLintptr   offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYINDEXEDIVPROC)(GLenum   target, GLuint   index, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTI64VPROC)(GLuint   id, GLenum   pname, GLint64  * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVPROC)(GLuint   id, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUI64VPROC)(GLuint   id, GLenum   pname, GLuint64  * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVPROC)(GLuint   id, GLenum   pname, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint   sampler, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint   sampler, GLenum   pname, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint   sampler, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint   sampler, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETSHADERINFOLOGPROC)(GLuint   shader, GLsizei   bufSize, GLsizei  * length, GLchar  * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum   shadertype, GLenum   precisiontype, GLint  * range, GLint  * precision);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEPROC)(GLuint   shader, GLsizei   bufSize, GLsizei  * length, GLchar  * source);
typedef void (GLAD_API_PTR *PFNGLGETSHADERIVPROC)(GLuint   shader, GLenum   pname, GLint  * params);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGPROC)(GLenum   name);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGIPROC)(GLenum   name, GLuint   index);
typedef GLuint (GLAD_API_PTR *PFNGLGETSUBROUTINEINDEXPROC)(GLuint   program, GLenum   shadertype, const  GLchar  * name);
typedef GLint (GLAD_API_PTR *PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint   program, GLenum   shadertype, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETSYNCIVPROC)(GLsync   sync, GLenum   pname, GLsizei   bufSize, GLsizei  * length, GLint  * values);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVFVPROC)(GLenum   target, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENDVPROC)(GLenum   coord, GLenum   pname, GLdouble  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENFVPROC)(GLenum   coord, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENIVPROC)(GLenum   coord, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXIMAGEPROC)(GLenum   target, GLint   level, GLenum   format, GLenum   type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum   target, GLint   level, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum   target, GLint   level, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVPROC)(GLenum   target, GLenum   pname, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERFVPROC)(GLenum   target, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREIMAGEPROC)(GLuint   texture, GLint   level, GLenum   format, GLenum   type, GLsizei   bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint   texture, GLint   level, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint   texture, GLint   level, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint   texture, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint   texture, GLenum   pname, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint   texture, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint   texture, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURESUBIMAGEPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth, GLenum   format, GLenum   type, GLsizei   bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint   program, GLuint   index, GLsizei   bufSize, GLsizei  * length, GLsizei  * size, GLenum  * type, GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint   xfb, GLenum   pname, GLuint   index, GLint64  * param);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint   xfb, GLenum   pname, GLuint   index, GLint  * param);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint   xfb, GLenum   pname, GLint  * param);
typedef GLuint (GLAD_API_PTR *PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint   program, const  GLchar  * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMINDICESPROC)(GLuint   program, GLsizei   uniformCount, const  GLchar  *const* uniformNames, GLuint  * uniformIndices);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONPROC)(GLuint   program, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum   shadertype, GLint   location, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMDVPROC)(GLuint   program, GLint   location, GLdouble  * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVPROC)(GLuint   program, GLint   location, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVPROC)(GLuint   program, GLint   location, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUIVPROC)(GLuint   program, GLint   location, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint   vaobj, GLuint   index, GLenum   pname, GLint64  * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint   vaobj, GLuint   index, GLenum   pname, GLint  * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYIVPROC)(GLuint   vaobj, GLenum   pname, GLint  * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVPROC)(GLuint   index, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint   index, GLenum   pname, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBLDVPROC)(GLuint   index, GLenum   pname, GLdouble  * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint   index, GLenum   pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVPROC)(GLuint   index, GLenum   pname, GLdouble  * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVPROC)(GLuint   index, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVPROC)(GLuint   index, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETNCOLORTABLEPROC)(GLenum   target, GLenum   format, GLenum   type, GLsizei   bufSize, void * table);
typedef void (GLAD_API_PTR *PFNGLGETNCOMPRESSEDTEXIMAGEPROC)(GLenum   target, GLint   lod, GLsizei   bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETNCONVOLUTIONFILTERPROC)(GLenum   target, GLenum   format, GLenum   type, GLsizei   bufSize, void * image);
typedef void (GLAD_API_PTR *PFNGLGETNHISTOGRAMPROC)(GLenum   target, GLboolean   reset, GLenum   format, GLenum   type, GLsizei   bufSize, void * values);
typedef void (GLAD_API_PTR *PFNGLGETNMAPDVPROC)(GLenum   target, GLenum   query, GLsizei   bufSize, GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPFVPROC)(GLenum   target, GLenum   query, GLsizei   bufSize, GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPIVPROC)(GLenum   target, GLenum   query, GLsizei   bufSize, GLint  * v);
typedef void (GLAD_API_PTR *PFNGLGETNMINMAXPROC)(GLenum   target, GLboolean   reset, GLenum   format, GLenum   type, GLsizei   bufSize, void * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPFVPROC)(GLenum   map, GLsizei   bufSize, GLfloat  * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPUIVPROC)(GLenum   map, GLsizei   bufSize, GLuint  * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPUSVPROC)(GLenum   map, GLsizei   bufSize, GLushort  * values);
typedef void (GLAD_API_PTR *PFNGLGETNPOLYGONSTIPPLEPROC)(GLsizei   bufSize, GLubyte  * pattern);
typedef void (GLAD_API_PTR *PFNGLGETNSEPARABLEFILTERPROC)(GLenum   target, GLenum   format, GLenum   type, GLsizei   rowBufSize, void * row, GLsizei   columnBufSize, void * column, void * span);
typedef void (GLAD_API_PTR *PFNGLGETNTEXIMAGEPROC)(GLenum   target, GLint   level, GLenum   format, GLenum   type, GLsizei   bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMDVPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLdouble  * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMFVPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMIVPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMUIVPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLHINTPROC)(GLenum   target, GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLINDEXMASKPROC)(GLuint   mask);
typedef void (GLAD_API_PTR *PFNGLINDEXPOINTERPROC)(GLenum   type, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLINDEXDPROC)(GLdouble   c);
typedef void (GLAD_API_PTR *PFNGLINDEXDVPROC)(const  GLdouble  * c);
typedef void (GLAD_API_PTR *PFNGLINDEXFPROC)(GLfloat   c);
typedef void (GLAD_API_PTR *PFNGLINDEXFVPROC)(const  GLfloat  * c);
typedef void (GLAD_API_PTR *PFNGLINDEXIPROC)(GLint   c);
typedef void (GLAD_API_PTR *PFNGLINDEXIVPROC)(const  GLint  * c);
typedef void (GLAD_API_PTR *PFNGLINDEXSPROC)(GLshort   c);
typedef void (GLAD_API_PTR *PFNGLINDEXSVPROC)(const  GLshort  * c);
typedef void (GLAD_API_PTR *PFNGLINDEXUBPROC)(GLubyte   c);
typedef void (GLAD_API_PTR *PFNGLINDEXUBVPROC)(const  GLubyte  * c);
typedef void (GLAD_API_PTR *PFNGLINITNAMESPROC)(void);
typedef void (GLAD_API_PTR *PFNGLINTERLEAVEDARRAYSPROC)(GLenum   format, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLINVALIDATEBUFFERDATAPROC)(GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint   buffer, GLintptr   offset, GLsizeiptr   length);
typedef void (GLAD_API_PTR *PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum   target, GLsizei   numAttachments, const  GLenum  * attachments);
typedef void (GLAD_API_PTR *PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint   framebuffer, GLsizei   numAttachments, const  GLenum  * attachments);
typedef void (GLAD_API_PTR *PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint   framebuffer, GLsizei   numAttachments, const  GLenum  * attachments, GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum   target, GLsizei   numAttachments, const  GLenum  * attachments, GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLINVALIDATETEXIMAGEPROC)(GLuint   texture, GLint   level);
typedef void (GLAD_API_PTR *PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERPROC)(GLuint   buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDPROC)(GLenum   cap);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDIPROC)(GLenum   target, GLuint   index);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFERPROC)(GLuint   framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISLISTPROC)(GLuint   list);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPROC)(GLuint   program);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPIPELINEPROC)(GLuint   pipeline);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYPROC)(GLuint   id);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFERPROC)(GLuint   renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISSAMPLERPROC)(GLuint   sampler);
typedef GLboolean (GLAD_API_PTR *PFNGLISSHADERPROC)(GLuint   shader);
typedef GLboolean (GLAD_API_PTR *PFNGLISSYNCPROC)(GLsync   sync);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREPROC)(GLuint   texture);
typedef GLboolean (GLAD_API_PTR *PFNGLISTRANSFORMFEEDBACKPROC)(GLuint   id);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYPROC)(GLuint   array);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELFPROC)(GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELFVPROC)(GLenum   pname, const  GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELIPROC)(GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELIVPROC)(GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTFPROC)(GLenum   light, GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLLIGHTFVPROC)(GLenum   light, GLenum   pname, const  GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTIPROC)(GLenum   light, GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLLIGHTIVPROC)(GLenum   light, GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLLINESTIPPLEPROC)(GLint   factor, GLushort   pattern);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHPROC)(GLfloat   width);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMPROC)(GLuint   program);
typedef void (GLAD_API_PTR *PFNGLLISTBASEPROC)(GLuint   base);
typedef void (GLAD_API_PTR *PFNGLLOADIDENTITYPROC)(void);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXDPROC)(const  GLdouble  * m);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXFPROC)(const  GLfloat  * m);
typedef void (GLAD_API_PTR *PFNGLLOADNAMEPROC)(GLuint   name);
typedef void (GLAD_API_PTR *PFNGLLOADTRANSPOSEMATRIXDPROC)(const  GLdouble  * m);
typedef void (GLAD_API_PTR *PFNGLLOADTRANSPOSEMATRIXFPROC)(const  GLfloat  * m);
typedef void (GLAD_API_PTR *PFNGLLOGICOPPROC)(GLenum   opcode);
typedef void (GLAD_API_PTR *PFNGLMAP1DPROC)(GLenum   target, GLdouble   u1, GLdouble   u2, GLint   stride, GLint   order, const  GLdouble  * points);
typedef void (GLAD_API_PTR *PFNGLMAP1FPROC)(GLenum   target, GLfloat   u1, GLfloat   u2, GLint   stride, GLint   order, const  GLfloat  * points);
typedef void (GLAD_API_PTR *PFNGLMAP2DPROC)(GLenum   target, GLdouble   u1, GLdouble   u2, GLint   ustride, GLint   uorder, GLdouble   v1, GLdouble   v2, GLint   vstride, GLint   vorder, const  GLdouble  * points);
typedef void (GLAD_API_PTR *PFNGLMAP2FPROC)(GLenum   target, GLfloat   u1, GLfloat   u2, GLint   ustride, GLint   uorder, GLfloat   v1, GLfloat   v2, GLint   vstride, GLint   vorder, const  GLfloat  * points);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERPROC)(GLenum   target, GLenum   access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERRANGEPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   length, GLbitfield   access);
typedef void (GLAD_API_PTR *PFNGLMAPGRID1DPROC)(GLint   un, GLdouble   u1, GLdouble   u2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID1FPROC)(GLint   un, GLfloat   u1, GLfloat   u2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID2DPROC)(GLint   un, GLdouble   u1, GLdouble   u2, GLint   vn, GLdouble   v1, GLdouble   v2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID2FPROC)(GLint   un, GLfloat   u1, GLfloat   u2, GLint   vn, GLfloat   v1, GLfloat   v2);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFERPROC)(GLuint   buffer, GLenum   access);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint   buffer, GLintptr   offset, GLsizeiptr   length, GLbitfield   access);
typedef void (GLAD_API_PTR *PFNGLMATERIALFPROC)(GLenum   face, GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLMATERIALFVPROC)(GLenum   face, GLenum   pname, const  GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLMATERIALIPROC)(GLenum   face, GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLMATERIALIVPROC)(GLenum   face, GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLMATRIXMODEPROC)(GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLMEMORYBARRIERPROC)(GLbitfield   barriers);
typedef void (GLAD_API_PTR *PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield   barriers);
typedef void (GLAD_API_PTR *PFNGLMINSAMPLESHADINGPROC)(GLfloat   value);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXDPROC)(const  GLdouble  * m);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXFPROC)(const  GLfloat  * m);
typedef void (GLAD_API_PTR *PFNGLMULTTRANSPOSEMATRIXDPROC)(const  GLdouble  * m);
typedef void (GLAD_API_PTR *PFNGLMULTTRANSPOSEMATRIXFPROC)(const  GLfloat  * m);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSPROC)(GLenum   mode, const  GLint  * first, const  GLsizei  * count, GLsizei   drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum   mode, const void * indirect, GLsizei   drawcount, GLsizei   stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)(GLenum   mode, const void * indirect, GLintptr   drawcount, GLsizei   maxdrawcount, GLsizei   stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSPROC)(GLenum   mode, const  GLsizei  * count, GLenum   type, const void *const* indices, GLsizei   drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum   mode, const  GLsizei  * count, GLenum   type, const void *const* indices, GLsizei   drawcount, const  GLint  * basevertex);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum   mode, GLenum   type, const void * indirect, GLsizei   drawcount, GLsizei   stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)(GLenum   mode, GLenum   type, const void * indirect, GLintptr   drawcount, GLsizei   maxdrawcount, GLsizei   stride);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DPROC)(GLenum   target, GLdouble   s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DVPROC)(GLenum   target, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FPROC)(GLenum   target, GLfloat   s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FVPROC)(GLenum   target, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IPROC)(GLenum   target, GLint   s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IVPROC)(GLenum   target, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SPROC)(GLenum   target, GLshort   s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SVPROC)(GLenum   target, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DPROC)(GLenum   target, GLdouble   s, GLdouble   t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DVPROC)(GLenum   target, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FPROC)(GLenum   target, GLfloat   s, GLfloat   t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FVPROC)(GLenum   target, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IPROC)(GLenum   target, GLint   s, GLint   t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IVPROC)(GLenum   target, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SPROC)(GLenum   target, GLshort   s, GLshort   t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SVPROC)(GLenum   target, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DPROC)(GLenum   target, GLdouble   s, GLdouble   t, GLdouble   r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DVPROC)(GLenum   target, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FPROC)(GLenum   target, GLfloat   s, GLfloat   t, GLfloat   r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FVPROC)(GLenum   target, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IPROC)(GLenum   target, GLint   s, GLint   t, GLint   r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IVPROC)(GLenum   target, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SPROC)(GLenum   target, GLshort   s, GLshort   t, GLshort   r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SVPROC)(GLenum   target, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DPROC)(GLenum   target, GLdouble   s, GLdouble   t, GLdouble   r, GLdouble   q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DVPROC)(GLenum   target, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FPROC)(GLenum   target, GLfloat   s, GLfloat   t, GLfloat   r, GLfloat   q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FVPROC)(GLenum   target, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IPROC)(GLenum   target, GLint   s, GLint   t, GLint   r, GLint   q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IVPROC)(GLenum   target, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SPROC)(GLenum   target, GLshort   s, GLshort   t, GLshort   r, GLshort   q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SVPROC)(GLenum   target, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP1UIPROC)(GLenum   texture, GLenum   type, GLuint   coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP1UIVPROC)(GLenum   texture, GLenum   type, const  GLuint  * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP2UIPROC)(GLenum   texture, GLenum   type, GLuint   coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP2UIVPROC)(GLenum   texture, GLenum   type, const  GLuint  * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP3UIPROC)(GLenum   texture, GLenum   type, GLuint   coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP3UIVPROC)(GLenum   texture, GLenum   type, const  GLuint  * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP4UIPROC)(GLenum   texture, GLenum   type, GLuint   coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP4UIVPROC)(GLenum   texture, GLenum   type, const  GLuint  * coords);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERDATAPROC)(GLuint   buffer, GLsizeiptr   size, const void * data, GLenum   usage);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint   buffer, GLsizeiptr   size, const void * data, GLbitfield   flags);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint   buffer, GLintptr   offset, GLsizeiptr   size, const void * data);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint   framebuffer, GLenum   buf);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint   framebuffer, GLsizei   n, const  GLenum  * bufs);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint   framebuffer, GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint   framebuffer, GLenum   src);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint   framebuffer, GLenum   attachment, GLenum   renderbuffertarget, GLuint   renderbuffer);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint   framebuffer, GLenum   attachment, GLuint   texture, GLint   level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint   framebuffer, GLenum   attachment, GLuint   texture, GLint   level, GLint   layer);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint   renderbuffer, GLenum   internalformat, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint   renderbuffer, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLNEWLISTPROC)(GLuint   list, GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLNORMAL3BPROC)(GLbyte   nx, GLbyte   ny, GLbyte   nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3BVPROC)(const  GLbyte  * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3DPROC)(GLdouble   nx, GLdouble   ny, GLdouble   nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FPROC)(GLfloat   nx, GLfloat   ny, GLfloat   nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3IPROC)(GLint   nx, GLint   ny, GLint   nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3SPROC)(GLshort   nx, GLshort   ny, GLshort   nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLNORMALP3UIPROC)(GLenum   type, GLuint   coords);
typedef void (GLAD_API_PTR *PFNGLNORMALP3UIVPROC)(GLenum   type, const  GLuint  * coords);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTERPROC)(GLenum   type, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLOBJECTLABELPROC)(GLenum   identifier, GLuint   name, GLsizei   length, const  GLchar  * label);
typedef void (GLAD_API_PTR *PFNGLOBJECTPTRLABELPROC)(const void * ptr, GLsizei   length, const  GLchar  * label);
typedef void (GLAD_API_PTR *PFNGLORTHOPROC)(GLdouble   left, GLdouble   right, GLdouble   bottom, GLdouble   top, GLdouble   zNear, GLdouble   zFar);
typedef void (GLAD_API_PTR *PFNGLPASSTHROUGHPROC)(GLfloat   token);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERFVPROC)(GLenum   pname, const  GLfloat  * values);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERIPROC)(GLenum   pname, GLint   value);
typedef void (GLAD_API_PTR *PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPFVPROC)(GLenum   map, GLsizei   mapsize, const  GLfloat  * values);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPUIVPROC)(GLenum   map, GLsizei   mapsize, const  GLuint  * values);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPUSVPROC)(GLenum   map, GLsizei   mapsize, const  GLushort  * values);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREFPROC)(GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREIPROC)(GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFERFPROC)(GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFERIPROC)(GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLPIXELZOOMPROC)(GLfloat   xfactor, GLfloat   yfactor);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFPROC)(GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVPROC)(GLenum   pname, const  GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIPROC)(GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIVPROC)(GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEPROC)(GLfloat   size);
typedef void (GLAD_API_PTR *PFNGLPOLYGONMODEPROC)(GLenum   face, GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETPROC)(GLfloat   factor, GLfloat   units);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETCLAMPPROC)(GLfloat   factor, GLfloat   units, GLfloat   clamp);
typedef void (GLAD_API_PTR *PFNGLPOLYGONSTIPPLEPROC)(const  GLubyte  * mask);
typedef void (GLAD_API_PTR *PFNGLPOPATTRIBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPCLIENTATTRIBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPDEBUGGROUPPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPMATRIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPNAMEPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint   index);
typedef void (GLAD_API_PTR *PFNGLPRIORITIZETEXTURESPROC)(GLsizei   n, const  GLuint  * textures, const  GLfloat  * priorities);
typedef void (GLAD_API_PTR *PFNGLPROGRAMBINARYPROC)(GLuint   program, GLenum   binaryFormat, const void * binary, GLsizei   length);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIPROC)(GLuint   program, GLenum   pname, GLint   value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DPROC)(GLuint   program, GLint   location, GLdouble   v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FPROC)(GLuint   program, GLint   location, GLfloat   v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IPROC)(GLuint   program, GLint   location, GLint   v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIPROC)(GLuint   program, GLint   location, GLuint   v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DPROC)(GLuint   program, GLint   location, GLdouble   v0, GLdouble   v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FPROC)(GLuint   program, GLint   location, GLfloat   v0, GLfloat   v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IPROC)(GLuint   program, GLint   location, GLint   v0, GLint   v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIPROC)(GLuint   program, GLint   location, GLuint   v0, GLuint   v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DPROC)(GLuint   program, GLint   location, GLdouble   v0, GLdouble   v1, GLdouble   v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FPROC)(GLuint   program, GLint   location, GLfloat   v0, GLfloat   v1, GLfloat   v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IPROC)(GLuint   program, GLint   location, GLint   v0, GLint   v1, GLint   v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIPROC)(GLuint   program, GLint   location, GLuint   v0, GLuint   v1, GLuint   v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DPROC)(GLuint   program, GLint   location, GLdouble   v0, GLdouble   v1, GLdouble   v2, GLdouble   v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FPROC)(GLuint   program, GLint   location, GLfloat   v0, GLfloat   v1, GLfloat   v2, GLfloat   v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IPROC)(GLuint   program, GLint   location, GLint   v0, GLint   v1, GLint   v2, GLint   v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIPROC)(GLuint   program, GLint   location, GLuint   v0, GLuint   v1, GLuint   v2, GLuint   v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROVOKINGVERTEXPROC)(GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLPUSHATTRIBPROC)(GLbitfield   mask);
typedef void (GLAD_API_PTR *PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield   mask);
typedef void (GLAD_API_PTR *PFNGLPUSHDEBUGGROUPPROC)(GLenum   source, GLuint   id, GLsizei   length, const  GLchar  * message);
typedef void (GLAD_API_PTR *PFNGLPUSHMATRIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPUSHNAMEPROC)(GLuint   name);
typedef void (GLAD_API_PTR *PFNGLQUERYCOUNTERPROC)(GLuint   id, GLenum   target);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2DPROC)(GLdouble   x, GLdouble   y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2FPROC)(GLfloat   x, GLfloat   y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2IPROC)(GLint   x, GLint   y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2SPROC)(GLshort   x, GLshort   y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3DPROC)(GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3FPROC)(GLfloat   x, GLfloat   y, GLfloat   z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3IPROC)(GLint   x, GLint   y, GLint   z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3SPROC)(GLshort   x, GLshort   y, GLshort   z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4DPROC)(GLdouble   x, GLdouble   y, GLdouble   z, GLdouble   w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4FPROC)(GLfloat   x, GLfloat   y, GLfloat   z, GLfloat   w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4IPROC)(GLint   x, GLint   y, GLint   z, GLint   w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4SPROC)(GLshort   x, GLshort   y, GLshort   z, GLshort   w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLREADBUFFERPROC)(GLenum   src);
typedef void (GLAD_API_PTR *PFNGLREADPIXELSPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLREADNPIXELSPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, GLsizei   bufSize, void * data);
typedef void (GLAD_API_PTR *PFNGLRECTDPROC)(GLdouble   x1, GLdouble   y1, GLdouble   x2, GLdouble   y2);
typedef void (GLAD_API_PTR *PFNGLRECTDVPROC)(const  GLdouble  * v1, const  GLdouble  * v2);
typedef void (GLAD_API_PTR *PFNGLRECTFPROC)(GLfloat   x1, GLfloat   y1, GLfloat   x2, GLfloat   y2);
typedef void (GLAD_API_PTR *PFNGLRECTFVPROC)(const  GLfloat  * v1, const  GLfloat  * v2);
typedef void (GLAD_API_PTR *PFNGLRECTIPROC)(GLint   x1, GLint   y1, GLint   x2, GLint   y2);
typedef void (GLAD_API_PTR *PFNGLRECTIVPROC)(const  GLint  * v1, const  GLint  * v2);
typedef void (GLAD_API_PTR *PFNGLRECTSPROC)(GLshort   x1, GLshort   y1, GLshort   x2, GLshort   y2);
typedef void (GLAD_API_PTR *PFNGLRECTSVPROC)(const  GLshort  * v1, const  GLshort  * v2);
typedef void (GLAD_API_PTR *PFNGLRELEASESHADERCOMPILERPROC)(void);
typedef GLint (GLAD_API_PTR *PFNGLRENDERMODEPROC)(GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEPROC)(GLenum   target, GLenum   internalformat, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum   target, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLROTATEDPROC)(GLdouble   angle, GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLROTATEFPROC)(GLfloat   angle, GLfloat   x, GLfloat   y, GLfloat   z);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEPROC)(GLfloat   value, GLboolean   invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKIPROC)(GLuint   maskNumber, GLbitfield   mask);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIIVPROC)(GLuint   sampler, GLenum   pname, const  GLint  * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint   sampler, GLenum   pname, const  GLuint  * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFPROC)(GLuint   sampler, GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFVPROC)(GLuint   sampler, GLenum   pname, const  GLfloat  * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIPROC)(GLuint   sampler, GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIVPROC)(GLuint   sampler, GLenum   pname, const  GLint  * param);
typedef void (GLAD_API_PTR *PFNGLSCALEDPROC)(GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLSCALEFPROC)(GLfloat   x, GLfloat   y, GLfloat   z);
typedef void (GLAD_API_PTR *PFNGLSCISSORPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLSCISSORARRAYVPROC)(GLuint   first, GLsizei   count, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDPROC)(GLuint   index, GLint   left, GLint   bottom, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3BPROC)(GLbyte   red, GLbyte   green, GLbyte   blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3BVPROC)(const  GLbyte  * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3DPROC)(GLdouble   red, GLdouble   green, GLdouble   blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3FPROC)(GLfloat   red, GLfloat   green, GLfloat   blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3IPROC)(GLint   red, GLint   green, GLint   blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3SPROC)(GLshort   red, GLshort   green, GLshort   blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UBPROC)(GLubyte   red, GLubyte   green, GLubyte   blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UBVPROC)(const  GLubyte  * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UIPROC)(GLuint   red, GLuint   green, GLuint   blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UIVPROC)(const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3USPROC)(GLushort   red, GLushort   green, GLushort   blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3USVPROC)(const  GLushort  * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORP3UIPROC)(GLenum   type, GLuint   color);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORP3UIVPROC)(GLenum   type, const  GLuint  * color);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORPOINTERPROC)(GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLSELECTBUFFERPROC)(GLsizei   size, GLuint  * buffer);
typedef void (GLAD_API_PTR *PFNGLSHADEMODELPROC)(GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLSHADERBINARYPROC)(GLsizei   count, const  GLuint  * shaders, GLenum   binaryformat, const void * binary, GLsizei   length);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEPROC)(GLuint   shader, GLsizei   count, const  GLchar  *const* string, const  GLint  * length);
typedef void (GLAD_API_PTR *PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint   program, GLuint   storageBlockIndex, GLuint   storageBlockBinding);
typedef void (GLAD_API_PTR *PFNGLSPECIALIZESHADERPROC)(GLuint   shader, const  GLchar  * pEntryPoint, GLuint   numSpecializationConstants, const  GLuint  * pConstantIndex, const  GLuint  * pConstantValue);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCPROC)(GLenum   func, GLint   ref, GLuint   mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEPROC)(GLenum   face, GLenum   func, GLint   ref, GLuint   mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKPROC)(GLuint   mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKSEPARATEPROC)(GLenum   face, GLuint   mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPPROC)(GLenum   fail, GLenum   zfail, GLenum   zpass);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPSEPARATEPROC)(GLenum   face, GLenum   sfail, GLenum   dpfail, GLenum   dppass);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERPROC)(GLenum   target, GLenum   internalformat, GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERRANGEPROC)(GLenum   target, GLenum   internalformat, GLuint   buffer, GLintptr   offset, GLsizeiptr   size);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1DPROC)(GLdouble   s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1FPROC)(GLfloat   s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1IPROC)(GLint   s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1SPROC)(GLshort   s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2DPROC)(GLdouble   s, GLdouble   t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FPROC)(GLfloat   s, GLfloat   t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2IPROC)(GLint   s, GLint   t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2SPROC)(GLshort   s, GLshort   t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3DPROC)(GLdouble   s, GLdouble   t, GLdouble   r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3FPROC)(GLfloat   s, GLfloat   t, GLfloat   r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3IPROC)(GLint   s, GLint   t, GLint   r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3SPROC)(GLshort   s, GLshort   t, GLshort   r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4DPROC)(GLdouble   s, GLdouble   t, GLdouble   r, GLdouble   q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FPROC)(GLfloat   s, GLfloat   t, GLfloat   r, GLfloat   q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4IPROC)(GLint   s, GLint   t, GLint   r, GLint   q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4SPROC)(GLshort   s, GLshort   t, GLshort   r, GLshort   q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP1UIPROC)(GLenum   type, GLuint   coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP1UIVPROC)(GLenum   type, const  GLuint  * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP2UIPROC)(GLenum   type, GLuint   coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP2UIVPROC)(GLenum   type, const  GLuint  * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP3UIPROC)(GLenum   type, GLuint   coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP3UIVPROC)(GLenum   type, const  GLuint  * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP4UIPROC)(GLenum   type, GLuint   coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP4UIVPROC)(GLenum   type, const  GLuint  * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTERPROC)(GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTEXENVFPROC)(GLenum   target, GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLTEXENVFVPROC)(GLenum   target, GLenum   pname, const  GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLTEXENVIPROC)(GLenum   target, GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLTEXENVIVPROC)(GLenum   target, GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENDPROC)(GLenum   coord, GLenum   pname, GLdouble   param);
typedef void (GLAD_API_PTR *PFNGLTEXGENDVPROC)(GLenum   coord, GLenum   pname, const  GLdouble  * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENFPROC)(GLenum   coord, GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLTEXGENFVPROC)(GLenum   coord, GLenum   pname, const  GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENIPROC)(GLenum   coord, GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLTEXGENIVPROC)(GLenum   coord, GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE1DPROC)(GLenum   target, GLint   level, GLint   internalformat, GLsizei   width, GLint   border, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DPROC)(GLenum   target, GLint   level, GLint   internalformat, GLsizei   width, GLsizei   height, GLint   border, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum   target, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height, GLboolean   fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DPROC)(GLenum   target, GLint   level, GLint   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth, GLint   border, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum   target, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth, GLboolean   fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVPROC)(GLenum   target, GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVPROC)(GLenum   target, GLenum   pname, const  GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFPROC)(GLenum   target, GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFVPROC)(GLenum   target, GLenum   pname, const  GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIPROC)(GLenum   target, GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIVPROC)(GLenum   target, GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE1DPROC)(GLenum   target, GLsizei   levels, GLenum   internalformat, GLsizei   width);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE2DPROC)(GLenum   target, GLsizei   levels, GLenum   internalformat, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum   target, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height, GLboolean   fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE3DPROC)(GLenum   target, GLsizei   levels, GLenum   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum   target, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth, GLboolean   fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLsizei   width, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE3DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBARRIERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFERPROC)(GLuint   texture, GLenum   internalformat, GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFERRANGEPROC)(GLuint   texture, GLenum   internalformat, GLuint   buffer, GLintptr   offset, GLsizeiptr   size);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIIVPROC)(GLuint   texture, GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint   texture, GLenum   pname, const  GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFPROC)(GLuint   texture, GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFVPROC)(GLuint   texture, GLenum   pname, const  GLfloat  * param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIPROC)(GLuint   texture, GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIVPROC)(GLuint   texture, GLenum   pname, const  GLint  * param);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE1DPROC)(GLuint   texture, GLsizei   levels, GLenum   internalformat, GLsizei   width);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DPROC)(GLuint   texture, GLsizei   levels, GLenum   internalformat, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint   texture, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height, GLboolean   fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DPROC)(GLuint   texture, GLsizei   levels, GLenum   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint   texture, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth, GLboolean   fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE1DPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLsizei   width, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE2DPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLint   yoffset, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE3DPROC)(GLuint   texture, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREVIEWPROC)(GLuint   texture, GLenum   target, GLuint   origtexture, GLenum   internalformat, GLuint   minlevel, GLuint   numlevels, GLuint   minlayer, GLuint   numlayers);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint   xfb, GLuint   index, GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint   xfb, GLuint   index, GLuint   buffer, GLintptr   offset, GLsizeiptr   size);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint   program, GLsizei   count, const  GLchar  *const* varyings, GLenum   bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEDPROC)(GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEFPROC)(GLfloat   x, GLfloat   y, GLfloat   z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1DPROC)(GLint   location, GLdouble   x);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1DVPROC)(GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FPROC)(GLint   location, GLfloat   v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IPROC)(GLint   location, GLint   v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIPROC)(GLint   location, GLuint   v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2DPROC)(GLint   location, GLdouble   x, GLdouble   y);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2DVPROC)(GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FPROC)(GLint   location, GLfloat   v0, GLfloat   v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IPROC)(GLint   location, GLint   v0, GLint   v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIPROC)(GLint   location, GLuint   v0, GLuint   v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3DPROC)(GLint   location, GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3DVPROC)(GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FPROC)(GLint   location, GLfloat   v0, GLfloat   v1, GLfloat   v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IPROC)(GLint   location, GLint   v0, GLint   v1, GLint   v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIPROC)(GLint   location, GLuint   v0, GLuint   v1, GLuint   v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4DPROC)(GLint   location, GLdouble   x, GLdouble   y, GLdouble   z, GLdouble   w);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4DVPROC)(GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FPROC)(GLint   location, GLfloat   v0, GLfloat   v1, GLfloat   v2, GLfloat   v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IPROC)(GLint   location, GLint   v0, GLint   v1, GLint   v2, GLint   v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIPROC)(GLint   location, GLuint   v0, GLuint   v1, GLuint   v2, GLuint   v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint   program, GLuint   uniformBlockIndex, GLuint   uniformBlockBinding);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum   shadertype, GLsizei   count, const  GLuint  * indices);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERPROC)(GLenum   target);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPNAMEDBUFFERPROC)(GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMPROC)(GLuint   program);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMSTAGESPROC)(GLuint   pipeline, GLbitfield   stages, GLuint   program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPROC)(GLuint   program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint   pipeline);
typedef void (GLAD_API_PTR *PFNGLVERTEX2DPROC)(GLdouble   x, GLdouble   y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2FPROC)(GLfloat   x, GLfloat   y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2IPROC)(GLint   x, GLint   y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2SPROC)(GLshort   x, GLshort   y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3DPROC)(GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3FPROC)(GLfloat   x, GLfloat   y, GLfloat   z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3IPROC)(GLint   x, GLint   y, GLint   z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3SPROC)(GLshort   x, GLshort   y, GLshort   z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4DPROC)(GLdouble   x, GLdouble   y, GLdouble   z, GLdouble   w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4FPROC)(GLfloat   x, GLfloat   y, GLfloat   z, GLfloat   w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4IPROC)(GLint   x, GLint   y, GLint   z, GLint   w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4SPROC)(GLshort   x, GLshort   y, GLshort   z, GLshort   w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint   vaobj, GLuint   attribindex, GLuint   bindingindex);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint   vaobj, GLuint   attribindex, GLint   size, GLenum   type, GLboolean   normalized, GLuint   relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint   vaobj, GLuint   attribindex, GLint   size, GLenum   type, GLuint   relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint   vaobj, GLuint   attribindex, GLint   size, GLenum   type, GLuint   relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint   vaobj, GLuint   bindingindex, GLuint   divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint   vaobj, GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint   vaobj, GLuint   bindingindex, GLuint   buffer, GLintptr   offset, GLsizei   stride);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint   vaobj, GLuint   first, GLsizei   count, const  GLuint  * buffers, const  GLintptr  * offsets, const  GLsizei  * strides);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DPROC)(GLuint   index, GLdouble   x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FPROC)(GLuint   index, GLfloat   x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVPROC)(GLuint   index, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SPROC)(GLuint   index, GLshort   x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DPROC)(GLuint   index, GLdouble   x, GLdouble   y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FPROC)(GLuint   index, GLfloat   x, GLfloat   y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVPROC)(GLuint   index, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SPROC)(GLuint   index, GLshort   x, GLshort   y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DPROC)(GLuint   index, GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FPROC)(GLuint   index, GLfloat   x, GLfloat   y, GLfloat   z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVPROC)(GLuint   index, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SPROC)(GLuint   index, GLshort   x, GLshort   y, GLshort   z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVPROC)(GLuint   index, const  GLbyte  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBPROC)(GLuint   index, GLubyte   x, GLubyte   y, GLubyte   z, GLubyte   w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVPROC)(GLuint   index, const  GLubyte  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVPROC)(GLuint   index, const  GLushort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVPROC)(GLuint   index, const  GLbyte  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DPROC)(GLuint   index, GLdouble   x, GLdouble   y, GLdouble   z, GLdouble   w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FPROC)(GLuint   index, GLfloat   x, GLfloat   y, GLfloat   z, GLfloat   w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVPROC)(GLuint   index, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SPROC)(GLuint   index, GLshort   x, GLshort   y, GLshort   z, GLshort   w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVPROC)(GLuint   index, const  GLubyte  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVPROC)(GLuint   index, const  GLushort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBBINDINGPROC)(GLuint   attribindex, GLuint   bindingindex);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORPROC)(GLuint   index, GLuint   divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBFORMATPROC)(GLuint   attribindex, GLint   size, GLenum   type, GLboolean   normalized, GLuint   relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IPROC)(GLuint   index, GLint   x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIPROC)(GLuint   index, GLuint   x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IPROC)(GLuint   index, GLint   x, GLint   y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIPROC)(GLuint   index, GLuint   x, GLuint   y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IPROC)(GLuint   index, GLint   x, GLint   y, GLint   z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIPROC)(GLuint   index, GLuint   x, GLuint   y, GLuint   z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4BVPROC)(GLuint   index, const  GLbyte  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IPROC)(GLuint   index, GLint   x, GLint   y, GLint   z, GLint   w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4SVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UBVPROC)(GLuint   index, const  GLubyte  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIPROC)(GLuint   index, GLuint   x, GLuint   y, GLuint   z, GLuint   w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4USVPROC)(GLuint   index, const  GLushort  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIFORMATPROC)(GLuint   attribindex, GLint   size, GLenum   type, GLuint   relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint   index, GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DPROC)(GLuint   index, GLdouble   x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DPROC)(GLuint   index, GLdouble   x, GLdouble   y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DPROC)(GLuint   index, GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DPROC)(GLuint   index, GLdouble   x, GLdouble   y, GLdouble   z, GLdouble   w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLFORMATPROC)(GLuint   attribindex, GLint   size, GLenum   type, GLuint   relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint   index, GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERPROC)(GLuint   index, GLint   size, GLenum   type, GLboolean   normalized, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXBINDINGDIVISORPROC)(GLuint   bindingindex, GLuint   divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXP2UIPROC)(GLenum   type, GLuint   value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP2UIVPROC)(GLenum   type, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP3UIPROC)(GLenum   type, GLuint   value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP3UIVPROC)(GLenum   type, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP4UIPROC)(GLenum   type, GLuint   value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP4UIVPROC)(GLenum   type, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTERPROC)(GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTARRAYVPROC)(GLuint   first, GLsizei   count, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFPROC)(GLuint   index, GLfloat   x, GLfloat   y, GLfloat   w, GLfloat   h);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFVPROC)(GLuint   index, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLWAITSYNCPROC)(GLsync   sync, GLbitfield   flags, GLuint64   timeout);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DPROC)(GLdouble   x, GLdouble   y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FPROC)(GLfloat   x, GLfloat   y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IPROC)(GLint   x, GLint   y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SPROC)(GLshort   x, GLshort   y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SVPROC)(const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DPROC)(GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DVPROC)(const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FPROC)(GLfloat   x, GLfloat   y, GLfloat   z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FVPROC)(const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IPROC)(GLint   x, GLint   y, GLint   z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IVPROC)(const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SPROC)(GLshort   x, GLshort   y, GLshort   z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SVPROC)(const  GLshort  * v);

GLAD_API_CALL PFNGLACCUMPROC glad_glAccum;
GLAD_API_CALL PFNGLACCUMPROC glad_debug_glAccum;
#define glAccum glad_debug_glAccum
GLAD_API_CALL PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;
GLAD_API_CALL PFNGLACTIVESHADERPROGRAMPROC glad_debug_glActiveShaderProgram;
#define glActiveShaderProgram glad_debug_glActiveShaderProgram
GLAD_API_CALL PFNGLACTIVETEXTUREPROC glad_glActiveTexture;
GLAD_API_CALL PFNGLACTIVETEXTUREPROC glad_debug_glActiveTexture;
#define glActiveTexture glad_debug_glActiveTexture
GLAD_API_CALL PFNGLALPHAFUNCPROC glad_glAlphaFunc;
GLAD_API_CALL PFNGLALPHAFUNCPROC glad_debug_glAlphaFunc;
#define glAlphaFunc glad_debug_glAlphaFunc
GLAD_API_CALL PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident;
GLAD_API_CALL PFNGLARETEXTURESRESIDENTPROC glad_debug_glAreTexturesResident;
#define glAreTexturesResident glad_debug_glAreTexturesResident
GLAD_API_CALL PFNGLARRAYELEMENTPROC glad_glArrayElement;
GLAD_API_CALL PFNGLARRAYELEMENTPROC glad_debug_glArrayElement;
#define glArrayElement glad_debug_glArrayElement
GLAD_API_CALL PFNGLATTACHSHADERPROC glad_glAttachShader;
GLAD_API_CALL PFNGLATTACHSHADERPROC glad_debug_glAttachShader;
#define glAttachShader glad_debug_glAttachShader
GLAD_API_CALL PFNGLBEGINPROC glad_glBegin;
GLAD_API_CALL PFNGLBEGINPROC glad_debug_glBegin;
#define glBegin glad_debug_glBegin
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERPROC glad_debug_glBeginConditionalRender;
#define glBeginConditionalRender glad_debug_glBeginConditionalRender
GLAD_API_CALL PFNGLBEGINQUERYPROC glad_glBeginQuery;
GLAD_API_CALL PFNGLBEGINQUERYPROC glad_debug_glBeginQuery;
#define glBeginQuery glad_debug_glBeginQuery
GLAD_API_CALL PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;
GLAD_API_CALL PFNGLBEGINQUERYINDEXEDPROC glad_debug_glBeginQueryIndexed;
#define glBeginQueryIndexed glad_debug_glBeginQueryIndexed
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKPROC glad_debug_glBeginTransformFeedback;
#define glBeginTransformFeedback glad_debug_glBeginTransformFeedback
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONPROC glad_debug_glBindAttribLocation;
#define glBindAttribLocation glad_debug_glBindAttribLocation
GLAD_API_CALL PFNGLBINDBUFFERPROC glad_glBindBuffer;
GLAD_API_CALL PFNGLBINDBUFFERPROC glad_debug_glBindBuffer;
#define glBindBuffer glad_debug_glBindBuffer
GLAD_API_CALL PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;
GLAD_API_CALL PFNGLBINDBUFFERBASEPROC glad_debug_glBindBufferBase;
#define glBindBufferBase glad_debug_glBindBufferBase
GLAD_API_CALL PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;
GLAD_API_CALL PFNGLBINDBUFFERRANGEPROC glad_debug_glBindBufferRange;
#define glBindBufferRange glad_debug_glBindBufferRange
GLAD_API_CALL PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase;
GLAD_API_CALL PFNGLBINDBUFFERSBASEPROC glad_debug_glBindBuffersBase;
#define glBindBuffersBase glad_debug_glBindBuffersBase
GLAD_API_CALL PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange;
GLAD_API_CALL PFNGLBINDBUFFERSRANGEPROC glad_debug_glBindBuffersRange;
#define glBindBuffersRange glad_debug_glBindBuffersRange
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONPROC glad_debug_glBindFragDataLocation;
#define glBindFragDataLocation glad_debug_glBindFragDataLocation
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_debug_glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed glad_debug_glBindFragDataLocationIndexed
GLAD_API_CALL PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;
GLAD_API_CALL PFNGLBINDFRAMEBUFFERPROC glad_debug_glBindFramebuffer;
#define glBindFramebuffer glad_debug_glBindFramebuffer
GLAD_API_CALL PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture;
GLAD_API_CALL PFNGLBINDIMAGETEXTUREPROC glad_debug_glBindImageTexture;
#define glBindImageTexture glad_debug_glBindImageTexture
GLAD_API_CALL PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures;
GLAD_API_CALL PFNGLBINDIMAGETEXTURESPROC glad_debug_glBindImageTextures;
#define glBindImageTextures glad_debug_glBindImageTextures
GLAD_API_CALL PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;
GLAD_API_CALL PFNGLBINDPROGRAMPIPELINEPROC glad_debug_glBindProgramPipeline;
#define glBindProgramPipeline glad_debug_glBindProgramPipeline
GLAD_API_CALL PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;
GLAD_API_CALL PFNGLBINDRENDERBUFFERPROC glad_debug_glBindRenderbuffer;
#define glBindRenderbuffer glad_debug_glBindRenderbuffer
GLAD_API_CALL PFNGLBINDSAMPLERPROC glad_glBindSampler;
GLAD_API_CALL PFNGLBINDSAMPLERPROC glad_debug_glBindSampler;
#define glBindSampler glad_debug_glBindSampler
GLAD_API_CALL PFNGLBINDSAMPLERSPROC glad_glBindSamplers;
GLAD_API_CALL PFNGLBINDSAMPLERSPROC glad_debug_glBindSamplers;
#define glBindSamplers glad_debug_glBindSamplers
GLAD_API_CALL PFNGLBINDTEXTUREPROC glad_glBindTexture;
GLAD_API_CALL PFNGLBINDTEXTUREPROC glad_debug_glBindTexture;
#define glBindTexture glad_debug_glBindTexture
GLAD_API_CALL PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit;
GLAD_API_CALL PFNGLBINDTEXTUREUNITPROC glad_debug_glBindTextureUnit;
#define glBindTextureUnit glad_debug_glBindTextureUnit
GLAD_API_CALL PFNGLBINDTEXTURESPROC glad_glBindTextures;
GLAD_API_CALL PFNGLBINDTEXTURESPROC glad_debug_glBindTextures;
#define glBindTextures glad_debug_glBindTextures
GLAD_API_CALL PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;
GLAD_API_CALL PFNGLBINDTRANSFORMFEEDBACKPROC glad_debug_glBindTransformFeedback;
#define glBindTransformFeedback glad_debug_glBindTransformFeedback
GLAD_API_CALL PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;
GLAD_API_CALL PFNGLBINDVERTEXARRAYPROC glad_debug_glBindVertexArray;
#define glBindVertexArray glad_debug_glBindVertexArray
GLAD_API_CALL PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer;
GLAD_API_CALL PFNGLBINDVERTEXBUFFERPROC glad_debug_glBindVertexBuffer;
#define glBindVertexBuffer glad_debug_glBindVertexBuffer
GLAD_API_CALL PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers;
GLAD_API_CALL PFNGLBINDVERTEXBUFFERSPROC glad_debug_glBindVertexBuffers;
#define glBindVertexBuffers glad_debug_glBindVertexBuffers
GLAD_API_CALL PFNGLBITMAPPROC glad_glBitmap;
GLAD_API_CALL PFNGLBITMAPPROC glad_debug_glBitmap;
#define glBitmap glad_debug_glBitmap
GLAD_API_CALL PFNGLBLENDCOLORPROC glad_glBlendColor;
GLAD_API_CALL PFNGLBLENDCOLORPROC glad_debug_glBlendColor;
#define glBlendColor glad_debug_glBlendColor
GLAD_API_CALL PFNGLBLENDEQUATIONPROC glad_glBlendEquation;
GLAD_API_CALL PFNGLBLENDEQUATIONPROC glad_debug_glBlendEquation;
#define glBlendEquation glad_debug_glBlendEquation
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEPROC glad_debug_glBlendEquationSeparate;
#define glBlendEquationSeparate glad_debug_glBlendEquationSeparate
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei;
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEIPROC glad_debug_glBlendEquationSeparatei;
#define glBlendEquationSeparatei glad_debug_glBlendEquationSeparatei
GLAD_API_CALL PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi;
GLAD_API_CALL PFNGLBLENDEQUATIONIPROC glad_debug_glBlendEquationi;
#define glBlendEquationi glad_debug_glBlendEquationi
GLAD_API_CALL PFNGLBLENDFUNCPROC glad_glBlendFunc;
GLAD_API_CALL PFNGLBLENDFUNCPROC glad_debug_glBlendFunc;
#define glBlendFunc glad_debug_glBlendFunc
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEPROC glad_debug_glBlendFuncSeparate;
#define glBlendFuncSeparate glad_debug_glBlendFuncSeparate
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei;
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEIPROC glad_debug_glBlendFuncSeparatei;
#define glBlendFuncSeparatei glad_debug_glBlendFuncSeparatei
GLAD_API_CALL PFNGLBLENDFUNCIPROC glad_glBlendFunci;
GLAD_API_CALL PFNGLBLENDFUNCIPROC glad_debug_glBlendFunci;
#define glBlendFunci glad_debug_glBlendFunci
GLAD_API_CALL PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;
GLAD_API_CALL PFNGLBLITFRAMEBUFFERPROC glad_debug_glBlitFramebuffer;
#define glBlitFramebuffer glad_debug_glBlitFramebuffer
GLAD_API_CALL PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer;
GLAD_API_CALL PFNGLBLITNAMEDFRAMEBUFFERPROC glad_debug_glBlitNamedFramebuffer;
#define glBlitNamedFramebuffer glad_debug_glBlitNamedFramebuffer
GLAD_API_CALL PFNGLBUFFERDATAPROC glad_glBufferData;
GLAD_API_CALL PFNGLBUFFERDATAPROC glad_debug_glBufferData;
#define glBufferData glad_debug_glBufferData
GLAD_API_CALL PFNGLBUFFERSTORAGEPROC glad_glBufferStorage;
GLAD_API_CALL PFNGLBUFFERSTORAGEPROC glad_debug_glBufferStorage;
#define glBufferStorage glad_debug_glBufferStorage
GLAD_API_CALL PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;
GLAD_API_CALL PFNGLBUFFERSUBDATAPROC glad_debug_glBufferSubData;
#define glBufferSubData glad_debug_glBufferSubData
GLAD_API_CALL PFNGLCALLLISTPROC glad_glCallList;
GLAD_API_CALL PFNGLCALLLISTPROC glad_debug_glCallList;
#define glCallList glad_debug_glCallList
GLAD_API_CALL PFNGLCALLLISTSPROC glad_glCallLists;
GLAD_API_CALL PFNGLCALLLISTSPROC glad_debug_glCallLists;
#define glCallLists glad_debug_glCallLists
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_debug_glCheckFramebufferStatus;
#define glCheckFramebufferStatus glad_debug_glCheckFramebufferStatus
GLAD_API_CALL PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus;
GLAD_API_CALL PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_debug_glCheckNamedFramebufferStatus;
#define glCheckNamedFramebufferStatus glad_debug_glCheckNamedFramebufferStatus
GLAD_API_CALL PFNGLCLAMPCOLORPROC glad_glClampColor;
GLAD_API_CALL PFNGLCLAMPCOLORPROC glad_debug_glClampColor;
#define glClampColor glad_debug_glClampColor
GLAD_API_CALL PFNGLCLEARPROC glad_glClear;
GLAD_API_CALL PFNGLCLEARPROC glad_debug_glClear;
#define glClear glad_debug_glClear
GLAD_API_CALL PFNGLCLEARACCUMPROC glad_glClearAccum;
GLAD_API_CALL PFNGLCLEARACCUMPROC glad_debug_glClearAccum;
#define glClearAccum glad_debug_glClearAccum
GLAD_API_CALL PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData;
GLAD_API_CALL PFNGLCLEARBUFFERDATAPROC glad_debug_glClearBufferData;
#define glClearBufferData glad_debug_glClearBufferData
GLAD_API_CALL PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData;
GLAD_API_CALL PFNGLCLEARBUFFERSUBDATAPROC glad_debug_glClearBufferSubData;
#define glClearBufferSubData glad_debug_glClearBufferSubData
GLAD_API_CALL PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;
GLAD_API_CALL PFNGLCLEARBUFFERFIPROC glad_debug_glClearBufferfi;
#define glClearBufferfi glad_debug_glClearBufferfi
GLAD_API_CALL PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;
GLAD_API_CALL PFNGLCLEARBUFFERFVPROC glad_debug_glClearBufferfv;
#define glClearBufferfv glad_debug_glClearBufferfv
GLAD_API_CALL PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;
GLAD_API_CALL PFNGLCLEARBUFFERIVPROC glad_debug_glClearBufferiv;
#define glClearBufferiv glad_debug_glClearBufferiv
GLAD_API_CALL PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;
GLAD_API_CALL PFNGLCLEARBUFFERUIVPROC glad_debug_glClearBufferuiv;
#define glClearBufferuiv glad_debug_glClearBufferuiv
GLAD_API_CALL PFNGLCLEARCOLORPROC glad_glClearColor;
GLAD_API_CALL PFNGLCLEARCOLORPROC glad_debug_glClearColor;
#define glClearColor glad_debug_glClearColor
GLAD_API_CALL PFNGLCLEARDEPTHPROC glad_glClearDepth;
GLAD_API_CALL PFNGLCLEARDEPTHPROC glad_debug_glClearDepth;
#define glClearDepth glad_debug_glClearDepth
GLAD_API_CALL PFNGLCLEARDEPTHFPROC glad_glClearDepthf;
GLAD_API_CALL PFNGLCLEARDEPTHFPROC glad_debug_glClearDepthf;
#define glClearDepthf glad_debug_glClearDepthf
GLAD_API_CALL PFNGLCLEARINDEXPROC glad_glClearIndex;
GLAD_API_CALL PFNGLCLEARINDEXPROC glad_debug_glClearIndex;
#define glClearIndex glad_debug_glClearIndex
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData;
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERDATAPROC glad_debug_glClearNamedBufferData;
#define glClearNamedBufferData glad_debug_glClearNamedBufferData
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData;
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_debug_glClearNamedBufferSubData;
#define glClearNamedBufferSubData glad_debug_glClearNamedBufferSubData
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi;
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_debug_glClearNamedFramebufferfi;
#define glClearNamedFramebufferfi glad_debug_glClearNamedFramebufferfi
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv;
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_debug_glClearNamedFramebufferfv;
#define glClearNamedFramebufferfv glad_debug_glClearNamedFramebufferfv
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv;
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_debug_glClearNamedFramebufferiv;
#define glClearNamedFramebufferiv glad_debug_glClearNamedFramebufferiv
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv;
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_debug_glClearNamedFramebufferuiv;
#define glClearNamedFramebufferuiv glad_debug_glClearNamedFramebufferuiv
GLAD_API_CALL PFNGLCLEARSTENCILPROC glad_glClearStencil;
GLAD_API_CALL PFNGLCLEARSTENCILPROC glad_debug_glClearStencil;
#define glClearStencil glad_debug_glClearStencil
GLAD_API_CALL PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage;
GLAD_API_CALL PFNGLCLEARTEXIMAGEPROC glad_debug_glClearTexImage;
#define glClearTexImage glad_debug_glClearTexImage
GLAD_API_CALL PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage;
GLAD_API_CALL PFNGLCLEARTEXSUBIMAGEPROC glad_debug_glClearTexSubImage;
#define glClearTexSubImage glad_debug_glClearTexSubImage
GLAD_API_CALL PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture;
GLAD_API_CALL PFNGLCLIENTACTIVETEXTUREPROC glad_debug_glClientActiveTexture;
#define glClientActiveTexture glad_debug_glClientActiveTexture
GLAD_API_CALL PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;
GLAD_API_CALL PFNGLCLIENTWAITSYNCPROC glad_debug_glClientWaitSync;
#define glClientWaitSync glad_debug_glClientWaitSync
GLAD_API_CALL PFNGLCLIPCONTROLPROC glad_glClipControl;
GLAD_API_CALL PFNGLCLIPCONTROLPROC glad_debug_glClipControl;
#define glClipControl glad_debug_glClipControl
GLAD_API_CALL PFNGLCLIPPLANEPROC glad_glClipPlane;
GLAD_API_CALL PFNGLCLIPPLANEPROC glad_debug_glClipPlane;
#define glClipPlane glad_debug_glClipPlane
GLAD_API_CALL PFNGLCOLOR3BPROC glad_glColor3b;
GLAD_API_CALL PFNGLCOLOR3BPROC glad_debug_glColor3b;
#define glColor3b glad_debug_glColor3b
GLAD_API_CALL PFNGLCOLOR3BVPROC glad_glColor3bv;
GLAD_API_CALL PFNGLCOLOR3BVPROC glad_debug_glColor3bv;
#define glColor3bv glad_debug_glColor3bv
GLAD_API_CALL PFNGLCOLOR3DPROC glad_glColor3d;
GLAD_API_CALL PFNGLCOLOR3DPROC glad_debug_glColor3d;
#define glColor3d glad_debug_glColor3d
GLAD_API_CALL PFNGLCOLOR3DVPROC glad_glColor3dv;
GLAD_API_CALL PFNGLCOLOR3DVPROC glad_debug_glColor3dv;
#define glColor3dv glad_debug_glColor3dv
GLAD_API_CALL PFNGLCOLOR3FPROC glad_glColor3f;
GLAD_API_CALL PFNGLCOLOR3FPROC glad_debug_glColor3f;
#define glColor3f glad_debug_glColor3f
GLAD_API_CALL PFNGLCOLOR3FVPROC glad_glColor3fv;
GLAD_API_CALL PFNGLCOLOR3FVPROC glad_debug_glColor3fv;
#define glColor3fv glad_debug_glColor3fv
GLAD_API_CALL PFNGLCOLOR3IPROC glad_glColor3i;
GLAD_API_CALL PFNGLCOLOR3IPROC glad_debug_glColor3i;
#define glColor3i glad_debug_glColor3i
GLAD_API_CALL PFNGLCOLOR3IVPROC glad_glColor3iv;
GLAD_API_CALL PFNGLCOLOR3IVPROC glad_debug_glColor3iv;
#define glColor3iv glad_debug_glColor3iv
GLAD_API_CALL PFNGLCOLOR3SPROC glad_glColor3s;
GLAD_API_CALL PFNGLCOLOR3SPROC glad_debug_glColor3s;
#define glColor3s glad_debug_glColor3s
GLAD_API_CALL PFNGLCOLOR3SVPROC glad_glColor3sv;
GLAD_API_CALL PFNGLCOLOR3SVPROC glad_debug_glColor3sv;
#define glColor3sv glad_debug_glColor3sv
GLAD_API_CALL PFNGLCOLOR3UBPROC glad_glColor3ub;
GLAD_API_CALL PFNGLCOLOR3UBPROC glad_debug_glColor3ub;
#define glColor3ub glad_debug_glColor3ub
GLAD_API_CALL PFNGLCOLOR3UBVPROC glad_glColor3ubv;
GLAD_API_CALL PFNGLCOLOR3UBVPROC glad_debug_glColor3ubv;
#define glColor3ubv glad_debug_glColor3ubv
GLAD_API_CALL PFNGLCOLOR3UIPROC glad_glColor3ui;
GLAD_API_CALL PFNGLCOLOR3UIPROC glad_debug_glColor3ui;
#define glColor3ui glad_debug_glColor3ui
GLAD_API_CALL PFNGLCOLOR3UIVPROC glad_glColor3uiv;
GLAD_API_CALL PFNGLCOLOR3UIVPROC glad_debug_glColor3uiv;
#define glColor3uiv glad_debug_glColor3uiv
GLAD_API_CALL PFNGLCOLOR3USPROC glad_glColor3us;
GLAD_API_CALL PFNGLCOLOR3USPROC glad_debug_glColor3us;
#define glColor3us glad_debug_glColor3us
GLAD_API_CALL PFNGLCOLOR3USVPROC glad_glColor3usv;
GLAD_API_CALL PFNGLCOLOR3USVPROC glad_debug_glColor3usv;
#define glColor3usv glad_debug_glColor3usv
GLAD_API_CALL PFNGLCOLOR4BPROC glad_glColor4b;
GLAD_API_CALL PFNGLCOLOR4BPROC glad_debug_glColor4b;
#define glColor4b glad_debug_glColor4b
GLAD_API_CALL PFNGLCOLOR4BVPROC glad_glColor4bv;
GLAD_API_CALL PFNGLCOLOR4BVPROC glad_debug_glColor4bv;
#define glColor4bv glad_debug_glColor4bv
GLAD_API_CALL PFNGLCOLOR4DPROC glad_glColor4d;
GLAD_API_CALL PFNGLCOLOR4DPROC glad_debug_glColor4d;
#define glColor4d glad_debug_glColor4d
GLAD_API_CALL PFNGLCOLOR4DVPROC glad_glColor4dv;
GLAD_API_CALL PFNGLCOLOR4DVPROC glad_debug_glColor4dv;
#define glColor4dv glad_debug_glColor4dv
GLAD_API_CALL PFNGLCOLOR4FPROC glad_glColor4f;
GLAD_API_CALL PFNGLCOLOR4FPROC glad_debug_glColor4f;
#define glColor4f glad_debug_glColor4f
GLAD_API_CALL PFNGLCOLOR4FVPROC glad_glColor4fv;
GLAD_API_CALL PFNGLCOLOR4FVPROC glad_debug_glColor4fv;
#define glColor4fv glad_debug_glColor4fv
GLAD_API_CALL PFNGLCOLOR4IPROC glad_glColor4i;
GLAD_API_CALL PFNGLCOLOR4IPROC glad_debug_glColor4i;
#define glColor4i glad_debug_glColor4i
GLAD_API_CALL PFNGLCOLOR4IVPROC glad_glColor4iv;
GLAD_API_CALL PFNGLCOLOR4IVPROC glad_debug_glColor4iv;
#define glColor4iv glad_debug_glColor4iv
GLAD_API_CALL PFNGLCOLOR4SPROC glad_glColor4s;
GLAD_API_CALL PFNGLCOLOR4SPROC glad_debug_glColor4s;
#define glColor4s glad_debug_glColor4s
GLAD_API_CALL PFNGLCOLOR4SVPROC glad_glColor4sv;
GLAD_API_CALL PFNGLCOLOR4SVPROC glad_debug_glColor4sv;
#define glColor4sv glad_debug_glColor4sv
GLAD_API_CALL PFNGLCOLOR4UBPROC glad_glColor4ub;
GLAD_API_CALL PFNGLCOLOR4UBPROC glad_debug_glColor4ub;
#define glColor4ub glad_debug_glColor4ub
GLAD_API_CALL PFNGLCOLOR4UBVPROC glad_glColor4ubv;
GLAD_API_CALL PFNGLCOLOR4UBVPROC glad_debug_glColor4ubv;
#define glColor4ubv glad_debug_glColor4ubv
GLAD_API_CALL PFNGLCOLOR4UIPROC glad_glColor4ui;
GLAD_API_CALL PFNGLCOLOR4UIPROC glad_debug_glColor4ui;
#define glColor4ui glad_debug_glColor4ui
GLAD_API_CALL PFNGLCOLOR4UIVPROC glad_glColor4uiv;
GLAD_API_CALL PFNGLCOLOR4UIVPROC glad_debug_glColor4uiv;
#define glColor4uiv glad_debug_glColor4uiv
GLAD_API_CALL PFNGLCOLOR4USPROC glad_glColor4us;
GLAD_API_CALL PFNGLCOLOR4USPROC glad_debug_glColor4us;
#define glColor4us glad_debug_glColor4us
GLAD_API_CALL PFNGLCOLOR4USVPROC glad_glColor4usv;
GLAD_API_CALL PFNGLCOLOR4USVPROC glad_debug_glColor4usv;
#define glColor4usv glad_debug_glColor4usv
GLAD_API_CALL PFNGLCOLORMASKPROC glad_glColorMask;
GLAD_API_CALL PFNGLCOLORMASKPROC glad_debug_glColorMask;
#define glColorMask glad_debug_glColorMask
GLAD_API_CALL PFNGLCOLORMASKIPROC glad_glColorMaski;
GLAD_API_CALL PFNGLCOLORMASKIPROC glad_debug_glColorMaski;
#define glColorMaski glad_debug_glColorMaski
GLAD_API_CALL PFNGLCOLORMATERIALPROC glad_glColorMaterial;
GLAD_API_CALL PFNGLCOLORMATERIALPROC glad_debug_glColorMaterial;
#define glColorMaterial glad_debug_glColorMaterial
GLAD_API_CALL PFNGLCOLORP3UIPROC glad_glColorP3ui;
GLAD_API_CALL PFNGLCOLORP3UIPROC glad_debug_glColorP3ui;
#define glColorP3ui glad_debug_glColorP3ui
GLAD_API_CALL PFNGLCOLORP3UIVPROC glad_glColorP3uiv;
GLAD_API_CALL PFNGLCOLORP3UIVPROC glad_debug_glColorP3uiv;
#define glColorP3uiv glad_debug_glColorP3uiv
GLAD_API_CALL PFNGLCOLORP4UIPROC glad_glColorP4ui;
GLAD_API_CALL PFNGLCOLORP4UIPROC glad_debug_glColorP4ui;
#define glColorP4ui glad_debug_glColorP4ui
GLAD_API_CALL PFNGLCOLORP4UIVPROC glad_glColorP4uiv;
GLAD_API_CALL PFNGLCOLORP4UIVPROC glad_debug_glColorP4uiv;
#define glColorP4uiv glad_debug_glColorP4uiv
GLAD_API_CALL PFNGLCOLORPOINTERPROC glad_glColorPointer;
GLAD_API_CALL PFNGLCOLORPOINTERPROC glad_debug_glColorPointer;
#define glColorPointer glad_debug_glColorPointer
GLAD_API_CALL PFNGLCOMPILESHADERPROC glad_glCompileShader;
GLAD_API_CALL PFNGLCOMPILESHADERPROC glad_debug_glCompileShader;
#define glCompileShader glad_debug_glCompileShader
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_debug_glCompressedTexImage1D;
#define glCompressedTexImage1D glad_debug_glCompressedTexImage1D
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_debug_glCompressedTexImage2D;
#define glCompressedTexImage2D glad_debug_glCompressedTexImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_debug_glCompressedTexImage3D;
#define glCompressedTexImage3D glad_debug_glCompressedTexImage3D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_debug_glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D glad_debug_glCompressedTexSubImage1D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_debug_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D glad_debug_glCompressedTexSubImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_debug_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D glad_debug_glCompressedTexSubImage3D
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_debug_glCompressedTextureSubImage1D;
#define glCompressedTextureSubImage1D glad_debug_glCompressedTextureSubImage1D
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_debug_glCompressedTextureSubImage2D;
#define glCompressedTextureSubImage2D glad_debug_glCompressedTextureSubImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_debug_glCompressedTextureSubImage3D;
#define glCompressedTextureSubImage3D glad_debug_glCompressedTextureSubImage3D
GLAD_API_CALL PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;
GLAD_API_CALL PFNGLCOPYBUFFERSUBDATAPROC glad_debug_glCopyBufferSubData;
#define glCopyBufferSubData glad_debug_glCopyBufferSubData
GLAD_API_CALL PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData;
GLAD_API_CALL PFNGLCOPYIMAGESUBDATAPROC glad_debug_glCopyImageSubData;
#define glCopyImageSubData glad_debug_glCopyImageSubData
GLAD_API_CALL PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData;
GLAD_API_CALL PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_debug_glCopyNamedBufferSubData;
#define glCopyNamedBufferSubData glad_debug_glCopyNamedBufferSubData
GLAD_API_CALL PFNGLCOPYPIXELSPROC glad_glCopyPixels;
GLAD_API_CALL PFNGLCOPYPIXELSPROC glad_debug_glCopyPixels;
#define glCopyPixels glad_debug_glCopyPixels
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DPROC glad_debug_glCopyTexImage1D;
#define glCopyTexImage1D glad_debug_glCopyTexImage1D
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DPROC glad_debug_glCopyTexImage2D;
#define glCopyTexImage2D glad_debug_glCopyTexImage2D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DPROC glad_debug_glCopyTexSubImage1D;
#define glCopyTexSubImage1D glad_debug_glCopyTexSubImage1D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DPROC glad_debug_glCopyTexSubImage2D;
#define glCopyTexSubImage2D glad_debug_glCopyTexSubImage2D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DPROC glad_debug_glCopyTexSubImage3D;
#define glCopyTexSubImage3D glad_debug_glCopyTexSubImage3D
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D;
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_debug_glCopyTextureSubImage1D;
#define glCopyTextureSubImage1D glad_debug_glCopyTextureSubImage1D
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_glCopyTextureSubImage2D;
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_debug_glCopyTextureSubImage2D;
#define glCopyTextureSubImage2D glad_debug_glCopyTextureSubImage2D
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_glCopyTextureSubImage3D;
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_debug_glCopyTextureSubImage3D;
#define glCopyTextureSubImage3D glad_debug_glCopyTextureSubImage3D
GLAD_API_CALL PFNGLCREATEBUFFERSPROC glad_glCreateBuffers;
GLAD_API_CALL PFNGLCREATEBUFFERSPROC glad_debug_glCreateBuffers;
#define glCreateBuffers glad_debug_glCreateBuffers
GLAD_API_CALL PFNGLCREATEFRAMEBUFFERSPROC glad_glCreateFramebuffers;
GLAD_API_CALL PFNGLCREATEFRAMEBUFFERSPROC glad_debug_glCreateFramebuffers;
#define glCreateFramebuffers glad_debug_glCreateFramebuffers
GLAD_API_CALL PFNGLCREATEPROGRAMPROC glad_glCreateProgram;
GLAD_API_CALL PFNGLCREATEPROGRAMPROC glad_debug_glCreateProgram;
#define glCreateProgram glad_debug_glCreateProgram
GLAD_API_CALL PFNGLCREATEPROGRAMPIPELINESPROC glad_glCreateProgramPipelines;
GLAD_API_CALL PFNGLCREATEPROGRAMPIPELINESPROC glad_debug_glCreateProgramPipelines;
#define glCreateProgramPipelines glad_debug_glCreateProgramPipelines
GLAD_API_CALL PFNGLCREATEQUERIESPROC glad_glCreateQueries;
GLAD_API_CALL PFNGLCREATEQUERIESPROC glad_debug_glCreateQueries;
#define glCreateQueries glad_debug_glCreateQueries
GLAD_API_CALL PFNGLCREATERENDERBUFFERSPROC glad_glCreateRenderbuffers;
GLAD_API_CALL PFNGLCREATERENDERBUFFERSPROC glad_debug_glCreateRenderbuffers;
#define glCreateRenderbuffers glad_debug_glCreateRenderbuffers
GLAD_API_CALL PFNGLCREATESAMPLERSPROC glad_glCreateSamplers;
GLAD_API_CALL PFNGLCREATESAMPLERSPROC glad_debug_glCreateSamplers;
#define glCreateSamplers glad_debug_glCreateSamplers
GLAD_API_CALL PFNGLCREATESHADERPROC glad_glCreateShader;
GLAD_API_CALL PFNGLCREATESHADERPROC glad_debug_glCreateShader;
#define glCreateShader glad_debug_glCreateShader
GLAD_API_CALL PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;
GLAD_API_CALL PFNGLCREATESHADERPROGRAMVPROC glad_debug_glCreateShaderProgramv;
#define glCreateShaderProgramv glad_debug_glCreateShaderProgramv
GLAD_API_CALL PFNGLCREATETEXTURESPROC glad_glCreateTextures;
GLAD_API_CALL PFNGLCREATETEXTURESPROC glad_debug_glCreateTextures;
#define glCreateTextures glad_debug_glCreateTextures
GLAD_API_CALL PFNGLCREATETRANSFORMFEEDBACKSPROC glad_glCreateTransformFeedbacks;
GLAD_API_CALL PFNGLCREATETRANSFORMFEEDBACKSPROC glad_debug_glCreateTransformFeedbacks;
#define glCreateTransformFeedbacks glad_debug_glCreateTransformFeedbacks
GLAD_API_CALL PFNGLCREATEVERTEXARRAYSPROC glad_glCreateVertexArrays;
GLAD_API_CALL PFNGLCREATEVERTEXARRAYSPROC glad_debug_glCreateVertexArrays;
#define glCreateVertexArrays glad_debug_glCreateVertexArrays
GLAD_API_CALL PFNGLCULLFACEPROC glad_glCullFace;
GLAD_API_CALL PFNGLCULLFACEPROC glad_debug_glCullFace;
#define glCullFace glad_debug_glCullFace
GLAD_API_CALL PFNGLDEBUGMESSAGECALLBACKPROC glad_glDebugMessageCallback;
GLAD_API_CALL PFNGLDEBUGMESSAGECALLBACKPROC glad_debug_glDebugMessageCallback;
#define glDebugMessageCallback glad_debug_glDebugMessageCallback
GLAD_API_CALL PFNGLDEBUGMESSAGECONTROLPROC glad_glDebugMessageControl;
GLAD_API_CALL PFNGLDEBUGMESSAGECONTROLPROC glad_debug_glDebugMessageControl;
#define glDebugMessageControl glad_debug_glDebugMessageControl
GLAD_API_CALL PFNGLDEBUGMESSAGEINSERTPROC glad_glDebugMessageInsert;
GLAD_API_CALL PFNGLDEBUGMESSAGEINSERTPROC glad_debug_glDebugMessageInsert;
#define glDebugMessageInsert glad_debug_glDebugMessageInsert
GLAD_API_CALL PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;
GLAD_API_CALL PFNGLDELETEBUFFERSPROC glad_debug_glDeleteBuffers;
#define glDeleteBuffers glad_debug_glDeleteBuffers
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSPROC glad_debug_glDeleteFramebuffers;
#define glDeleteFramebuffers glad_debug_glDeleteFramebuffers
GLAD_API_CALL PFNGLDELETELISTSPROC glad_glDeleteLists;
GLAD_API_CALL PFNGLDELETELISTSPROC glad_debug_glDeleteLists;
#define glDeleteLists glad_debug_glDeleteLists
GLAD_API_CALL PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;
GLAD_API_CALL PFNGLDELETEPROGRAMPROC glad_debug_glDeleteProgram;
#define glDeleteProgram glad_debug_glDeleteProgram
GLAD_API_CALL PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;
GLAD_API_CALL PFNGLDELETEPROGRAMPIPELINESPROC glad_debug_glDeleteProgramPipelines;
#define glDeleteProgramPipelines glad_debug_glDeleteProgramPipelines
GLAD_API_CALL PFNGLDELETEQUERIESPROC glad_glDeleteQueries;
GLAD_API_CALL PFNGLDELETEQUERIESPROC glad_debug_glDeleteQueries;
#define glDeleteQueries glad_debug_glDeleteQueries
GLAD_API_CALL PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;
GLAD_API_CALL PFNGLDELETERENDERBUFFERSPROC glad_debug_glDeleteRenderbuffers;
#define glDeleteRenderbuffers glad_debug_glDeleteRenderbuffers
GLAD_API_CALL PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;
GLAD_API_CALL PFNGLDELETESAMPLERSPROC glad_debug_glDeleteSamplers;
#define glDeleteSamplers glad_debug_glDeleteSamplers
GLAD_API_CALL PFNGLDELETESHADERPROC glad_glDeleteShader;
GLAD_API_CALL PFNGLDELETESHADERPROC glad_debug_glDeleteShader;
#define glDeleteShader glad_debug_glDeleteShader
GLAD_API_CALL PFNGLDELETESYNCPROC glad_glDeleteSync;
GLAD_API_CALL PFNGLDELETESYNCPROC glad_debug_glDeleteSync;
#define glDeleteSync glad_debug_glDeleteSync
GLAD_API_CALL PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
GLAD_API_CALL PFNGLDELETETEXTURESPROC glad_debug_glDeleteTextures;
#define glDeleteTextures glad_debug_glDeleteTextures
GLAD_API_CALL PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;
GLAD_API_CALL PFNGLDELETETRANSFORMFEEDBACKSPROC glad_debug_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks glad_debug_glDeleteTransformFeedbacks
GLAD_API_CALL PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;
GLAD_API_CALL PFNGLDELETEVERTEXARRAYSPROC glad_debug_glDeleteVertexArrays;
#define glDeleteVertexArrays glad_debug_glDeleteVertexArrays
GLAD_API_CALL PFNGLDEPTHFUNCPROC glad_glDepthFunc;
GLAD_API_CALL PFNGLDEPTHFUNCPROC glad_debug_glDepthFunc;
#define glDepthFunc glad_debug_glDepthFunc
GLAD_API_CALL PFNGLDEPTHMASKPROC glad_glDepthMask;
GLAD_API_CALL PFNGLDEPTHMASKPROC glad_debug_glDepthMask;
#define glDepthMask glad_debug_glDepthMask
GLAD_API_CALL PFNGLDEPTHRANGEPROC glad_glDepthRange;
GLAD_API_CALL PFNGLDEPTHRANGEPROC glad_debug_glDepthRange;
#define glDepthRange glad_debug_glDepthRange
GLAD_API_CALL PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;
GLAD_API_CALL PFNGLDEPTHRANGEARRAYVPROC glad_debug_glDepthRangeArrayv;
#define glDepthRangeArrayv glad_debug_glDepthRangeArrayv
GLAD_API_CALL PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;
GLAD_API_CALL PFNGLDEPTHRANGEINDEXEDPROC glad_debug_glDepthRangeIndexed;
#define glDepthRangeIndexed glad_debug_glDepthRangeIndexed
GLAD_API_CALL PFNGLDEPTHRANGEFPROC glad_glDepthRangef;
GLAD_API_CALL PFNGLDEPTHRANGEFPROC glad_debug_glDepthRangef;
#define glDepthRangef glad_debug_glDepthRangef
GLAD_API_CALL PFNGLDETACHSHADERPROC glad_glDetachShader;
GLAD_API_CALL PFNGLDETACHSHADERPROC glad_debug_glDetachShader;
#define glDetachShader glad_debug_glDetachShader
GLAD_API_CALL PFNGLDISABLEPROC glad_glDisable;
GLAD_API_CALL PFNGLDISABLEPROC glad_debug_glDisable;
#define glDisable glad_debug_glDisable
GLAD_API_CALL PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState;
GLAD_API_CALL PFNGLDISABLECLIENTSTATEPROC glad_debug_glDisableClientState;
#define glDisableClientState glad_debug_glDisableClientState
GLAD_API_CALL PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_glDisableVertexArrayAttrib;
GLAD_API_CALL PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_debug_glDisableVertexArrayAttrib;
#define glDisableVertexArrayAttrib glad_debug_glDisableVertexArrayAttrib
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_debug_glDisableVertexAttribArray;
#define glDisableVertexAttribArray glad_debug_glDisableVertexAttribArray
GLAD_API_CALL PFNGLDISABLEIPROC glad_glDisablei;
GLAD_API_CALL PFNGLDISABLEIPROC glad_debug_glDisablei;
#define glDisablei glad_debug_glDisablei
GLAD_API_CALL PFNGLDISPATCHCOMPUTEPROC glad_glDispatchCompute;
GLAD_API_CALL PFNGLDISPATCHCOMPUTEPROC glad_debug_glDispatchCompute;
#define glDispatchCompute glad_debug_glDispatchCompute
GLAD_API_CALL PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_glDispatchComputeIndirect;
GLAD_API_CALL PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_debug_glDispatchComputeIndirect;
#define glDispatchComputeIndirect glad_debug_glDispatchComputeIndirect
GLAD_API_CALL PFNGLDRAWARRAYSPROC glad_glDrawArrays;
GLAD_API_CALL PFNGLDRAWARRAYSPROC glad_debug_glDrawArrays;
#define glDrawArrays glad_debug_glDrawArrays
GLAD_API_CALL PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;
GLAD_API_CALL PFNGLDRAWARRAYSINDIRECTPROC glad_debug_glDrawArraysIndirect;
#define glDrawArraysIndirect glad_debug_glDrawArraysIndirect
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDPROC glad_debug_glDrawArraysInstanced;
#define glDrawArraysInstanced glad_debug_glDrawArraysInstanced
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_glDrawArraysInstancedBaseInstance;
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_debug_glDrawArraysInstancedBaseInstance;
#define glDrawArraysInstancedBaseInstance glad_debug_glDrawArraysInstancedBaseInstance
GLAD_API_CALL PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
GLAD_API_CALL PFNGLDRAWBUFFERPROC glad_debug_glDrawBuffer;
#define glDrawBuffer glad_debug_glDrawBuffer
GLAD_API_CALL PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;
GLAD_API_CALL PFNGLDRAWBUFFERSPROC glad_debug_glDrawBuffers;
#define glDrawBuffers glad_debug_glDrawBuffers
GLAD_API_CALL PFNGLDRAWELEMENTSPROC glad_glDrawElements;
GLAD_API_CALL PFNGLDRAWELEMENTSPROC glad_debug_glDrawElements;
#define glDrawElements glad_debug_glDrawElements
GLAD_API_CALL PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;
GLAD_API_CALL PFNGLDRAWELEMENTSBASEVERTEXPROC glad_debug_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex glad_debug_glDrawElementsBaseVertex
GLAD_API_CALL PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;
GLAD_API_CALL PFNGLDRAWELEMENTSINDIRECTPROC glad_debug_glDrawElementsIndirect;
#define glDrawElementsIndirect glad_debug_glDrawElementsIndirect
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDPROC glad_debug_glDrawElementsInstanced;
#define glDrawElementsInstanced glad_debug_glDrawElementsInstanced
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_glDrawElementsInstancedBaseInstance;
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_debug_glDrawElementsInstancedBaseInstance;
#define glDrawElementsInstancedBaseInstance glad_debug_glDrawElementsInstancedBaseInstance
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_debug_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex glad_debug_glDrawElementsInstancedBaseVertex
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_glDrawElementsInstancedBaseVertexBaseInstance;
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_debug_glDrawElementsInstancedBaseVertexBaseInstance;
#define glDrawElementsInstancedBaseVertexBaseInstance glad_debug_glDrawElementsInstancedBaseVertexBaseInstance
GLAD_API_CALL PFNGLDRAWPIXELSPROC glad_glDrawPixels;
GLAD_API_CALL PFNGLDRAWPIXELSPROC glad_debug_glDrawPixels;
#define glDrawPixels glad_debug_glDrawPixels
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSPROC glad_debug_glDrawRangeElements;
#define glDrawRangeElements glad_debug_glDrawRangeElements
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_debug_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex glad_debug_glDrawRangeElementsBaseVertex
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKPROC glad_debug_glDrawTransformFeedback;
#define glDrawTransformFeedback glad_debug_glDrawTransformFeedback
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_glDrawTransformFeedbackInstanced;
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_debug_glDrawTransformFeedbackInstanced;
#define glDrawTransformFeedbackInstanced glad_debug_glDrawTransformFeedbackInstanced
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_debug_glDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream glad_debug_glDrawTransformFeedbackStream
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_glDrawTransformFeedbackStreamInstanced;
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_debug_glDrawTransformFeedbackStreamInstanced;
#define glDrawTransformFeedbackStreamInstanced glad_debug_glDrawTransformFeedbackStreamInstanced
GLAD_API_CALL PFNGLEDGEFLAGPROC glad_glEdgeFlag;
GLAD_API_CALL PFNGLEDGEFLAGPROC glad_debug_glEdgeFlag;
#define glEdgeFlag glad_debug_glEdgeFlag
GLAD_API_CALL PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer;
GLAD_API_CALL PFNGLEDGEFLAGPOINTERPROC glad_debug_glEdgeFlagPointer;
#define glEdgeFlagPointer glad_debug_glEdgeFlagPointer
GLAD_API_CALL PFNGLEDGEFLAGVPROC glad_glEdgeFlagv;
GLAD_API_CALL PFNGLEDGEFLAGVPROC glad_debug_glEdgeFlagv;
#define glEdgeFlagv glad_debug_glEdgeFlagv
GLAD_API_CALL PFNGLENABLEPROC glad_glEnable;
GLAD_API_CALL PFNGLENABLEPROC glad_debug_glEnable;
#define glEnable glad_debug_glEnable
GLAD_API_CALL PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState;
GLAD_API_CALL PFNGLENABLECLIENTSTATEPROC glad_debug_glEnableClientState;
#define glEnableClientState glad_debug_glEnableClientState
GLAD_API_CALL PFNGLENABLEVERTEXARRAYATTRIBPROC glad_glEnableVertexArrayAttrib;
GLAD_API_CALL PFNGLENABLEVERTEXARRAYATTRIBPROC glad_debug_glEnableVertexArrayAttrib;
#define glEnableVertexArrayAttrib glad_debug_glEnableVertexArrayAttrib
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYPROC glad_debug_glEnableVertexAttribArray;
#define glEnableVertexAttribArray glad_debug_glEnableVertexAttribArray
GLAD_API_CALL PFNGLENABLEIPROC glad_glEnablei;
GLAD_API_CALL PFNGLENABLEIPROC glad_debug_glEnablei;
#define glEnablei glad_debug_glEnablei
GLAD_API_CALL PFNGLENDPROC glad_glEnd;
GLAD_API_CALL PFNGLENDPROC glad_debug_glEnd;
#define glEnd glad_debug_glEnd
GLAD_API_CALL PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;
GLAD_API_CALL PFNGLENDCONDITIONALRENDERPROC glad_debug_glEndConditionalRender;
#define glEndConditionalRender glad_debug_glEndConditionalRender
GLAD_API_CALL PFNGLENDLISTPROC glad_glEndList;
GLAD_API_CALL PFNGLENDLISTPROC glad_debug_glEndList;
#define glEndList glad_debug_glEndList
GLAD_API_CALL PFNGLENDQUERYPROC glad_glEndQuery;
GLAD_API_CALL PFNGLENDQUERYPROC glad_debug_glEndQuery;
#define glEndQuery glad_debug_glEndQuery
GLAD_API_CALL PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;
GLAD_API_CALL PFNGLENDQUERYINDEXEDPROC glad_debug_glEndQueryIndexed;
#define glEndQueryIndexed glad_debug_glEndQueryIndexed
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKPROC glad_debug_glEndTransformFeedback;
#define glEndTransformFeedback glad_debug_glEndTransformFeedback
GLAD_API_CALL PFNGLEVALCOORD1DPROC glad_glEvalCoord1d;
GLAD_API_CALL PFNGLEVALCOORD1DPROC glad_debug_glEvalCoord1d;
#define glEvalCoord1d glad_debug_glEvalCoord1d
GLAD_API_CALL PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv;
GLAD_API_CALL PFNGLEVALCOORD1DVPROC glad_debug_glEvalCoord1dv;
#define glEvalCoord1dv glad_debug_glEvalCoord1dv
GLAD_API_CALL PFNGLEVALCOORD1FPROC glad_glEvalCoord1f;
GLAD_API_CALL PFNGLEVALCOORD1FPROC glad_debug_glEvalCoord1f;
#define glEvalCoord1f glad_debug_glEvalCoord1f
GLAD_API_CALL PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv;
GLAD_API_CALL PFNGLEVALCOORD1FVPROC glad_debug_glEvalCoord1fv;
#define glEvalCoord1fv glad_debug_glEvalCoord1fv
GLAD_API_CALL PFNGLEVALCOORD2DPROC glad_glEvalCoord2d;
GLAD_API_CALL PFNGLEVALCOORD2DPROC glad_debug_glEvalCoord2d;
#define glEvalCoord2d glad_debug_glEvalCoord2d
GLAD_API_CALL PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv;
GLAD_API_CALL PFNGLEVALCOORD2DVPROC glad_debug_glEvalCoord2dv;
#define glEvalCoord2dv glad_debug_glEvalCoord2dv
GLAD_API_CALL PFNGLEVALCOORD2FPROC glad_glEvalCoord2f;
GLAD_API_CALL PFNGLEVALCOORD2FPROC glad_debug_glEvalCoord2f;
#define glEvalCoord2f glad_debug_glEvalCoord2f
GLAD_API_CALL PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv;
GLAD_API_CALL PFNGLEVALCOORD2FVPROC glad_debug_glEvalCoord2fv;
#define glEvalCoord2fv glad_debug_glEvalCoord2fv
GLAD_API_CALL PFNGLEVALMESH1PROC glad_glEvalMesh1;
GLAD_API_CALL PFNGLEVALMESH1PROC glad_debug_glEvalMesh1;
#define glEvalMesh1 glad_debug_glEvalMesh1
GLAD_API_CALL PFNGLEVALMESH2PROC glad_glEvalMesh2;
GLAD_API_CALL PFNGLEVALMESH2PROC glad_debug_glEvalMesh2;
#define glEvalMesh2 glad_debug_glEvalMesh2
GLAD_API_CALL PFNGLEVALPOINT1PROC glad_glEvalPoint1;
GLAD_API_CALL PFNGLEVALPOINT1PROC glad_debug_glEvalPoint1;
#define glEvalPoint1 glad_debug_glEvalPoint1
GLAD_API_CALL PFNGLEVALPOINT2PROC glad_glEvalPoint2;
GLAD_API_CALL PFNGLEVALPOINT2PROC glad_debug_glEvalPoint2;
#define glEvalPoint2 glad_debug_glEvalPoint2
GLAD_API_CALL PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer;
GLAD_API_CALL PFNGLFEEDBACKBUFFERPROC glad_debug_glFeedbackBuffer;
#define glFeedbackBuffer glad_debug_glFeedbackBuffer
GLAD_API_CALL PFNGLFENCESYNCPROC glad_glFenceSync;
GLAD_API_CALL PFNGLFENCESYNCPROC glad_debug_glFenceSync;
#define glFenceSync glad_debug_glFenceSync
GLAD_API_CALL PFNGLFINISHPROC glad_glFinish;
GLAD_API_CALL PFNGLFINISHPROC glad_debug_glFinish;
#define glFinish glad_debug_glFinish
GLAD_API_CALL PFNGLFLUSHPROC glad_glFlush;
GLAD_API_CALL PFNGLFLUSHPROC glad_debug_glFlush;
#define glFlush glad_debug_glFlush
GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;
GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_debug_glFlushMappedBufferRange;
#define glFlushMappedBufferRange glad_debug_glFlushMappedBufferRange
GLAD_API_CALL PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_glFlushMappedNamedBufferRange;
GLAD_API_CALL PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_debug_glFlushMappedNamedBufferRange;
#define glFlushMappedNamedBufferRange glad_debug_glFlushMappedNamedBufferRange
GLAD_API_CALL PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer;
GLAD_API_CALL PFNGLFOGCOORDPOINTERPROC glad_debug_glFogCoordPointer;
#define glFogCoordPointer glad_debug_glFogCoordPointer
GLAD_API_CALL PFNGLFOGCOORDDPROC glad_glFogCoordd;
GLAD_API_CALL PFNGLFOGCOORDDPROC glad_debug_glFogCoordd;
#define glFogCoordd glad_debug_glFogCoordd
GLAD_API_CALL PFNGLFOGCOORDDVPROC glad_glFogCoorddv;
GLAD_API_CALL PFNGLFOGCOORDDVPROC glad_debug_glFogCoorddv;
#define glFogCoorddv glad_debug_glFogCoorddv
GLAD_API_CALL PFNGLFOGCOORDFPROC glad_glFogCoordf;
GLAD_API_CALL PFNGLFOGCOORDFPROC glad_debug_glFogCoordf;
#define glFogCoordf glad_debug_glFogCoordf
GLAD_API_CALL PFNGLFOGCOORDFVPROC glad_glFogCoordfv;
GLAD_API_CALL PFNGLFOGCOORDFVPROC glad_debug_glFogCoordfv;
#define glFogCoordfv glad_debug_glFogCoordfv
GLAD_API_CALL PFNGLFOGFPROC glad_glFogf;
GLAD_API_CALL PFNGLFOGFPROC glad_debug_glFogf;
#define glFogf glad_debug_glFogf
GLAD_API_CALL PFNGLFOGFVPROC glad_glFogfv;
GLAD_API_CALL PFNGLFOGFVPROC glad_debug_glFogfv;
#define glFogfv glad_debug_glFogfv
GLAD_API_CALL PFNGLFOGIPROC glad_glFogi;
GLAD_API_CALL PFNGLFOGIPROC glad_debug_glFogi;
#define glFogi glad_debug_glFogi
GLAD_API_CALL PFNGLFOGIVPROC glad_glFogiv;
GLAD_API_CALL PFNGLFOGIVPROC glad_debug_glFogiv;
#define glFogiv glad_debug_glFogiv
GLAD_API_CALL PFNGLFRAMEBUFFERPARAMETERIPROC glad_glFramebufferParameteri;
GLAD_API_CALL PFNGLFRAMEBUFFERPARAMETERIPROC glad_debug_glFramebufferParameteri;
#define glFramebufferParameteri glad_debug_glFramebufferParameteri
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_debug_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer glad_debug_glFramebufferRenderbuffer
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREPROC glad_debug_glFramebufferTexture;
#define glFramebufferTexture glad_debug_glFramebufferTexture
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DPROC glad_debug_glFramebufferTexture1D;
#define glFramebufferTexture1D glad_debug_glFramebufferTexture1D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DPROC glad_debug_glFramebufferTexture2D;
#define glFramebufferTexture2D glad_debug_glFramebufferTexture2D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DPROC glad_debug_glFramebufferTexture3D;
#define glFramebufferTexture3D glad_debug_glFramebufferTexture3D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_debug_glFramebufferTextureLayer;
#define glFramebufferTextureLayer glad_debug_glFramebufferTextureLayer
GLAD_API_CALL PFNGLFRONTFACEPROC glad_glFrontFace;
GLAD_API_CALL PFNGLFRONTFACEPROC glad_debug_glFrontFace;
#define glFrontFace glad_debug_glFrontFace
GLAD_API_CALL PFNGLFRUSTUMPROC glad_glFrustum;
GLAD_API_CALL PFNGLFRUSTUMPROC glad_debug_glFrustum;
#define glFrustum glad_debug_glFrustum
GLAD_API_CALL PFNGLGENBUFFERSPROC glad_glGenBuffers;
GLAD_API_CALL PFNGLGENBUFFERSPROC glad_debug_glGenBuffers;
#define glGenBuffers glad_debug_glGenBuffers
GLAD_API_CALL PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;
GLAD_API_CALL PFNGLGENFRAMEBUFFERSPROC glad_debug_glGenFramebuffers;
#define glGenFramebuffers glad_debug_glGenFramebuffers
GLAD_API_CALL PFNGLGENLISTSPROC glad_glGenLists;
GLAD_API_CALL PFNGLGENLISTSPROC glad_debug_glGenLists;
#define glGenLists glad_debug_glGenLists
GLAD_API_CALL PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;
GLAD_API_CALL PFNGLGENPROGRAMPIPELINESPROC glad_debug_glGenProgramPipelines;
#define glGenProgramPipelines glad_debug_glGenProgramPipelines
GLAD_API_CALL PFNGLGENQUERIESPROC glad_glGenQueries;
GLAD_API_CALL PFNGLGENQUERIESPROC glad_debug_glGenQueries;
#define glGenQueries glad_debug_glGenQueries
GLAD_API_CALL PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;
GLAD_API_CALL PFNGLGENRENDERBUFFERSPROC glad_debug_glGenRenderbuffers;
#define glGenRenderbuffers glad_debug_glGenRenderbuffers
GLAD_API_CALL PFNGLGENSAMPLERSPROC glad_glGenSamplers;
GLAD_API_CALL PFNGLGENSAMPLERSPROC glad_debug_glGenSamplers;
#define glGenSamplers glad_debug_glGenSamplers
GLAD_API_CALL PFNGLGENTEXTURESPROC glad_glGenTextures;
GLAD_API_CALL PFNGLGENTEXTURESPROC glad_debug_glGenTextures;
#define glGenTextures glad_debug_glGenTextures
GLAD_API_CALL PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;
GLAD_API_CALL PFNGLGENTRANSFORMFEEDBACKSPROC glad_debug_glGenTransformFeedbacks;
#define glGenTransformFeedbacks glad_debug_glGenTransformFeedbacks
GLAD_API_CALL PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;
GLAD_API_CALL PFNGLGENVERTEXARRAYSPROC glad_debug_glGenVertexArrays;
#define glGenVertexArrays glad_debug_glGenVertexArrays
GLAD_API_CALL PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;
GLAD_API_CALL PFNGLGENERATEMIPMAPPROC glad_debug_glGenerateMipmap;
#define glGenerateMipmap glad_debug_glGenerateMipmap
GLAD_API_CALL PFNGLGENERATETEXTUREMIPMAPPROC glad_glGenerateTextureMipmap;
GLAD_API_CALL PFNGLGENERATETEXTUREMIPMAPPROC glad_debug_glGenerateTextureMipmap;
#define glGenerateTextureMipmap glad_debug_glGenerateTextureMipmap
GLAD_API_CALL PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_glGetActiveAtomicCounterBufferiv;
GLAD_API_CALL PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_debug_glGetActiveAtomicCounterBufferiv;
#define glGetActiveAtomicCounterBufferiv glad_debug_glGetActiveAtomicCounterBufferiv
GLAD_API_CALL PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;
GLAD_API_CALL PFNGLGETACTIVEATTRIBPROC glad_debug_glGetActiveAttrib;
#define glGetActiveAttrib glad_debug_glGetActiveAttrib
GLAD_API_CALL PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;
GLAD_API_CALL PFNGLGETACTIVESUBROUTINENAMEPROC glad_debug_glGetActiveSubroutineName;
#define glGetActiveSubroutineName glad_debug_glGetActiveSubroutineName
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_debug_glGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName glad_debug_glGetActiveSubroutineUniformName
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_debug_glGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv glad_debug_glGetActiveSubroutineUniformiv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;
GLAD_API_CALL PFNGLGETACTIVEUNIFORMPROC glad_debug_glGetActiveUniform;
#define glGetActiveUniform glad_debug_glGetActiveUniform
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_debug_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName glad_debug_glGetActiveUniformBlockName
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_debug_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv glad_debug_glGetActiveUniformBlockiv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;
GLAD_API_CALL PFNGLGETACTIVEUNIFORMNAMEPROC glad_debug_glGetActiveUniformName;
#define glGetActiveUniformName glad_debug_glGetActiveUniformName
GLAD_API_CALL PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;
GLAD_API_CALL PFNGLGETACTIVEUNIFORMSIVPROC glad_debug_glGetActiveUniformsiv;
#define glGetActiveUniformsiv glad_debug_glGetActiveUniformsiv
GLAD_API_CALL PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;
GLAD_API_CALL PFNGLGETATTACHEDSHADERSPROC glad_debug_glGetAttachedShaders;
#define glGetAttachedShaders glad_debug_glGetAttachedShaders
GLAD_API_CALL PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;
GLAD_API_CALL PFNGLGETATTRIBLOCATIONPROC glad_debug_glGetAttribLocation;
#define glGetAttribLocation glad_debug_glGetAttribLocation
GLAD_API_CALL PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;
GLAD_API_CALL PFNGLGETBOOLEANI_VPROC glad_debug_glGetBooleani_v;
#define glGetBooleani_v glad_debug_glGetBooleani_v
GLAD_API_CALL PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
GLAD_API_CALL PFNGLGETBOOLEANVPROC glad_debug_glGetBooleanv;
#define glGetBooleanv glad_debug_glGetBooleanv
GLAD_API_CALL PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;
GLAD_API_CALL PFNGLGETBUFFERPARAMETERI64VPROC glad_debug_glGetBufferParameteri64v;
#define glGetBufferParameteri64v glad_debug_glGetBufferParameteri64v
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVPROC glad_debug_glGetBufferParameteriv;
#define glGetBufferParameteriv glad_debug_glGetBufferParameteriv
GLAD_API_CALL PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;
GLAD_API_CALL PFNGLGETBUFFERPOINTERVPROC glad_debug_glGetBufferPointerv;
#define glGetBufferPointerv glad_debug_glGetBufferPointerv
GLAD_API_CALL PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;
GLAD_API_CALL PFNGLGETBUFFERSUBDATAPROC glad_debug_glGetBufferSubData;
#define glGetBufferSubData glad_debug_glGetBufferSubData
GLAD_API_CALL PFNGLGETCLIPPLANEPROC glad_glGetClipPlane;
GLAD_API_CALL PFNGLGETCLIPPLANEPROC glad_debug_glGetClipPlane;
#define glGetClipPlane glad_debug_glGetClipPlane
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_debug_glGetCompressedTexImage;
#define glGetCompressedTexImage glad_debug_glGetCompressedTexImage
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_glGetCompressedTextureImage;
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_debug_glGetCompressedTextureImage;
#define glGetCompressedTextureImage glad_debug_glGetCompressedTextureImage
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_glGetCompressedTextureSubImage;
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_debug_glGetCompressedTextureSubImage;
#define glGetCompressedTextureSubImage glad_debug_glGetCompressedTextureSubImage
GLAD_API_CALL PFNGLGETDEBUGMESSAGELOGPROC glad_glGetDebugMessageLog;
GLAD_API_CALL PFNGLGETDEBUGMESSAGELOGPROC glad_debug_glGetDebugMessageLog;
#define glGetDebugMessageLog glad_debug_glGetDebugMessageLog
GLAD_API_CALL PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;
GLAD_API_CALL PFNGLGETDOUBLEI_VPROC glad_debug_glGetDoublei_v;
#define glGetDoublei_v glad_debug_glGetDoublei_v
GLAD_API_CALL PFNGLGETDOUBLEVPROC glad_glGetDoublev;
GLAD_API_CALL PFNGLGETDOUBLEVPROC glad_debug_glGetDoublev;
#define glGetDoublev glad_debug_glGetDoublev
GLAD_API_CALL PFNGLGETERRORPROC glad_glGetError;
GLAD_API_CALL PFNGLGETERRORPROC glad_debug_glGetError;
#define glGetError glad_debug_glGetError
GLAD_API_CALL PFNGLGETFLOATI_VPROC glad_glGetFloati_v;
GLAD_API_CALL PFNGLGETFLOATI_VPROC glad_debug_glGetFloati_v;
#define glGetFloati_v glad_debug_glGetFloati_v
GLAD_API_CALL PFNGLGETFLOATVPROC glad_glGetFloatv;
GLAD_API_CALL PFNGLGETFLOATVPROC glad_debug_glGetFloatv;
#define glGetFloatv glad_debug_glGetFloatv
GLAD_API_CALL PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;
GLAD_API_CALL PFNGLGETFRAGDATAINDEXPROC glad_debug_glGetFragDataIndex;
#define glGetFragDataIndex glad_debug_glGetFragDataIndex
GLAD_API_CALL PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;
GLAD_API_CALL PFNGLGETFRAGDATALOCATIONPROC glad_debug_glGetFragDataLocation;
#define glGetFragDataLocation glad_debug_glGetFragDataLocation
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_debug_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv glad_debug_glGetFramebufferAttachmentParameteriv
GLAD_API_CALL PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_glGetFramebufferParameteriv;
GLAD_API_CALL PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_debug_glGetFramebufferParameteriv;
#define glGetFramebufferParameteriv glad_debug_glGetFramebufferParameteriv
GLAD_API_CALL PFNGLGETGRAPHICSRESETSTATUSPROC glad_glGetGraphicsResetStatus;
GLAD_API_CALL PFNGLGETGRAPHICSRESETSTATUSPROC glad_debug_glGetGraphicsResetStatus;
#define glGetGraphicsResetStatus glad_debug_glGetGraphicsResetStatus
GLAD_API_CALL PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;
GLAD_API_CALL PFNGLGETINTEGER64I_VPROC glad_debug_glGetInteger64i_v;
#define glGetInteger64i_v glad_debug_glGetInteger64i_v
GLAD_API_CALL PFNGLGETINTEGER64VPROC glad_glGetInteger64v;
GLAD_API_CALL PFNGLGETINTEGER64VPROC glad_debug_glGetInteger64v;
#define glGetInteger64v glad_debug_glGetInteger64v
GLAD_API_CALL PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;
GLAD_API_CALL PFNGLGETINTEGERI_VPROC glad_debug_glGetIntegeri_v;
#define glGetIntegeri_v glad_debug_glGetIntegeri_v
GLAD_API_CALL PFNGLGETINTEGERVPROC glad_glGetIntegerv;
GLAD_API_CALL PFNGLGETINTEGERVPROC glad_debug_glGetIntegerv;
#define glGetIntegerv glad_debug_glGetIntegerv
GLAD_API_CALL PFNGLGETINTERNALFORMATI64VPROC glad_glGetInternalformati64v;
GLAD_API_CALL PFNGLGETINTERNALFORMATI64VPROC glad_debug_glGetInternalformati64v;
#define glGetInternalformati64v glad_debug_glGetInternalformati64v
GLAD_API_CALL PFNGLGETINTERNALFORMATIVPROC glad_glGetInternalformativ;
GLAD_API_CALL PFNGLGETINTERNALFORMATIVPROC glad_debug_glGetInternalformativ;
#define glGetInternalformativ glad_debug_glGetInternalformativ
GLAD_API_CALL PFNGLGETLIGHTFVPROC glad_glGetLightfv;
GLAD_API_CALL PFNGLGETLIGHTFVPROC glad_debug_glGetLightfv;
#define glGetLightfv glad_debug_glGetLightfv
GLAD_API_CALL PFNGLGETLIGHTIVPROC glad_glGetLightiv;
GLAD_API_CALL PFNGLGETLIGHTIVPROC glad_debug_glGetLightiv;
#define glGetLightiv glad_debug_glGetLightiv
GLAD_API_CALL PFNGLGETMAPDVPROC glad_glGetMapdv;
GLAD_API_CALL PFNGLGETMAPDVPROC glad_debug_glGetMapdv;
#define glGetMapdv glad_debug_glGetMapdv
GLAD_API_CALL PFNGLGETMAPFVPROC glad_glGetMapfv;
GLAD_API_CALL PFNGLGETMAPFVPROC glad_debug_glGetMapfv;
#define glGetMapfv glad_debug_glGetMapfv
GLAD_API_CALL PFNGLGETMAPIVPROC glad_glGetMapiv;
GLAD_API_CALL PFNGLGETMAPIVPROC glad_debug_glGetMapiv;
#define glGetMapiv glad_debug_glGetMapiv
GLAD_API_CALL PFNGLGETMATERIALFVPROC glad_glGetMaterialfv;
GLAD_API_CALL PFNGLGETMATERIALFVPROC glad_debug_glGetMaterialfv;
#define glGetMaterialfv glad_debug_glGetMaterialfv
GLAD_API_CALL PFNGLGETMATERIALIVPROC glad_glGetMaterialiv;
GLAD_API_CALL PFNGLGETMATERIALIVPROC glad_debug_glGetMaterialiv;
#define glGetMaterialiv glad_debug_glGetMaterialiv
GLAD_API_CALL PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;
GLAD_API_CALL PFNGLGETMULTISAMPLEFVPROC glad_debug_glGetMultisamplefv;
#define glGetMultisamplefv glad_debug_glGetMultisamplefv
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_glGetNamedBufferParameteri64v;
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_debug_glGetNamedBufferParameteri64v;
#define glGetNamedBufferParameteri64v glad_debug_glGetNamedBufferParameteri64v
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_glGetNamedBufferParameteriv;
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_debug_glGetNamedBufferParameteriv;
#define glGetNamedBufferParameteriv glad_debug_glGetNamedBufferParameteriv
GLAD_API_CALL PFNGLGETNAMEDBUFFERPOINTERVPROC glad_glGetNamedBufferPointerv;
GLAD_API_CALL PFNGLGETNAMEDBUFFERPOINTERVPROC glad_debug_glGetNamedBufferPointerv;
#define glGetNamedBufferPointerv glad_debug_glGetNamedBufferPointerv
GLAD_API_CALL PFNGLGETNAMEDBUFFERSUBDATAPROC glad_glGetNamedBufferSubData;
GLAD_API_CALL PFNGLGETNAMEDBUFFERSUBDATAPROC glad_debug_glGetNamedBufferSubData;
#define glGetNamedBufferSubData glad_debug_glGetNamedBufferSubData
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetNamedFramebufferAttachmentParameteriv;
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_debug_glGetNamedFramebufferAttachmentParameteriv;
#define glGetNamedFramebufferAttachmentParameteriv glad_debug_glGetNamedFramebufferAttachmentParameteriv
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_glGetNamedFramebufferParameteriv;
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_debug_glGetNamedFramebufferParameteriv;
#define glGetNamedFramebufferParameteriv glad_debug_glGetNamedFramebufferParameteriv
GLAD_API_CALL PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_glGetNamedRenderbufferParameteriv;
GLAD_API_CALL PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_debug_glGetNamedRenderbufferParameteriv;
#define glGetNamedRenderbufferParameteriv glad_debug_glGetNamedRenderbufferParameteriv
GLAD_API_CALL PFNGLGETOBJECTLABELPROC glad_glGetObjectLabel;
GLAD_API_CALL PFNGLGETOBJECTLABELPROC glad_debug_glGetObjectLabel;
#define glGetObjectLabel glad_debug_glGetObjectLabel
GLAD_API_CALL PFNGLGETOBJECTPTRLABELPROC glad_glGetObjectPtrLabel;
GLAD_API_CALL PFNGLGETOBJECTPTRLABELPROC glad_debug_glGetObjectPtrLabel;
#define glGetObjectPtrLabel glad_debug_glGetObjectPtrLabel
GLAD_API_CALL PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv;
GLAD_API_CALL PFNGLGETPIXELMAPFVPROC glad_debug_glGetPixelMapfv;
#define glGetPixelMapfv glad_debug_glGetPixelMapfv
GLAD_API_CALL PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv;
GLAD_API_CALL PFNGLGETPIXELMAPUIVPROC glad_debug_glGetPixelMapuiv;
#define glGetPixelMapuiv glad_debug_glGetPixelMapuiv
GLAD_API_CALL PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv;
GLAD_API_CALL PFNGLGETPIXELMAPUSVPROC glad_debug_glGetPixelMapusv;
#define glGetPixelMapusv glad_debug_glGetPixelMapusv
GLAD_API_CALL PFNGLGETPOINTERVPROC glad_glGetPointerv;
GLAD_API_CALL PFNGLGETPOINTERVPROC glad_debug_glGetPointerv;
#define glGetPointerv glad_debug_glGetPointerv
GLAD_API_CALL PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple;
GLAD_API_CALL PFNGLGETPOLYGONSTIPPLEPROC glad_debug_glGetPolygonStipple;
#define glGetPolygonStipple glad_debug_glGetPolygonStipple
GLAD_API_CALL PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;
GLAD_API_CALL PFNGLGETPROGRAMBINARYPROC glad_debug_glGetProgramBinary;
#define glGetProgramBinary glad_debug_glGetProgramBinary
GLAD_API_CALL PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;
GLAD_API_CALL PFNGLGETPROGRAMINFOLOGPROC glad_debug_glGetProgramInfoLog;
#define glGetProgramInfoLog glad_debug_glGetProgramInfoLog
GLAD_API_CALL PFNGLGETPROGRAMINTERFACEIVPROC glad_glGetProgramInterfaceiv;
GLAD_API_CALL PFNGLGETPROGRAMINTERFACEIVPROC glad_debug_glGetProgramInterfaceiv;
#define glGetProgramInterfaceiv glad_debug_glGetProgramInterfaceiv
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_debug_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog glad_debug_glGetProgramPipelineInfoLog
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEIVPROC glad_debug_glGetProgramPipelineiv;
#define glGetProgramPipelineiv glad_debug_glGetProgramPipelineiv
GLAD_API_CALL PFNGLGETPROGRAMRESOURCEINDEXPROC glad_glGetProgramResourceIndex;
GLAD_API_CALL PFNGLGETPROGRAMRESOURCEINDEXPROC glad_debug_glGetProgramResourceIndex;
#define glGetProgramResourceIndex glad_debug_glGetProgramResourceIndex
GLAD_API_CALL PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_glGetProgramResourceLocation;
GLAD_API_CALL PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_debug_glGetProgramResourceLocation;
#define glGetProgramResourceLocation glad_debug_glGetProgramResourceLocation
GLAD_API_CALL PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_glGetProgramResourceLocationIndex;
GLAD_API_CALL PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_debug_glGetProgramResourceLocationIndex;
#define glGetProgramResourceLocationIndex glad_debug_glGetProgramResourceLocationIndex
GLAD_API_CALL PFNGLGETPROGRAMRESOURCENAMEPROC glad_glGetProgramResourceName;
GLAD_API_CALL PFNGLGETPROGRAMRESOURCENAMEPROC glad_debug_glGetProgramResourceName;
#define glGetProgramResourceName glad_debug_glGetProgramResourceName
GLAD_API_CALL PFNGLGETPROGRAMRESOURCEIVPROC glad_glGetProgramResourceiv;
GLAD_API_CALL PFNGLGETPROGRAMRESOURCEIVPROC glad_debug_glGetProgramResourceiv;
#define glGetProgramResourceiv glad_debug_glGetProgramResourceiv
GLAD_API_CALL PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;
GLAD_API_CALL PFNGLGETPROGRAMSTAGEIVPROC glad_debug_glGetProgramStageiv;
#define glGetProgramStageiv glad_debug_glGetProgramStageiv
GLAD_API_CALL PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;
GLAD_API_CALL PFNGLGETPROGRAMIVPROC glad_debug_glGetProgramiv;
#define glGetProgramiv glad_debug_glGetProgramiv
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_glGetQueryBufferObjecti64v;
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_debug_glGetQueryBufferObjecti64v;
#define glGetQueryBufferObjecti64v glad_debug_glGetQueryBufferObjecti64v
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTIVPROC glad_glGetQueryBufferObjectiv;
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTIVPROC glad_debug_glGetQueryBufferObjectiv;
#define glGetQueryBufferObjectiv glad_debug_glGetQueryBufferObjectiv
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_glGetQueryBufferObjectui64v;
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_debug_glGetQueryBufferObjectui64v;
#define glGetQueryBufferObjectui64v glad_debug_glGetQueryBufferObjectui64v
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_glGetQueryBufferObjectuiv;
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_debug_glGetQueryBufferObjectuiv;
#define glGetQueryBufferObjectuiv glad_debug_glGetQueryBufferObjectuiv
GLAD_API_CALL PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;
GLAD_API_CALL PFNGLGETQUERYINDEXEDIVPROC glad_debug_glGetQueryIndexediv;
#define glGetQueryIndexediv glad_debug_glGetQueryIndexediv
GLAD_API_CALL PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;
GLAD_API_CALL PFNGLGETQUERYOBJECTI64VPROC glad_debug_glGetQueryObjecti64v;
#define glGetQueryObjecti64v glad_debug_glGetQueryObjecti64v
GLAD_API_CALL PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;
GLAD_API_CALL PFNGLGETQUERYOBJECTIVPROC glad_debug_glGetQueryObjectiv;
#define glGetQueryObjectiv glad_debug_glGetQueryObjectiv
GLAD_API_CALL PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;
GLAD_API_CALL PFNGLGETQUERYOBJECTUI64VPROC glad_debug_glGetQueryObjectui64v;
#define glGetQueryObjectui64v glad_debug_glGetQueryObjectui64v
GLAD_API_CALL PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;
GLAD_API_CALL PFNGLGETQUERYOBJECTUIVPROC glad_debug_glGetQueryObjectuiv;
#define glGetQueryObjectuiv glad_debug_glGetQueryObjectuiv
GLAD_API_CALL PFNGLGETQUERYIVPROC glad_glGetQueryiv;
GLAD_API_CALL PFNGLGETQUERYIVPROC glad_debug_glGetQueryiv;
#define glGetQueryiv glad_debug_glGetQueryiv
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_debug_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv glad_debug_glGetRenderbufferParameteriv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIIVPROC glad_debug_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv glad_debug_glGetSamplerParameterIiv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIUIVPROC glad_debug_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv glad_debug_glGetSamplerParameterIuiv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERFVPROC glad_debug_glGetSamplerParameterfv;
#define glGetSamplerParameterfv glad_debug_glGetSamplerParameterfv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIVPROC glad_debug_glGetSamplerParameteriv;
#define glGetSamplerParameteriv glad_debug_glGetSamplerParameteriv
GLAD_API_CALL PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;
GLAD_API_CALL PFNGLGETSHADERINFOLOGPROC glad_debug_glGetShaderInfoLog;
#define glGetShaderInfoLog glad_debug_glGetShaderInfoLog
GLAD_API_CALL PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;
GLAD_API_CALL PFNGLGETSHADERPRECISIONFORMATPROC glad_debug_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat glad_debug_glGetShaderPrecisionFormat
GLAD_API_CALL PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;
GLAD_API_CALL PFNGLGETSHADERSOURCEPROC glad_debug_glGetShaderSource;
#define glGetShaderSource glad_debug_glGetShaderSource
GLAD_API_CALL PFNGLGETSHADERIVPROC glad_glGetShaderiv;
GLAD_API_CALL PFNGLGETSHADERIVPROC glad_debug_glGetShaderiv;
#define glGetShaderiv glad_debug_glGetShaderiv
GLAD_API_CALL PFNGLGETSTRINGPROC glad_glGetString;
GLAD_API_CALL PFNGLGETSTRINGPROC glad_debug_glGetString;
#define glGetString glad_debug_glGetString
GLAD_API_CALL PFNGLGETSTRINGIPROC glad_glGetStringi;
GLAD_API_CALL PFNGLGETSTRINGIPROC glad_debug_glGetStringi;
#define glGetStringi glad_debug_glGetStringi
GLAD_API_CALL PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;
GLAD_API_CALL PFNGLGETSUBROUTINEINDEXPROC glad_debug_glGetSubroutineIndex;
#define glGetSubroutineIndex glad_debug_glGetSubroutineIndex
GLAD_API_CALL PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;
GLAD_API_CALL PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_debug_glGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation glad_debug_glGetSubroutineUniformLocation
GLAD_API_CALL PFNGLGETSYNCIVPROC glad_glGetSynciv;
GLAD_API_CALL PFNGLGETSYNCIVPROC glad_debug_glGetSynciv;
#define glGetSynciv glad_debug_glGetSynciv
GLAD_API_CALL PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv;
GLAD_API_CALL PFNGLGETTEXENVFVPROC glad_debug_glGetTexEnvfv;
#define glGetTexEnvfv glad_debug_glGetTexEnvfv
GLAD_API_CALL PFNGLGETTEXENVIVPROC glad_glGetTexEnviv;
GLAD_API_CALL PFNGLGETTEXENVIVPROC glad_debug_glGetTexEnviv;
#define glGetTexEnviv glad_debug_glGetTexEnviv
GLAD_API_CALL PFNGLGETTEXGENDVPROC glad_glGetTexGendv;
GLAD_API_CALL PFNGLGETTEXGENDVPROC glad_debug_glGetTexGendv;
#define glGetTexGendv glad_debug_glGetTexGendv
GLAD_API_CALL PFNGLGETTEXGENFVPROC glad_glGetTexGenfv;
GLAD_API_CALL PFNGLGETTEXGENFVPROC glad_debug_glGetTexGenfv;
#define glGetTexGenfv glad_debug_glGetTexGenfv
GLAD_API_CALL PFNGLGETTEXGENIVPROC glad_glGetTexGeniv;
GLAD_API_CALL PFNGLGETTEXGENIVPROC glad_debug_glGetTexGeniv;
#define glGetTexGeniv glad_debug_glGetTexGeniv
GLAD_API_CALL PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
GLAD_API_CALL PFNGLGETTEXIMAGEPROC glad_debug_glGetTexImage;
#define glGetTexImage glad_debug_glGetTexImage
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERFVPROC glad_debug_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv glad_debug_glGetTexLevelParameterfv
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERIVPROC glad_debug_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv glad_debug_glGetTexLevelParameteriv
GLAD_API_CALL PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;
GLAD_API_CALL PFNGLGETTEXPARAMETERIIVPROC glad_debug_glGetTexParameterIiv;
#define glGetTexParameterIiv glad_debug_glGetTexParameterIiv
GLAD_API_CALL PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;
GLAD_API_CALL PFNGLGETTEXPARAMETERIUIVPROC glad_debug_glGetTexParameterIuiv;
#define glGetTexParameterIuiv glad_debug_glGetTexParameterIuiv
GLAD_API_CALL PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
GLAD_API_CALL PFNGLGETTEXPARAMETERFVPROC glad_debug_glGetTexParameterfv;
#define glGetTexParameterfv glad_debug_glGetTexParameterfv
GLAD_API_CALL PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
GLAD_API_CALL PFNGLGETTEXPARAMETERIVPROC glad_debug_glGetTexParameteriv;
#define glGetTexParameteriv glad_debug_glGetTexParameteriv
GLAD_API_CALL PFNGLGETTEXTUREIMAGEPROC glad_glGetTextureImage;
GLAD_API_CALL PFNGLGETTEXTUREIMAGEPROC glad_debug_glGetTextureImage;
#define glGetTextureImage glad_debug_glGetTextureImage
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_glGetTextureLevelParameterfv;
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_debug_glGetTextureLevelParameterfv;
#define glGetTextureLevelParameterfv glad_debug_glGetTextureLevelParameterfv
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_glGetTextureLevelParameteriv;
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_debug_glGetTextureLevelParameteriv;
#define glGetTextureLevelParameteriv glad_debug_glGetTextureLevelParameteriv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIIVPROC glad_glGetTextureParameterIiv;
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIIVPROC glad_debug_glGetTextureParameterIiv;
#define glGetTextureParameterIiv glad_debug_glGetTextureParameterIiv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIUIVPROC glad_glGetTextureParameterIuiv;
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIUIVPROC glad_debug_glGetTextureParameterIuiv;
#define glGetTextureParameterIuiv glad_debug_glGetTextureParameterIuiv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERFVPROC glad_glGetTextureParameterfv;
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERFVPROC glad_debug_glGetTextureParameterfv;
#define glGetTextureParameterfv glad_debug_glGetTextureParameterfv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIVPROC glad_glGetTextureParameteriv;
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIVPROC glad_debug_glGetTextureParameteriv;
#define glGetTextureParameteriv glad_debug_glGetTextureParameteriv
GLAD_API_CALL PFNGLGETTEXTURESUBIMAGEPROC glad_glGetTextureSubImage;
GLAD_API_CALL PFNGLGETTEXTURESUBIMAGEPROC glad_debug_glGetTextureSubImage;
#define glGetTextureSubImage glad_debug_glGetTextureSubImage
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_debug_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying glad_debug_glGetTransformFeedbackVarying
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_glGetTransformFeedbacki64_v;
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_debug_glGetTransformFeedbacki64_v;
#define glGetTransformFeedbacki64_v glad_debug_glGetTransformFeedbacki64_v
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_glGetTransformFeedbacki_v;
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_debug_glGetTransformFeedbacki_v;
#define glGetTransformFeedbacki_v glad_debug_glGetTransformFeedbacki_v
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKIVPROC glad_glGetTransformFeedbackiv;
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKIVPROC glad_debug_glGetTransformFeedbackiv;
#define glGetTransformFeedbackiv glad_debug_glGetTransformFeedbackiv
GLAD_API_CALL PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;
GLAD_API_CALL PFNGLGETUNIFORMBLOCKINDEXPROC glad_debug_glGetUniformBlockIndex;
#define glGetUniformBlockIndex glad_debug_glGetUniformBlockIndex
GLAD_API_CALL PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;
GLAD_API_CALL PFNGLGETUNIFORMINDICESPROC glad_debug_glGetUniformIndices;
#define glGetUniformIndices glad_debug_glGetUniformIndices
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONPROC glad_debug_glGetUniformLocation;
#define glGetUniformLocation glad_debug_glGetUniformLocation
GLAD_API_CALL PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;
GLAD_API_CALL PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_debug_glGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv glad_debug_glGetUniformSubroutineuiv
GLAD_API_CALL PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;
GLAD_API_CALL PFNGLGETUNIFORMDVPROC glad_debug_glGetUniformdv;
#define glGetUniformdv glad_debug_glGetUniformdv
GLAD_API_CALL PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;
GLAD_API_CALL PFNGLGETUNIFORMFVPROC glad_debug_glGetUniformfv;
#define glGetUniformfv glad_debug_glGetUniformfv
GLAD_API_CALL PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;
GLAD_API_CALL PFNGLGETUNIFORMIVPROC glad_debug_glGetUniformiv;
#define glGetUniformiv glad_debug_glGetUniformiv
GLAD_API_CALL PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;
GLAD_API_CALL PFNGLGETUNIFORMUIVPROC glad_debug_glGetUniformuiv;
#define glGetUniformuiv glad_debug_glGetUniformuiv
GLAD_API_CALL PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_glGetVertexArrayIndexed64iv;
GLAD_API_CALL PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_debug_glGetVertexArrayIndexed64iv;
#define glGetVertexArrayIndexed64iv glad_debug_glGetVertexArrayIndexed64iv
GLAD_API_CALL PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_glGetVertexArrayIndexediv;
GLAD_API_CALL PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_debug_glGetVertexArrayIndexediv;
#define glGetVertexArrayIndexediv glad_debug_glGetVertexArrayIndexediv
GLAD_API_CALL PFNGLGETVERTEXARRAYIVPROC glad_glGetVertexArrayiv;
GLAD_API_CALL PFNGLGETVERTEXARRAYIVPROC glad_debug_glGetVertexArrayiv;
#define glGetVertexArrayiv glad_debug_glGetVertexArrayiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBIIVPROC glad_debug_glGetVertexAttribIiv;
#define glGetVertexAttribIiv glad_debug_glGetVertexAttribIiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBIUIVPROC glad_debug_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv glad_debug_glGetVertexAttribIuiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBLDVPROC glad_debug_glGetVertexAttribLdv;
#define glGetVertexAttribLdv glad_debug_glGetVertexAttribLdv
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVPROC glad_debug_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv glad_debug_glGetVertexAttribPointerv
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVPROC glad_debug_glGetVertexAttribdv;
#define glGetVertexAttribdv glad_debug_glGetVertexAttribdv
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVPROC glad_debug_glGetVertexAttribfv;
#define glGetVertexAttribfv glad_debug_glGetVertexAttribfv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVPROC glad_debug_glGetVertexAttribiv;
#define glGetVertexAttribiv glad_debug_glGetVertexAttribiv
GLAD_API_CALL PFNGLGETNCOLORTABLEPROC glad_glGetnColorTable;
GLAD_API_CALL PFNGLGETNCOLORTABLEPROC glad_debug_glGetnColorTable;
#define glGetnColorTable glad_debug_glGetnColorTable
GLAD_API_CALL PFNGLGETNCOMPRESSEDTEXIMAGEPROC glad_glGetnCompressedTexImage;
GLAD_API_CALL PFNGLGETNCOMPRESSEDTEXIMAGEPROC glad_debug_glGetnCompressedTexImage;
#define glGetnCompressedTexImage glad_debug_glGetnCompressedTexImage
GLAD_API_CALL PFNGLGETNCONVOLUTIONFILTERPROC glad_glGetnConvolutionFilter;
GLAD_API_CALL PFNGLGETNCONVOLUTIONFILTERPROC glad_debug_glGetnConvolutionFilter;
#define glGetnConvolutionFilter glad_debug_glGetnConvolutionFilter
GLAD_API_CALL PFNGLGETNHISTOGRAMPROC glad_glGetnHistogram;
GLAD_API_CALL PFNGLGETNHISTOGRAMPROC glad_debug_glGetnHistogram;
#define glGetnHistogram glad_debug_glGetnHistogram
GLAD_API_CALL PFNGLGETNMAPDVPROC glad_glGetnMapdv;
GLAD_API_CALL PFNGLGETNMAPDVPROC glad_debug_glGetnMapdv;
#define glGetnMapdv glad_debug_glGetnMapdv
GLAD_API_CALL PFNGLGETNMAPFVPROC glad_glGetnMapfv;
GLAD_API_CALL PFNGLGETNMAPFVPROC glad_debug_glGetnMapfv;
#define glGetnMapfv glad_debug_glGetnMapfv
GLAD_API_CALL PFNGLGETNMAPIVPROC glad_glGetnMapiv;
GLAD_API_CALL PFNGLGETNMAPIVPROC glad_debug_glGetnMapiv;
#define glGetnMapiv glad_debug_glGetnMapiv
GLAD_API_CALL PFNGLGETNMINMAXPROC glad_glGetnMinmax;
GLAD_API_CALL PFNGLGETNMINMAXPROC glad_debug_glGetnMinmax;
#define glGetnMinmax glad_debug_glGetnMinmax
GLAD_API_CALL PFNGLGETNPIXELMAPFVPROC glad_glGetnPixelMapfv;
GLAD_API_CALL PFNGLGETNPIXELMAPFVPROC glad_debug_glGetnPixelMapfv;
#define glGetnPixelMapfv glad_debug_glGetnPixelMapfv
GLAD_API_CALL PFNGLGETNPIXELMAPUIVPROC glad_glGetnPixelMapuiv;
GLAD_API_CALL PFNGLGETNPIXELMAPUIVPROC glad_debug_glGetnPixelMapuiv;
#define glGetnPixelMapuiv glad_debug_glGetnPixelMapuiv
GLAD_API_CALL PFNGLGETNPIXELMAPUSVPROC glad_glGetnPixelMapusv;
GLAD_API_CALL PFNGLGETNPIXELMAPUSVPROC glad_debug_glGetnPixelMapusv;
#define glGetnPixelMapusv glad_debug_glGetnPixelMapusv
GLAD_API_CALL PFNGLGETNPOLYGONSTIPPLEPROC glad_glGetnPolygonStipple;
GLAD_API_CALL PFNGLGETNPOLYGONSTIPPLEPROC glad_debug_glGetnPolygonStipple;
#define glGetnPolygonStipple glad_debug_glGetnPolygonStipple
GLAD_API_CALL PFNGLGETNSEPARABLEFILTERPROC glad_glGetnSeparableFilter;
GLAD_API_CALL PFNGLGETNSEPARABLEFILTERPROC glad_debug_glGetnSeparableFilter;
#define glGetnSeparableFilter glad_debug_glGetnSeparableFilter
GLAD_API_CALL PFNGLGETNTEXIMAGEPROC glad_glGetnTexImage;
GLAD_API_CALL PFNGLGETNTEXIMAGEPROC glad_debug_glGetnTexImage;
#define glGetnTexImage glad_debug_glGetnTexImage
GLAD_API_CALL PFNGLGETNUNIFORMDVPROC glad_glGetnUniformdv;
GLAD_API_CALL PFNGLGETNUNIFORMDVPROC glad_debug_glGetnUniformdv;
#define glGetnUniformdv glad_debug_glGetnUniformdv
GLAD_API_CALL PFNGLGETNUNIFORMFVPROC glad_glGetnUniformfv;
GLAD_API_CALL PFNGLGETNUNIFORMFVPROC glad_debug_glGetnUniformfv;
#define glGetnUniformfv glad_debug_glGetnUniformfv
GLAD_API_CALL PFNGLGETNUNIFORMIVPROC glad_glGetnUniformiv;
GLAD_API_CALL PFNGLGETNUNIFORMIVPROC glad_debug_glGetnUniformiv;
#define glGetnUniformiv glad_debug_glGetnUniformiv
GLAD_API_CALL PFNGLGETNUNIFORMUIVPROC glad_glGetnUniformuiv;
GLAD_API_CALL PFNGLGETNUNIFORMUIVPROC glad_debug_glGetnUniformuiv;
#define glGetnUniformuiv glad_debug_glGetnUniformuiv
GLAD_API_CALL PFNGLHINTPROC glad_glHint;
GLAD_API_CALL PFNGLHINTPROC glad_debug_glHint;
#define glHint glad_debug_glHint
GLAD_API_CALL PFNGLINDEXMASKPROC glad_glIndexMask;
GLAD_API_CALL PFNGLINDEXMASKPROC glad_debug_glIndexMask;
#define glIndexMask glad_debug_glIndexMask
GLAD_API_CALL PFNGLINDEXPOINTERPROC glad_glIndexPointer;
GLAD_API_CALL PFNGLINDEXPOINTERPROC glad_debug_glIndexPointer;
#define glIndexPointer glad_debug_glIndexPointer
GLAD_API_CALL PFNGLINDEXDPROC glad_glIndexd;
GLAD_API_CALL PFNGLINDEXDPROC glad_debug_glIndexd;
#define glIndexd glad_debug_glIndexd
GLAD_API_CALL PFNGLINDEXDVPROC glad_glIndexdv;
GLAD_API_CALL PFNGLINDEXDVPROC glad_debug_glIndexdv;
#define glIndexdv glad_debug_glIndexdv
GLAD_API_CALL PFNGLINDEXFPROC glad_glIndexf;
GLAD_API_CALL PFNGLINDEXFPROC glad_debug_glIndexf;
#define glIndexf glad_debug_glIndexf
GLAD_API_CALL PFNGLINDEXFVPROC glad_glIndexfv;
GLAD_API_CALL PFNGLINDEXFVPROC glad_debug_glIndexfv;
#define glIndexfv glad_debug_glIndexfv
GLAD_API_CALL PFNGLINDEXIPROC glad_glIndexi;
GLAD_API_CALL PFNGLINDEXIPROC glad_debug_glIndexi;
#define glIndexi glad_debug_glIndexi
GLAD_API_CALL PFNGLINDEXIVPROC glad_glIndexiv;
GLAD_API_CALL PFNGLINDEXIVPROC glad_debug_glIndexiv;
#define glIndexiv glad_debug_glIndexiv
GLAD_API_CALL PFNGLINDEXSPROC glad_glIndexs;
GLAD_API_CALL PFNGLINDEXSPROC glad_debug_glIndexs;
#define glIndexs glad_debug_glIndexs
GLAD_API_CALL PFNGLINDEXSVPROC glad_glIndexsv;
GLAD_API_CALL PFNGLINDEXSVPROC glad_debug_glIndexsv;
#define glIndexsv glad_debug_glIndexsv
GLAD_API_CALL PFNGLINDEXUBPROC glad_glIndexub;
GLAD_API_CALL PFNGLINDEXUBPROC glad_debug_glIndexub;
#define glIndexub glad_debug_glIndexub
GLAD_API_CALL PFNGLINDEXUBVPROC glad_glIndexubv;
GLAD_API_CALL PFNGLINDEXUBVPROC glad_debug_glIndexubv;
#define glIndexubv glad_debug_glIndexubv
GLAD_API_CALL PFNGLINITNAMESPROC glad_glInitNames;
GLAD_API_CALL PFNGLINITNAMESPROC glad_debug_glInitNames;
#define glInitNames glad_debug_glInitNames
GLAD_API_CALL PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays;
GLAD_API_CALL PFNGLINTERLEAVEDARRAYSPROC glad_debug_glInterleavedArrays;
#define glInterleavedArrays glad_debug_glInterleavedArrays
GLAD_API_CALL PFNGLINVALIDATEBUFFERDATAPROC glad_glInvalidateBufferData;
GLAD_API_CALL PFNGLINVALIDATEBUFFERDATAPROC glad_debug_glInvalidateBufferData;
#define glInvalidateBufferData glad_debug_glInvalidateBufferData
GLAD_API_CALL PFNGLINVALIDATEBUFFERSUBDATAPROC glad_glInvalidateBufferSubData;
GLAD_API_CALL PFNGLINVALIDATEBUFFERSUBDATAPROC glad_debug_glInvalidateBufferSubData;
#define glInvalidateBufferSubData glad_debug_glInvalidateBufferSubData
GLAD_API_CALL PFNGLINVALIDATEFRAMEBUFFERPROC glad_glInvalidateFramebuffer;
GLAD_API_CALL PFNGLINVALIDATEFRAMEBUFFERPROC glad_debug_glInvalidateFramebuffer;
#define glInvalidateFramebuffer glad_debug_glInvalidateFramebuffer
GLAD_API_CALL PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_glInvalidateNamedFramebufferData;
GLAD_API_CALL PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_debug_glInvalidateNamedFramebufferData;
#define glInvalidateNamedFramebufferData glad_debug_glInvalidateNamedFramebufferData
GLAD_API_CALL PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_glInvalidateNamedFramebufferSubData;
GLAD_API_CALL PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_debug_glInvalidateNamedFramebufferSubData;
#define glInvalidateNamedFramebufferSubData glad_debug_glInvalidateNamedFramebufferSubData
GLAD_API_CALL PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_glInvalidateSubFramebuffer;
GLAD_API_CALL PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_debug_glInvalidateSubFramebuffer;
#define glInvalidateSubFramebuffer glad_debug_glInvalidateSubFramebuffer
GLAD_API_CALL PFNGLINVALIDATETEXIMAGEPROC glad_glInvalidateTexImage;
GLAD_API_CALL PFNGLINVALIDATETEXIMAGEPROC glad_debug_glInvalidateTexImage;
#define glInvalidateTexImage glad_debug_glInvalidateTexImage
GLAD_API_CALL PFNGLINVALIDATETEXSUBIMAGEPROC glad_glInvalidateTexSubImage;
GLAD_API_CALL PFNGLINVALIDATETEXSUBIMAGEPROC glad_debug_glInvalidateTexSubImage;
#define glInvalidateTexSubImage glad_debug_glInvalidateTexSubImage
GLAD_API_CALL PFNGLISBUFFERPROC glad_glIsBuffer;
GLAD_API_CALL PFNGLISBUFFERPROC glad_debug_glIsBuffer;
#define glIsBuffer glad_debug_glIsBuffer
GLAD_API_CALL PFNGLISENABLEDPROC glad_glIsEnabled;
GLAD_API_CALL PFNGLISENABLEDPROC glad_debug_glIsEnabled;
#define glIsEnabled glad_debug_glIsEnabled
GLAD_API_CALL PFNGLISENABLEDIPROC glad_glIsEnabledi;
GLAD_API_CALL PFNGLISENABLEDIPROC glad_debug_glIsEnabledi;
#define glIsEnabledi glad_debug_glIsEnabledi
GLAD_API_CALL PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;
GLAD_API_CALL PFNGLISFRAMEBUFFERPROC glad_debug_glIsFramebuffer;
#define glIsFramebuffer glad_debug_glIsFramebuffer
GLAD_API_CALL PFNGLISLISTPROC glad_glIsList;
GLAD_API_CALL PFNGLISLISTPROC glad_debug_glIsList;
#define glIsList glad_debug_glIsList
GLAD_API_CALL PFNGLISPROGRAMPROC glad_glIsProgram;
GLAD_API_CALL PFNGLISPROGRAMPROC glad_debug_glIsProgram;
#define glIsProgram glad_debug_glIsProgram
GLAD_API_CALL PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;
GLAD_API_CALL PFNGLISPROGRAMPIPELINEPROC glad_debug_glIsProgramPipeline;
#define glIsProgramPipeline glad_debug_glIsProgramPipeline
GLAD_API_CALL PFNGLISQUERYPROC glad_glIsQuery;
GLAD_API_CALL PFNGLISQUERYPROC glad_debug_glIsQuery;
#define glIsQuery glad_debug_glIsQuery
GLAD_API_CALL PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;
GLAD_API_CALL PFNGLISRENDERBUFFERPROC glad_debug_glIsRenderbuffer;
#define glIsRenderbuffer glad_debug_glIsRenderbuffer
GLAD_API_CALL PFNGLISSAMPLERPROC glad_glIsSampler;
GLAD_API_CALL PFNGLISSAMPLERPROC glad_debug_glIsSampler;
#define glIsSampler glad_debug_glIsSampler
GLAD_API_CALL PFNGLISSHADERPROC glad_glIsShader;
GLAD_API_CALL PFNGLISSHADERPROC glad_debug_glIsShader;
#define glIsShader glad_debug_glIsShader
GLAD_API_CALL PFNGLISSYNCPROC glad_glIsSync;
GLAD_API_CALL PFNGLISSYNCPROC glad_debug_glIsSync;
#define glIsSync glad_debug_glIsSync
GLAD_API_CALL PFNGLISTEXTUREPROC glad_glIsTexture;
GLAD_API_CALL PFNGLISTEXTUREPROC glad_debug_glIsTexture;
#define glIsTexture glad_debug_glIsTexture
GLAD_API_CALL PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;
GLAD_API_CALL PFNGLISTRANSFORMFEEDBACKPROC glad_debug_glIsTransformFeedback;
#define glIsTransformFeedback glad_debug_glIsTransformFeedback
GLAD_API_CALL PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;
GLAD_API_CALL PFNGLISVERTEXARRAYPROC glad_debug_glIsVertexArray;
#define glIsVertexArray glad_debug_glIsVertexArray
GLAD_API_CALL PFNGLLIGHTMODELFPROC glad_glLightModelf;
GLAD_API_CALL PFNGLLIGHTMODELFPROC glad_debug_glLightModelf;
#define glLightModelf glad_debug_glLightModelf
GLAD_API_CALL PFNGLLIGHTMODELFVPROC glad_glLightModelfv;
GLAD_API_CALL PFNGLLIGHTMODELFVPROC glad_debug_glLightModelfv;
#define glLightModelfv glad_debug_glLightModelfv
GLAD_API_CALL PFNGLLIGHTMODELIPROC glad_glLightModeli;
GLAD_API_CALL PFNGLLIGHTMODELIPROC glad_debug_glLightModeli;
#define glLightModeli glad_debug_glLightModeli
GLAD_API_CALL PFNGLLIGHTMODELIVPROC glad_glLightModeliv;
GLAD_API_CALL PFNGLLIGHTMODELIVPROC glad_debug_glLightModeliv;
#define glLightModeliv glad_debug_glLightModeliv
GLAD_API_CALL PFNGLLIGHTFPROC glad_glLightf;
GLAD_API_CALL PFNGLLIGHTFPROC glad_debug_glLightf;
#define glLightf glad_debug_glLightf
GLAD_API_CALL PFNGLLIGHTFVPROC glad_glLightfv;
GLAD_API_CALL PFNGLLIGHTFVPROC glad_debug_glLightfv;
#define glLightfv glad_debug_glLightfv
GLAD_API_CALL PFNGLLIGHTIPROC glad_glLighti;
GLAD_API_CALL PFNGLLIGHTIPROC glad_debug_glLighti;
#define glLighti glad_debug_glLighti
GLAD_API_CALL PFNGLLIGHTIVPROC glad_glLightiv;
GLAD_API_CALL PFNGLLIGHTIVPROC glad_debug_glLightiv;
#define glLightiv glad_debug_glLightiv
GLAD_API_CALL PFNGLLINESTIPPLEPROC glad_glLineStipple;
GLAD_API_CALL PFNGLLINESTIPPLEPROC glad_debug_glLineStipple;
#define glLineStipple glad_debug_glLineStipple
GLAD_API_CALL PFNGLLINEWIDTHPROC glad_glLineWidth;
GLAD_API_CALL PFNGLLINEWIDTHPROC glad_debug_glLineWidth;
#define glLineWidth glad_debug_glLineWidth
GLAD_API_CALL PFNGLLINKPROGRAMPROC glad_glLinkProgram;
GLAD_API_CALL PFNGLLINKPROGRAMPROC glad_debug_glLinkProgram;
#define glLinkProgram glad_debug_glLinkProgram
GLAD_API_CALL PFNGLLISTBASEPROC glad_glListBase;
GLAD_API_CALL PFNGLLISTBASEPROC glad_debug_glListBase;
#define glListBase glad_debug_glListBase
GLAD_API_CALL PFNGLLOADIDENTITYPROC glad_glLoadIdentity;
GLAD_API_CALL PFNGLLOADIDENTITYPROC glad_debug_glLoadIdentity;
#define glLoadIdentity glad_debug_glLoadIdentity
GLAD_API_CALL PFNGLLOADMATRIXDPROC glad_glLoadMatrixd;
GLAD_API_CALL PFNGLLOADMATRIXDPROC glad_debug_glLoadMatrixd;
#define glLoadMatrixd glad_debug_glLoadMatrixd
GLAD_API_CALL PFNGLLOADMATRIXFPROC glad_glLoadMatrixf;
GLAD_API_CALL PFNGLLOADMATRIXFPROC glad_debug_glLoadMatrixf;
#define glLoadMatrixf glad_debug_glLoadMatrixf
GLAD_API_CALL PFNGLLOADNAMEPROC glad_glLoadName;
GLAD_API_CALL PFNGLLOADNAMEPROC glad_debug_glLoadName;
#define glLoadName glad_debug_glLoadName
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd;
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXDPROC glad_debug_glLoadTransposeMatrixd;
#define glLoadTransposeMatrixd glad_debug_glLoadTransposeMatrixd
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf;
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXFPROC glad_debug_glLoadTransposeMatrixf;
#define glLoadTransposeMatrixf glad_debug_glLoadTransposeMatrixf
GLAD_API_CALL PFNGLLOGICOPPROC glad_glLogicOp;
GLAD_API_CALL PFNGLLOGICOPPROC glad_debug_glLogicOp;
#define glLogicOp glad_debug_glLogicOp
GLAD_API_CALL PFNGLMAP1DPROC glad_glMap1d;
GLAD_API_CALL PFNGLMAP1DPROC glad_debug_glMap1d;
#define glMap1d glad_debug_glMap1d
GLAD_API_CALL PFNGLMAP1FPROC glad_glMap1f;
GLAD_API_CALL PFNGLMAP1FPROC glad_debug_glMap1f;
#define glMap1f glad_debug_glMap1f
GLAD_API_CALL PFNGLMAP2DPROC glad_glMap2d;
GLAD_API_CALL PFNGLMAP2DPROC glad_debug_glMap2d;
#define glMap2d glad_debug_glMap2d
GLAD_API_CALL PFNGLMAP2FPROC glad_glMap2f;
GLAD_API_CALL PFNGLMAP2FPROC glad_debug_glMap2f;
#define glMap2f glad_debug_glMap2f
GLAD_API_CALL PFNGLMAPBUFFERPROC glad_glMapBuffer;
GLAD_API_CALL PFNGLMAPBUFFERPROC glad_debug_glMapBuffer;
#define glMapBuffer glad_debug_glMapBuffer
GLAD_API_CALL PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;
GLAD_API_CALL PFNGLMAPBUFFERRANGEPROC glad_debug_glMapBufferRange;
#define glMapBufferRange glad_debug_glMapBufferRange
GLAD_API_CALL PFNGLMAPGRID1DPROC glad_glMapGrid1d;
GLAD_API_CALL PFNGLMAPGRID1DPROC glad_debug_glMapGrid1d;
#define glMapGrid1d glad_debug_glMapGrid1d
GLAD_API_CALL PFNGLMAPGRID1FPROC glad_glMapGrid1f;
GLAD_API_CALL PFNGLMAPGRID1FPROC glad_debug_glMapGrid1f;
#define glMapGrid1f glad_debug_glMapGrid1f
GLAD_API_CALL PFNGLMAPGRID2DPROC glad_glMapGrid2d;
GLAD_API_CALL PFNGLMAPGRID2DPROC glad_debug_glMapGrid2d;
#define glMapGrid2d glad_debug_glMapGrid2d
GLAD_API_CALL PFNGLMAPGRID2FPROC glad_glMapGrid2f;
GLAD_API_CALL PFNGLMAPGRID2FPROC glad_debug_glMapGrid2f;
#define glMapGrid2f glad_debug_glMapGrid2f
GLAD_API_CALL PFNGLMAPNAMEDBUFFERPROC glad_glMapNamedBuffer;
GLAD_API_CALL PFNGLMAPNAMEDBUFFERPROC glad_debug_glMapNamedBuffer;
#define glMapNamedBuffer glad_debug_glMapNamedBuffer
GLAD_API_CALL PFNGLMAPNAMEDBUFFERRANGEPROC glad_glMapNamedBufferRange;
GLAD_API_CALL PFNGLMAPNAMEDBUFFERRANGEPROC glad_debug_glMapNamedBufferRange;
#define glMapNamedBufferRange glad_debug_glMapNamedBufferRange
GLAD_API_CALL PFNGLMATERIALFPROC glad_glMaterialf;
GLAD_API_CALL PFNGLMATERIALFPROC glad_debug_glMaterialf;
#define glMaterialf glad_debug_glMaterialf
GLAD_API_CALL PFNGLMATERIALFVPROC glad_glMaterialfv;
GLAD_API_CALL PFNGLMATERIALFVPROC glad_debug_glMaterialfv;
#define glMaterialfv glad_debug_glMaterialfv
GLAD_API_CALL PFNGLMATERIALIPROC glad_glMateriali;
GLAD_API_CALL PFNGLMATERIALIPROC glad_debug_glMateriali;
#define glMateriali glad_debug_glMateriali
GLAD_API_CALL PFNGLMATERIALIVPROC glad_glMaterialiv;
GLAD_API_CALL PFNGLMATERIALIVPROC glad_debug_glMaterialiv;
#define glMaterialiv glad_debug_glMaterialiv
GLAD_API_CALL PFNGLMATRIXMODEPROC glad_glMatrixMode;
GLAD_API_CALL PFNGLMATRIXMODEPROC glad_debug_glMatrixMode;
#define glMatrixMode glad_debug_glMatrixMode
GLAD_API_CALL PFNGLMEMORYBARRIERPROC glad_glMemoryBarrier;
GLAD_API_CALL PFNGLMEMORYBARRIERPROC glad_debug_glMemoryBarrier;
#define glMemoryBarrier glad_debug_glMemoryBarrier
GLAD_API_CALL PFNGLMEMORYBARRIERBYREGIONPROC glad_glMemoryBarrierByRegion;
GLAD_API_CALL PFNGLMEMORYBARRIERBYREGIONPROC glad_debug_glMemoryBarrierByRegion;
#define glMemoryBarrierByRegion glad_debug_glMemoryBarrierByRegion
GLAD_API_CALL PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading;
GLAD_API_CALL PFNGLMINSAMPLESHADINGPROC glad_debug_glMinSampleShading;
#define glMinSampleShading glad_debug_glMinSampleShading
GLAD_API_CALL PFNGLMULTMATRIXDPROC glad_glMultMatrixd;
GLAD_API_CALL PFNGLMULTMATRIXDPROC glad_debug_glMultMatrixd;
#define glMultMatrixd glad_debug_glMultMatrixd
GLAD_API_CALL PFNGLMULTMATRIXFPROC glad_glMultMatrixf;
GLAD_API_CALL PFNGLMULTMATRIXFPROC glad_debug_glMultMatrixf;
#define glMultMatrixf glad_debug_glMultMatrixf
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd;
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXDPROC glad_debug_glMultTransposeMatrixd;
#define glMultTransposeMatrixd glad_debug_glMultTransposeMatrixd
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf;
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXFPROC glad_debug_glMultTransposeMatrixf;
#define glMultTransposeMatrixf glad_debug_glMultTransposeMatrixf
GLAD_API_CALL PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;
GLAD_API_CALL PFNGLMULTIDRAWARRAYSPROC glad_debug_glMultiDrawArrays;
#define glMultiDrawArrays glad_debug_glMultiDrawArrays
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_glMultiDrawArraysIndirect;
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_debug_glMultiDrawArraysIndirect;
#define glMultiDrawArraysIndirect glad_debug_glMultiDrawArraysIndirect
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glad_glMultiDrawArraysIndirectCount;
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glad_debug_glMultiDrawArraysIndirectCount;
#define glMultiDrawArraysIndirectCount glad_debug_glMultiDrawArraysIndirectCount
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSPROC glad_debug_glMultiDrawElements;
#define glMultiDrawElements glad_debug_glMultiDrawElements
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_debug_glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex glad_debug_glMultiDrawElementsBaseVertex
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_glMultiDrawElementsIndirect;
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_debug_glMultiDrawElementsIndirect;
#define glMultiDrawElementsIndirect glad_debug_glMultiDrawElementsIndirect
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glad_glMultiDrawElementsIndirectCount;
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glad_debug_glMultiDrawElementsIndirectCount;
#define glMultiDrawElementsIndirectCount glad_debug_glMultiDrawElementsIndirectCount
GLAD_API_CALL PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d;
GLAD_API_CALL PFNGLMULTITEXCOORD1DPROC glad_debug_glMultiTexCoord1d;
#define glMultiTexCoord1d glad_debug_glMultiTexCoord1d
GLAD_API_CALL PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv;
GLAD_API_CALL PFNGLMULTITEXCOORD1DVPROC glad_debug_glMultiTexCoord1dv;
#define glMultiTexCoord1dv glad_debug_glMultiTexCoord1dv
GLAD_API_CALL PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f;
GLAD_API_CALL PFNGLMULTITEXCOORD1FPROC glad_debug_glMultiTexCoord1f;
#define glMultiTexCoord1f glad_debug_glMultiTexCoord1f
GLAD_API_CALL PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv;
GLAD_API_CALL PFNGLMULTITEXCOORD1FVPROC glad_debug_glMultiTexCoord1fv;
#define glMultiTexCoord1fv glad_debug_glMultiTexCoord1fv
GLAD_API_CALL PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i;
GLAD_API_CALL PFNGLMULTITEXCOORD1IPROC glad_debug_glMultiTexCoord1i;
#define glMultiTexCoord1i glad_debug_glMultiTexCoord1i
GLAD_API_CALL PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv;
GLAD_API_CALL PFNGLMULTITEXCOORD1IVPROC glad_debug_glMultiTexCoord1iv;
#define glMultiTexCoord1iv glad_debug_glMultiTexCoord1iv
GLAD_API_CALL PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s;
GLAD_API_CALL PFNGLMULTITEXCOORD1SPROC glad_debug_glMultiTexCoord1s;
#define glMultiTexCoord1s glad_debug_glMultiTexCoord1s
GLAD_API_CALL PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv;
GLAD_API_CALL PFNGLMULTITEXCOORD1SVPROC glad_debug_glMultiTexCoord1sv;
#define glMultiTexCoord1sv glad_debug_glMultiTexCoord1sv
GLAD_API_CALL PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d;
GLAD_API_CALL PFNGLMULTITEXCOORD2DPROC glad_debug_glMultiTexCoord2d;
#define glMultiTexCoord2d glad_debug_glMultiTexCoord2d
GLAD_API_CALL PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv;
GLAD_API_CALL PFNGLMULTITEXCOORD2DVPROC glad_debug_glMultiTexCoord2dv;
#define glMultiTexCoord2dv glad_debug_glMultiTexCoord2dv
GLAD_API_CALL PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f;
GLAD_API_CALL PFNGLMULTITEXCOORD2FPROC glad_debug_glMultiTexCoord2f;
#define glMultiTexCoord2f glad_debug_glMultiTexCoord2f
GLAD_API_CALL PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv;
GLAD_API_CALL PFNGLMULTITEXCOORD2FVPROC glad_debug_glMultiTexCoord2fv;
#define glMultiTexCoord2fv glad_debug_glMultiTexCoord2fv
GLAD_API_CALL PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i;
GLAD_API_CALL PFNGLMULTITEXCOORD2IPROC glad_debug_glMultiTexCoord2i;
#define glMultiTexCoord2i glad_debug_glMultiTexCoord2i
GLAD_API_CALL PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv;
GLAD_API_CALL PFNGLMULTITEXCOORD2IVPROC glad_debug_glMultiTexCoord2iv;
#define glMultiTexCoord2iv glad_debug_glMultiTexCoord2iv
GLAD_API_CALL PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s;
GLAD_API_CALL PFNGLMULTITEXCOORD2SPROC glad_debug_glMultiTexCoord2s;
#define glMultiTexCoord2s glad_debug_glMultiTexCoord2s
GLAD_API_CALL PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv;
GLAD_API_CALL PFNGLMULTITEXCOORD2SVPROC glad_debug_glMultiTexCoord2sv;
#define glMultiTexCoord2sv glad_debug_glMultiTexCoord2sv
GLAD_API_CALL PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d;
GLAD_API_CALL PFNGLMULTITEXCOORD3DPROC glad_debug_glMultiTexCoord3d;
#define glMultiTexCoord3d glad_debug_glMultiTexCoord3d
GLAD_API_CALL PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv;
GLAD_API_CALL PFNGLMULTITEXCOORD3DVPROC glad_debug_glMultiTexCoord3dv;
#define glMultiTexCoord3dv glad_debug_glMultiTexCoord3dv
GLAD_API_CALL PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f;
GLAD_API_CALL PFNGLMULTITEXCOORD3FPROC glad_debug_glMultiTexCoord3f;
#define glMultiTexCoord3f glad_debug_glMultiTexCoord3f
GLAD_API_CALL PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv;
GLAD_API_CALL PFNGLMULTITEXCOORD3FVPROC glad_debug_glMultiTexCoord3fv;
#define glMultiTexCoord3fv glad_debug_glMultiTexCoord3fv
GLAD_API_CALL PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i;
GLAD_API_CALL PFNGLMULTITEXCOORD3IPROC glad_debug_glMultiTexCoord3i;
#define glMultiTexCoord3i glad_debug_glMultiTexCoord3i
GLAD_API_CALL PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv;
GLAD_API_CALL PFNGLMULTITEXCOORD3IVPROC glad_debug_glMultiTexCoord3iv;
#define glMultiTexCoord3iv glad_debug_glMultiTexCoord3iv
GLAD_API_CALL PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s;
GLAD_API_CALL PFNGLMULTITEXCOORD3SPROC glad_debug_glMultiTexCoord3s;
#define glMultiTexCoord3s glad_debug_glMultiTexCoord3s
GLAD_API_CALL PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv;
GLAD_API_CALL PFNGLMULTITEXCOORD3SVPROC glad_debug_glMultiTexCoord3sv;
#define glMultiTexCoord3sv glad_debug_glMultiTexCoord3sv
GLAD_API_CALL PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d;
GLAD_API_CALL PFNGLMULTITEXCOORD4DPROC glad_debug_glMultiTexCoord4d;
#define glMultiTexCoord4d glad_debug_glMultiTexCoord4d
GLAD_API_CALL PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv;
GLAD_API_CALL PFNGLMULTITEXCOORD4DVPROC glad_debug_glMultiTexCoord4dv;
#define glMultiTexCoord4dv glad_debug_glMultiTexCoord4dv
GLAD_API_CALL PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f;
GLAD_API_CALL PFNGLMULTITEXCOORD4FPROC glad_debug_glMultiTexCoord4f;
#define glMultiTexCoord4f glad_debug_glMultiTexCoord4f
GLAD_API_CALL PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv;
GLAD_API_CALL PFNGLMULTITEXCOORD4FVPROC glad_debug_glMultiTexCoord4fv;
#define glMultiTexCoord4fv glad_debug_glMultiTexCoord4fv
GLAD_API_CALL PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i;
GLAD_API_CALL PFNGLMULTITEXCOORD4IPROC glad_debug_glMultiTexCoord4i;
#define glMultiTexCoord4i glad_debug_glMultiTexCoord4i
GLAD_API_CALL PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv;
GLAD_API_CALL PFNGLMULTITEXCOORD4IVPROC glad_debug_glMultiTexCoord4iv;
#define glMultiTexCoord4iv glad_debug_glMultiTexCoord4iv
GLAD_API_CALL PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s;
GLAD_API_CALL PFNGLMULTITEXCOORD4SPROC glad_debug_glMultiTexCoord4s;
#define glMultiTexCoord4s glad_debug_glMultiTexCoord4s
GLAD_API_CALL PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv;
GLAD_API_CALL PFNGLMULTITEXCOORD4SVPROC glad_debug_glMultiTexCoord4sv;
#define glMultiTexCoord4sv glad_debug_glMultiTexCoord4sv
GLAD_API_CALL PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;
GLAD_API_CALL PFNGLMULTITEXCOORDP1UIPROC glad_debug_glMultiTexCoordP1ui;
#define glMultiTexCoordP1ui glad_debug_glMultiTexCoordP1ui
GLAD_API_CALL PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;
GLAD_API_CALL PFNGLMULTITEXCOORDP1UIVPROC glad_debug_glMultiTexCoordP1uiv;
#define glMultiTexCoordP1uiv glad_debug_glMultiTexCoordP1uiv
GLAD_API_CALL PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;
GLAD_API_CALL PFNGLMULTITEXCOORDP2UIPROC glad_debug_glMultiTexCoordP2ui;
#define glMultiTexCoordP2ui glad_debug_glMultiTexCoordP2ui
GLAD_API_CALL PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;
GLAD_API_CALL PFNGLMULTITEXCOORDP2UIVPROC glad_debug_glMultiTexCoordP2uiv;
#define glMultiTexCoordP2uiv glad_debug_glMultiTexCoordP2uiv
GLAD_API_CALL PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;
GLAD_API_CALL PFNGLMULTITEXCOORDP3UIPROC glad_debug_glMultiTexCoordP3ui;
#define glMultiTexCoordP3ui glad_debug_glMultiTexCoordP3ui
GLAD_API_CALL PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;
GLAD_API_CALL PFNGLMULTITEXCOORDP3UIVPROC glad_debug_glMultiTexCoordP3uiv;
#define glMultiTexCoordP3uiv glad_debug_glMultiTexCoordP3uiv
GLAD_API_CALL PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;
GLAD_API_CALL PFNGLMULTITEXCOORDP4UIPROC glad_debug_glMultiTexCoordP4ui;
#define glMultiTexCoordP4ui glad_debug_glMultiTexCoordP4ui
GLAD_API_CALL PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;
GLAD_API_CALL PFNGLMULTITEXCOORDP4UIVPROC glad_debug_glMultiTexCoordP4uiv;
#define glMultiTexCoordP4uiv glad_debug_glMultiTexCoordP4uiv
GLAD_API_CALL PFNGLNAMEDBUFFERDATAPROC glad_glNamedBufferData;
GLAD_API_CALL PFNGLNAMEDBUFFERDATAPROC glad_debug_glNamedBufferData;
#define glNamedBufferData glad_debug_glNamedBufferData
GLAD_API_CALL PFNGLNAMEDBUFFERSTORAGEPROC glad_glNamedBufferStorage;
GLAD_API_CALL PFNGLNAMEDBUFFERSTORAGEPROC glad_debug_glNamedBufferStorage;
#define glNamedBufferStorage glad_debug_glNamedBufferStorage
GLAD_API_CALL PFNGLNAMEDBUFFERSUBDATAPROC glad_glNamedBufferSubData;
GLAD_API_CALL PFNGLNAMEDBUFFERSUBDATAPROC glad_debug_glNamedBufferSubData;
#define glNamedBufferSubData glad_debug_glNamedBufferSubData
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_glNamedFramebufferDrawBuffer;
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_debug_glNamedFramebufferDrawBuffer;
#define glNamedFramebufferDrawBuffer glad_debug_glNamedFramebufferDrawBuffer
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_glNamedFramebufferDrawBuffers;
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_debug_glNamedFramebufferDrawBuffers;
#define glNamedFramebufferDrawBuffers glad_debug_glNamedFramebufferDrawBuffers
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_glNamedFramebufferParameteri;
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_debug_glNamedFramebufferParameteri;
#define glNamedFramebufferParameteri glad_debug_glNamedFramebufferParameteri
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_glNamedFramebufferReadBuffer;
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_debug_glNamedFramebufferReadBuffer;
#define glNamedFramebufferReadBuffer glad_debug_glNamedFramebufferReadBuffer
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_glNamedFramebufferRenderbuffer;
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_debug_glNamedFramebufferRenderbuffer;
#define glNamedFramebufferRenderbuffer glad_debug_glNamedFramebufferRenderbuffer
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_glNamedFramebufferTexture;
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_debug_glNamedFramebufferTexture;
#define glNamedFramebufferTexture glad_debug_glNamedFramebufferTexture
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_glNamedFramebufferTextureLayer;
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_debug_glNamedFramebufferTextureLayer;
#define glNamedFramebufferTextureLayer glad_debug_glNamedFramebufferTextureLayer
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_glNamedRenderbufferStorage;
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_debug_glNamedRenderbufferStorage;
#define glNamedRenderbufferStorage glad_debug_glNamedRenderbufferStorage
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glNamedRenderbufferStorageMultisample;
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_debug_glNamedRenderbufferStorageMultisample;
#define glNamedRenderbufferStorageMultisample glad_debug_glNamedRenderbufferStorageMultisample
GLAD_API_CALL PFNGLNEWLISTPROC glad_glNewList;
GLAD_API_CALL PFNGLNEWLISTPROC glad_debug_glNewList;
#define glNewList glad_debug_glNewList
GLAD_API_CALL PFNGLNORMAL3BPROC glad_glNormal3b;
GLAD_API_CALL PFNGLNORMAL3BPROC glad_debug_glNormal3b;
#define glNormal3b glad_debug_glNormal3b
GLAD_API_CALL PFNGLNORMAL3BVPROC glad_glNormal3bv;
GLAD_API_CALL PFNGLNORMAL3BVPROC glad_debug_glNormal3bv;
#define glNormal3bv glad_debug_glNormal3bv
GLAD_API_CALL PFNGLNORMAL3DPROC glad_glNormal3d;
GLAD_API_CALL PFNGLNORMAL3DPROC glad_debug_glNormal3d;
#define glNormal3d glad_debug_glNormal3d
GLAD_API_CALL PFNGLNORMAL3DVPROC glad_glNormal3dv;
GLAD_API_CALL PFNGLNORMAL3DVPROC glad_debug_glNormal3dv;
#define glNormal3dv glad_debug_glNormal3dv
GLAD_API_CALL PFNGLNORMAL3FPROC glad_glNormal3f;
GLAD_API_CALL PFNGLNORMAL3FPROC glad_debug_glNormal3f;
#define glNormal3f glad_debug_glNormal3f
GLAD_API_CALL PFNGLNORMAL3FVPROC glad_glNormal3fv;
GLAD_API_CALL PFNGLNORMAL3FVPROC glad_debug_glNormal3fv;
#define glNormal3fv glad_debug_glNormal3fv
GLAD_API_CALL PFNGLNORMAL3IPROC glad_glNormal3i;
GLAD_API_CALL PFNGLNORMAL3IPROC glad_debug_glNormal3i;
#define glNormal3i glad_debug_glNormal3i
GLAD_API_CALL PFNGLNORMAL3IVPROC glad_glNormal3iv;
GLAD_API_CALL PFNGLNORMAL3IVPROC glad_debug_glNormal3iv;
#define glNormal3iv glad_debug_glNormal3iv
GLAD_API_CALL PFNGLNORMAL3SPROC glad_glNormal3s;
GLAD_API_CALL PFNGLNORMAL3SPROC glad_debug_glNormal3s;
#define glNormal3s glad_debug_glNormal3s
GLAD_API_CALL PFNGLNORMAL3SVPROC glad_glNormal3sv;
GLAD_API_CALL PFNGLNORMAL3SVPROC glad_debug_glNormal3sv;
#define glNormal3sv glad_debug_glNormal3sv
GLAD_API_CALL PFNGLNORMALP3UIPROC glad_glNormalP3ui;
GLAD_API_CALL PFNGLNORMALP3UIPROC glad_debug_glNormalP3ui;
#define glNormalP3ui glad_debug_glNormalP3ui
GLAD_API_CALL PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;
GLAD_API_CALL PFNGLNORMALP3UIVPROC glad_debug_glNormalP3uiv;
#define glNormalP3uiv glad_debug_glNormalP3uiv
GLAD_API_CALL PFNGLNORMALPOINTERPROC glad_glNormalPointer;
GLAD_API_CALL PFNGLNORMALPOINTERPROC glad_debug_glNormalPointer;
#define glNormalPointer glad_debug_glNormalPointer
GLAD_API_CALL PFNGLOBJECTLABELPROC glad_glObjectLabel;
GLAD_API_CALL PFNGLOBJECTLABELPROC glad_debug_glObjectLabel;
#define glObjectLabel glad_debug_glObjectLabel
GLAD_API_CALL PFNGLOBJECTPTRLABELPROC glad_glObjectPtrLabel;
GLAD_API_CALL PFNGLOBJECTPTRLABELPROC glad_debug_glObjectPtrLabel;
#define glObjectPtrLabel glad_debug_glObjectPtrLabel
GLAD_API_CALL PFNGLORTHOPROC glad_glOrtho;
GLAD_API_CALL PFNGLORTHOPROC glad_debug_glOrtho;
#define glOrtho glad_debug_glOrtho
GLAD_API_CALL PFNGLPASSTHROUGHPROC glad_glPassThrough;
GLAD_API_CALL PFNGLPASSTHROUGHPROC glad_debug_glPassThrough;
#define glPassThrough glad_debug_glPassThrough
GLAD_API_CALL PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;
GLAD_API_CALL PFNGLPATCHPARAMETERFVPROC glad_debug_glPatchParameterfv;
#define glPatchParameterfv glad_debug_glPatchParameterfv
GLAD_API_CALL PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;
GLAD_API_CALL PFNGLPATCHPARAMETERIPROC glad_debug_glPatchParameteri;
#define glPatchParameteri glad_debug_glPatchParameteri
GLAD_API_CALL PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;
GLAD_API_CALL PFNGLPAUSETRANSFORMFEEDBACKPROC glad_debug_glPauseTransformFeedback;
#define glPauseTransformFeedback glad_debug_glPauseTransformFeedback
GLAD_API_CALL PFNGLPIXELMAPFVPROC glad_glPixelMapfv;
GLAD_API_CALL PFNGLPIXELMAPFVPROC glad_debug_glPixelMapfv;
#define glPixelMapfv glad_debug_glPixelMapfv
GLAD_API_CALL PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv;
GLAD_API_CALL PFNGLPIXELMAPUIVPROC glad_debug_glPixelMapuiv;
#define glPixelMapuiv glad_debug_glPixelMapuiv
GLAD_API_CALL PFNGLPIXELMAPUSVPROC glad_glPixelMapusv;
GLAD_API_CALL PFNGLPIXELMAPUSVPROC glad_debug_glPixelMapusv;
#define glPixelMapusv glad_debug_glPixelMapusv
GLAD_API_CALL PFNGLPIXELSTOREFPROC glad_glPixelStoref;
GLAD_API_CALL PFNGLPIXELSTOREFPROC glad_debug_glPixelStoref;
#define glPixelStoref glad_debug_glPixelStoref
GLAD_API_CALL PFNGLPIXELSTOREIPROC glad_glPixelStorei;
GLAD_API_CALL PFNGLPIXELSTOREIPROC glad_debug_glPixelStorei;
#define glPixelStorei glad_debug_glPixelStorei
GLAD_API_CALL PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf;
GLAD_API_CALL PFNGLPIXELTRANSFERFPROC glad_debug_glPixelTransferf;
#define glPixelTransferf glad_debug_glPixelTransferf
GLAD_API_CALL PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi;
GLAD_API_CALL PFNGLPIXELTRANSFERIPROC glad_debug_glPixelTransferi;
#define glPixelTransferi glad_debug_glPixelTransferi
GLAD_API_CALL PFNGLPIXELZOOMPROC glad_glPixelZoom;
GLAD_API_CALL PFNGLPIXELZOOMPROC glad_debug_glPixelZoom;
#define glPixelZoom glad_debug_glPixelZoom
GLAD_API_CALL PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;
GLAD_API_CALL PFNGLPOINTPARAMETERFPROC glad_debug_glPointParameterf;
#define glPointParameterf glad_debug_glPointParameterf
GLAD_API_CALL PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;
GLAD_API_CALL PFNGLPOINTPARAMETERFVPROC glad_debug_glPointParameterfv;
#define glPointParameterfv glad_debug_glPointParameterfv
GLAD_API_CALL PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;
GLAD_API_CALL PFNGLPOINTPARAMETERIPROC glad_debug_glPointParameteri;
#define glPointParameteri glad_debug_glPointParameteri
GLAD_API_CALL PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;
GLAD_API_CALL PFNGLPOINTPARAMETERIVPROC glad_debug_glPointParameteriv;
#define glPointParameteriv glad_debug_glPointParameteriv
GLAD_API_CALL PFNGLPOINTSIZEPROC glad_glPointSize;
GLAD_API_CALL PFNGLPOINTSIZEPROC glad_debug_glPointSize;
#define glPointSize glad_debug_glPointSize
GLAD_API_CALL PFNGLPOLYGONMODEPROC glad_glPolygonMode;
GLAD_API_CALL PFNGLPOLYGONMODEPROC glad_debug_glPolygonMode;
#define glPolygonMode glad_debug_glPolygonMode
GLAD_API_CALL PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
GLAD_API_CALL PFNGLPOLYGONOFFSETPROC glad_debug_glPolygonOffset;
#define glPolygonOffset glad_debug_glPolygonOffset
GLAD_API_CALL PFNGLPOLYGONOFFSETCLAMPPROC glad_glPolygonOffsetClamp;
GLAD_API_CALL PFNGLPOLYGONOFFSETCLAMPPROC glad_debug_glPolygonOffsetClamp;
#define glPolygonOffsetClamp glad_debug_glPolygonOffsetClamp
GLAD_API_CALL PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple;
GLAD_API_CALL PFNGLPOLYGONSTIPPLEPROC glad_debug_glPolygonStipple;
#define glPolygonStipple glad_debug_glPolygonStipple
GLAD_API_CALL PFNGLPOPATTRIBPROC glad_glPopAttrib;
GLAD_API_CALL PFNGLPOPATTRIBPROC glad_debug_glPopAttrib;
#define glPopAttrib glad_debug_glPopAttrib
GLAD_API_CALL PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib;
GLAD_API_CALL PFNGLPOPCLIENTATTRIBPROC glad_debug_glPopClientAttrib;
#define glPopClientAttrib glad_debug_glPopClientAttrib
GLAD_API_CALL PFNGLPOPDEBUGGROUPPROC glad_glPopDebugGroup;
GLAD_API_CALL PFNGLPOPDEBUGGROUPPROC glad_debug_glPopDebugGroup;
#define glPopDebugGroup glad_debug_glPopDebugGroup
GLAD_API_CALL PFNGLPOPMATRIXPROC glad_glPopMatrix;
GLAD_API_CALL PFNGLPOPMATRIXPROC glad_debug_glPopMatrix;
#define glPopMatrix glad_debug_glPopMatrix
GLAD_API_CALL PFNGLPOPNAMEPROC glad_glPopName;
GLAD_API_CALL PFNGLPOPNAMEPROC glad_debug_glPopName;
#define glPopName glad_debug_glPopName
GLAD_API_CALL PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;
GLAD_API_CALL PFNGLPRIMITIVERESTARTINDEXPROC glad_debug_glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex glad_debug_glPrimitiveRestartIndex
GLAD_API_CALL PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures;
GLAD_API_CALL PFNGLPRIORITIZETEXTURESPROC glad_debug_glPrioritizeTextures;
#define glPrioritizeTextures glad_debug_glPrioritizeTextures
GLAD_API_CALL PFNGLPROGRAMBINARYPROC glad_glProgramBinary;
GLAD_API_CALL PFNGLPROGRAMBINARYPROC glad_debug_glProgramBinary;
#define glProgramBinary glad_debug_glProgramBinary
GLAD_API_CALL PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;
GLAD_API_CALL PFNGLPROGRAMPARAMETERIPROC glad_debug_glProgramParameteri;
#define glProgramParameteri glad_debug_glProgramParameteri
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DPROC glad_debug_glProgramUniform1d;
#define glProgramUniform1d glad_debug_glProgramUniform1d
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DVPROC glad_debug_glProgramUniform1dv;
#define glProgramUniform1dv glad_debug_glProgramUniform1dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FPROC glad_debug_glProgramUniform1f;
#define glProgramUniform1f glad_debug_glProgramUniform1f
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVPROC glad_debug_glProgramUniform1fv;
#define glProgramUniform1fv glad_debug_glProgramUniform1fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IPROC glad_debug_glProgramUniform1i;
#define glProgramUniform1i glad_debug_glProgramUniform1i
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVPROC glad_debug_glProgramUniform1iv;
#define glProgramUniform1iv glad_debug_glProgramUniform1iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIPROC glad_debug_glProgramUniform1ui;
#define glProgramUniform1ui glad_debug_glProgramUniform1ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVPROC glad_debug_glProgramUniform1uiv;
#define glProgramUniform1uiv glad_debug_glProgramUniform1uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DPROC glad_debug_glProgramUniform2d;
#define glProgramUniform2d glad_debug_glProgramUniform2d
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DVPROC glad_debug_glProgramUniform2dv;
#define glProgramUniform2dv glad_debug_glProgramUniform2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FPROC glad_debug_glProgramUniform2f;
#define glProgramUniform2f glad_debug_glProgramUniform2f
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVPROC glad_debug_glProgramUniform2fv;
#define glProgramUniform2fv glad_debug_glProgramUniform2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IPROC glad_debug_glProgramUniform2i;
#define glProgramUniform2i glad_debug_glProgramUniform2i
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVPROC glad_debug_glProgramUniform2iv;
#define glProgramUniform2iv glad_debug_glProgramUniform2iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIPROC glad_debug_glProgramUniform2ui;
#define glProgramUniform2ui glad_debug_glProgramUniform2ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVPROC glad_debug_glProgramUniform2uiv;
#define glProgramUniform2uiv glad_debug_glProgramUniform2uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DPROC glad_debug_glProgramUniform3d;
#define glProgramUniform3d glad_debug_glProgramUniform3d
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DVPROC glad_debug_glProgramUniform3dv;
#define glProgramUniform3dv glad_debug_glProgramUniform3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FPROC glad_debug_glProgramUniform3f;
#define glProgramUniform3f glad_debug_glProgramUniform3f
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVPROC glad_debug_glProgramUniform3fv;
#define glProgramUniform3fv glad_debug_glProgramUniform3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IPROC glad_debug_glProgramUniform3i;
#define glProgramUniform3i glad_debug_glProgramUniform3i
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVPROC glad_debug_glProgramUniform3iv;
#define glProgramUniform3iv glad_debug_glProgramUniform3iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIPROC glad_debug_glProgramUniform3ui;
#define glProgramUniform3ui glad_debug_glProgramUniform3ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVPROC glad_debug_glProgramUniform3uiv;
#define glProgramUniform3uiv glad_debug_glProgramUniform3uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DPROC glad_debug_glProgramUniform4d;
#define glProgramUniform4d glad_debug_glProgramUniform4d
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DVPROC glad_debug_glProgramUniform4dv;
#define glProgramUniform4dv glad_debug_glProgramUniform4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FPROC glad_debug_glProgramUniform4f;
#define glProgramUniform4f glad_debug_glProgramUniform4f
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVPROC glad_debug_glProgramUniform4fv;
#define glProgramUniform4fv glad_debug_glProgramUniform4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IPROC glad_debug_glProgramUniform4i;
#define glProgramUniform4i glad_debug_glProgramUniform4i
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVPROC glad_debug_glProgramUniform4iv;
#define glProgramUniform4iv glad_debug_glProgramUniform4iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIPROC glad_debug_glProgramUniform4ui;
#define glProgramUniform4ui glad_debug_glProgramUniform4ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVPROC glad_debug_glProgramUniform4uiv;
#define glProgramUniform4uiv glad_debug_glProgramUniform4uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_debug_glProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv glad_debug_glProgramUniformMatrix2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_debug_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv glad_debug_glProgramUniformMatrix2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_debug_glProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv glad_debug_glProgramUniformMatrix2x3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_debug_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv glad_debug_glProgramUniformMatrix2x3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_debug_glProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv glad_debug_glProgramUniformMatrix2x4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_debug_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv glad_debug_glProgramUniformMatrix2x4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_debug_glProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv glad_debug_glProgramUniformMatrix3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_debug_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv glad_debug_glProgramUniformMatrix3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_debug_glProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv glad_debug_glProgramUniformMatrix3x2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_debug_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv glad_debug_glProgramUniformMatrix3x2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_debug_glProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv glad_debug_glProgramUniformMatrix3x4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_debug_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv glad_debug_glProgramUniformMatrix3x4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_debug_glProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv glad_debug_glProgramUniformMatrix4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_debug_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv glad_debug_glProgramUniformMatrix4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_debug_glProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv glad_debug_glProgramUniformMatrix4x2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_debug_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv glad_debug_glProgramUniformMatrix4x2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_debug_glProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv glad_debug_glProgramUniformMatrix4x3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_debug_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv glad_debug_glProgramUniformMatrix4x3fv
GLAD_API_CALL PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;
GLAD_API_CALL PFNGLPROVOKINGVERTEXPROC glad_debug_glProvokingVertex;
#define glProvokingVertex glad_debug_glProvokingVertex
GLAD_API_CALL PFNGLPUSHATTRIBPROC glad_glPushAttrib;
GLAD_API_CALL PFNGLPUSHATTRIBPROC glad_debug_glPushAttrib;
#define glPushAttrib glad_debug_glPushAttrib
GLAD_API_CALL PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib;
GLAD_API_CALL PFNGLPUSHCLIENTATTRIBPROC glad_debug_glPushClientAttrib;
#define glPushClientAttrib glad_debug_glPushClientAttrib
GLAD_API_CALL PFNGLPUSHDEBUGGROUPPROC glad_glPushDebugGroup;
GLAD_API_CALL PFNGLPUSHDEBUGGROUPPROC glad_debug_glPushDebugGroup;
#define glPushDebugGroup glad_debug_glPushDebugGroup
GLAD_API_CALL PFNGLPUSHMATRIXPROC glad_glPushMatrix;
GLAD_API_CALL PFNGLPUSHMATRIXPROC glad_debug_glPushMatrix;
#define glPushMatrix glad_debug_glPushMatrix
GLAD_API_CALL PFNGLPUSHNAMEPROC glad_glPushName;
GLAD_API_CALL PFNGLPUSHNAMEPROC glad_debug_glPushName;
#define glPushName glad_debug_glPushName
GLAD_API_CALL PFNGLQUERYCOUNTERPROC glad_glQueryCounter;
GLAD_API_CALL PFNGLQUERYCOUNTERPROC glad_debug_glQueryCounter;
#define glQueryCounter glad_debug_glQueryCounter
GLAD_API_CALL PFNGLRASTERPOS2DPROC glad_glRasterPos2d;
GLAD_API_CALL PFNGLRASTERPOS2DPROC glad_debug_glRasterPos2d;
#define glRasterPos2d glad_debug_glRasterPos2d
GLAD_API_CALL PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv;
GLAD_API_CALL PFNGLRASTERPOS2DVPROC glad_debug_glRasterPos2dv;
#define glRasterPos2dv glad_debug_glRasterPos2dv
GLAD_API_CALL PFNGLRASTERPOS2FPROC glad_glRasterPos2f;
GLAD_API_CALL PFNGLRASTERPOS2FPROC glad_debug_glRasterPos2f;
#define glRasterPos2f glad_debug_glRasterPos2f
GLAD_API_CALL PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv;
GLAD_API_CALL PFNGLRASTERPOS2FVPROC glad_debug_glRasterPos2fv;
#define glRasterPos2fv glad_debug_glRasterPos2fv
GLAD_API_CALL PFNGLRASTERPOS2IPROC glad_glRasterPos2i;
GLAD_API_CALL PFNGLRASTERPOS2IPROC glad_debug_glRasterPos2i;
#define glRasterPos2i glad_debug_glRasterPos2i
GLAD_API_CALL PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv;
GLAD_API_CALL PFNGLRASTERPOS2IVPROC glad_debug_glRasterPos2iv;
#define glRasterPos2iv glad_debug_glRasterPos2iv
GLAD_API_CALL PFNGLRASTERPOS2SPROC glad_glRasterPos2s;
GLAD_API_CALL PFNGLRASTERPOS2SPROC glad_debug_glRasterPos2s;
#define glRasterPos2s glad_debug_glRasterPos2s
GLAD_API_CALL PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv;
GLAD_API_CALL PFNGLRASTERPOS2SVPROC glad_debug_glRasterPos2sv;
#define glRasterPos2sv glad_debug_glRasterPos2sv
GLAD_API_CALL PFNGLRASTERPOS3DPROC glad_glRasterPos3d;
GLAD_API_CALL PFNGLRASTERPOS3DPROC glad_debug_glRasterPos3d;
#define glRasterPos3d glad_debug_glRasterPos3d
GLAD_API_CALL PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv;
GLAD_API_CALL PFNGLRASTERPOS3DVPROC glad_debug_glRasterPos3dv;
#define glRasterPos3dv glad_debug_glRasterPos3dv
GLAD_API_CALL PFNGLRASTERPOS3FPROC glad_glRasterPos3f;
GLAD_API_CALL PFNGLRASTERPOS3FPROC glad_debug_glRasterPos3f;
#define glRasterPos3f glad_debug_glRasterPos3f
GLAD_API_CALL PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv;
GLAD_API_CALL PFNGLRASTERPOS3FVPROC glad_debug_glRasterPos3fv;
#define glRasterPos3fv glad_debug_glRasterPos3fv
GLAD_API_CALL PFNGLRASTERPOS3IPROC glad_glRasterPos3i;
GLAD_API_CALL PFNGLRASTERPOS3IPROC glad_debug_glRasterPos3i;
#define glRasterPos3i glad_debug_glRasterPos3i
GLAD_API_CALL PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv;
GLAD_API_CALL PFNGLRASTERPOS3IVPROC glad_debug_glRasterPos3iv;
#define glRasterPos3iv glad_debug_glRasterPos3iv
GLAD_API_CALL PFNGLRASTERPOS3SPROC glad_glRasterPos3s;
GLAD_API_CALL PFNGLRASTERPOS3SPROC glad_debug_glRasterPos3s;
#define glRasterPos3s glad_debug_glRasterPos3s
GLAD_API_CALL PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv;
GLAD_API_CALL PFNGLRASTERPOS3SVPROC glad_debug_glRasterPos3sv;
#define glRasterPos3sv glad_debug_glRasterPos3sv
GLAD_API_CALL PFNGLRASTERPOS4DPROC glad_glRasterPos4d;
GLAD_API_CALL PFNGLRASTERPOS4DPROC glad_debug_glRasterPos4d;
#define glRasterPos4d glad_debug_glRasterPos4d
GLAD_API_CALL PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv;
GLAD_API_CALL PFNGLRASTERPOS4DVPROC glad_debug_glRasterPos4dv;
#define glRasterPos4dv glad_debug_glRasterPos4dv
GLAD_API_CALL PFNGLRASTERPOS4FPROC glad_glRasterPos4f;
GLAD_API_CALL PFNGLRASTERPOS4FPROC glad_debug_glRasterPos4f;
#define glRasterPos4f glad_debug_glRasterPos4f
GLAD_API_CALL PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv;
GLAD_API_CALL PFNGLRASTERPOS4FVPROC glad_debug_glRasterPos4fv;
#define glRasterPos4fv glad_debug_glRasterPos4fv
GLAD_API_CALL PFNGLRASTERPOS4IPROC glad_glRasterPos4i;
GLAD_API_CALL PFNGLRASTERPOS4IPROC glad_debug_glRasterPos4i;
#define glRasterPos4i glad_debug_glRasterPos4i
GLAD_API_CALL PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv;
GLAD_API_CALL PFNGLRASTERPOS4IVPROC glad_debug_glRasterPos4iv;
#define glRasterPos4iv glad_debug_glRasterPos4iv
GLAD_API_CALL PFNGLRASTERPOS4SPROC glad_glRasterPos4s;
GLAD_API_CALL PFNGLRASTERPOS4SPROC glad_debug_glRasterPos4s;
#define glRasterPos4s glad_debug_glRasterPos4s
GLAD_API_CALL PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv;
GLAD_API_CALL PFNGLRASTERPOS4SVPROC glad_debug_glRasterPos4sv;
#define glRasterPos4sv glad_debug_glRasterPos4sv
GLAD_API_CALL PFNGLREADBUFFERPROC glad_glReadBuffer;
GLAD_API_CALL PFNGLREADBUFFERPROC glad_debug_glReadBuffer;
#define glReadBuffer glad_debug_glReadBuffer
GLAD_API_CALL PFNGLREADPIXELSPROC glad_glReadPixels;
GLAD_API_CALL PFNGLREADPIXELSPROC glad_debug_glReadPixels;
#define glReadPixels glad_debug_glReadPixels
GLAD_API_CALL PFNGLREADNPIXELSPROC glad_glReadnPixels;
GLAD_API_CALL PFNGLREADNPIXELSPROC glad_debug_glReadnPixels;
#define glReadnPixels glad_debug_glReadnPixels
GLAD_API_CALL PFNGLRECTDPROC glad_glRectd;
GLAD_API_CALL PFNGLRECTDPROC glad_debug_glRectd;
#define glRectd glad_debug_glRectd
GLAD_API_CALL PFNGLRECTDVPROC glad_glRectdv;
GLAD_API_CALL PFNGLRECTDVPROC glad_debug_glRectdv;
#define glRectdv glad_debug_glRectdv
GLAD_API_CALL PFNGLRECTFPROC glad_glRectf;
GLAD_API_CALL PFNGLRECTFPROC glad_debug_glRectf;
#define glRectf glad_debug_glRectf
GLAD_API_CALL PFNGLRECTFVPROC glad_glRectfv;
GLAD_API_CALL PFNGLRECTFVPROC glad_debug_glRectfv;
#define glRectfv glad_debug_glRectfv
GLAD_API_CALL PFNGLRECTIPROC glad_glRecti;
GLAD_API_CALL PFNGLRECTIPROC glad_debug_glRecti;
#define glRecti glad_debug_glRecti
GLAD_API_CALL PFNGLRECTIVPROC glad_glRectiv;
GLAD_API_CALL PFNGLRECTIVPROC glad_debug_glRectiv;
#define glRectiv glad_debug_glRectiv
GLAD_API_CALL PFNGLRECTSPROC glad_glRects;
GLAD_API_CALL PFNGLRECTSPROC glad_debug_glRects;
#define glRects glad_debug_glRects
GLAD_API_CALL PFNGLRECTSVPROC glad_glRectsv;
GLAD_API_CALL PFNGLRECTSVPROC glad_debug_glRectsv;
#define glRectsv glad_debug_glRectsv
GLAD_API_CALL PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;
GLAD_API_CALL PFNGLRELEASESHADERCOMPILERPROC glad_debug_glReleaseShaderCompiler;
#define glReleaseShaderCompiler glad_debug_glReleaseShaderCompiler
GLAD_API_CALL PFNGLRENDERMODEPROC glad_glRenderMode;
GLAD_API_CALL PFNGLRENDERMODEPROC glad_debug_glRenderMode;
#define glRenderMode glad_debug_glRenderMode
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEPROC glad_debug_glRenderbufferStorage;
#define glRenderbufferStorage glad_debug_glRenderbufferStorage
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_debug_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample glad_debug_glRenderbufferStorageMultisample
GLAD_API_CALL PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;
GLAD_API_CALL PFNGLRESUMETRANSFORMFEEDBACKPROC glad_debug_glResumeTransformFeedback;
#define glResumeTransformFeedback glad_debug_glResumeTransformFeedback
GLAD_API_CALL PFNGLROTATEDPROC glad_glRotated;
GLAD_API_CALL PFNGLROTATEDPROC glad_debug_glRotated;
#define glRotated glad_debug_glRotated
GLAD_API_CALL PFNGLROTATEFPROC glad_glRotatef;
GLAD_API_CALL PFNGLROTATEFPROC glad_debug_glRotatef;
#define glRotatef glad_debug_glRotatef
GLAD_API_CALL PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;
GLAD_API_CALL PFNGLSAMPLECOVERAGEPROC glad_debug_glSampleCoverage;
#define glSampleCoverage glad_debug_glSampleCoverage
GLAD_API_CALL PFNGLSAMPLEMASKIPROC glad_glSampleMaski;
GLAD_API_CALL PFNGLSAMPLEMASKIPROC glad_debug_glSampleMaski;
#define glSampleMaski glad_debug_glSampleMaski
GLAD_API_CALL PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;
GLAD_API_CALL PFNGLSAMPLERPARAMETERIIVPROC glad_debug_glSamplerParameterIiv;
#define glSamplerParameterIiv glad_debug_glSamplerParameterIiv
GLAD_API_CALL PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;
GLAD_API_CALL PFNGLSAMPLERPARAMETERIUIVPROC glad_debug_glSamplerParameterIuiv;
#define glSamplerParameterIuiv glad_debug_glSamplerParameterIuiv
GLAD_API_CALL PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;
GLAD_API_CALL PFNGLSAMPLERPARAMETERFPROC glad_debug_glSamplerParameterf;
#define glSamplerParameterf glad_debug_glSamplerParameterf
GLAD_API_CALL PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;
GLAD_API_CALL PFNGLSAMPLERPARAMETERFVPROC glad_debug_glSamplerParameterfv;
#define glSamplerParameterfv glad_debug_glSamplerParameterfv
GLAD_API_CALL PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;
GLAD_API_CALL PFNGLSAMPLERPARAMETERIPROC glad_debug_glSamplerParameteri;
#define glSamplerParameteri glad_debug_glSamplerParameteri
GLAD_API_CALL PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;
GLAD_API_CALL PFNGLSAMPLERPARAMETERIVPROC glad_debug_glSamplerParameteriv;
#define glSamplerParameteriv glad_debug_glSamplerParameteriv
GLAD_API_CALL PFNGLSCALEDPROC glad_glScaled;
GLAD_API_CALL PFNGLSCALEDPROC glad_debug_glScaled;
#define glScaled glad_debug_glScaled
GLAD_API_CALL PFNGLSCALEFPROC glad_glScalef;
GLAD_API_CALL PFNGLSCALEFPROC glad_debug_glScalef;
#define glScalef glad_debug_glScalef
GLAD_API_CALL PFNGLSCISSORPROC glad_glScissor;
GLAD_API_CALL PFNGLSCISSORPROC glad_debug_glScissor;
#define glScissor glad_debug_glScissor
GLAD_API_CALL PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;
GLAD_API_CALL PFNGLSCISSORARRAYVPROC glad_debug_glScissorArrayv;
#define glScissorArrayv glad_debug_glScissorArrayv
GLAD_API_CALL PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;
GLAD_API_CALL PFNGLSCISSORINDEXEDPROC glad_debug_glScissorIndexed;
#define glScissorIndexed glad_debug_glScissorIndexed
GLAD_API_CALL PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;
GLAD_API_CALL PFNGLSCISSORINDEXEDVPROC glad_debug_glScissorIndexedv;
#define glScissorIndexedv glad_debug_glScissorIndexedv
GLAD_API_CALL PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b;
GLAD_API_CALL PFNGLSECONDARYCOLOR3BPROC glad_debug_glSecondaryColor3b;
#define glSecondaryColor3b glad_debug_glSecondaryColor3b
GLAD_API_CALL PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv;
GLAD_API_CALL PFNGLSECONDARYCOLOR3BVPROC glad_debug_glSecondaryColor3bv;
#define glSecondaryColor3bv glad_debug_glSecondaryColor3bv
GLAD_API_CALL PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d;
GLAD_API_CALL PFNGLSECONDARYCOLOR3DPROC glad_debug_glSecondaryColor3d;
#define glSecondaryColor3d glad_debug_glSecondaryColor3d
GLAD_API_CALL PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv;
GLAD_API_CALL PFNGLSECONDARYCOLOR3DVPROC glad_debug_glSecondaryColor3dv;
#define glSecondaryColor3dv glad_debug_glSecondaryColor3dv
GLAD_API_CALL PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f;
GLAD_API_CALL PFNGLSECONDARYCOLOR3FPROC glad_debug_glSecondaryColor3f;
#define glSecondaryColor3f glad_debug_glSecondaryColor3f
GLAD_API_CALL PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv;
GLAD_API_CALL PFNGLSECONDARYCOLOR3FVPROC glad_debug_glSecondaryColor3fv;
#define glSecondaryColor3fv glad_debug_glSecondaryColor3fv
GLAD_API_CALL PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i;
GLAD_API_CALL PFNGLSECONDARYCOLOR3IPROC glad_debug_glSecondaryColor3i;
#define glSecondaryColor3i glad_debug_glSecondaryColor3i
GLAD_API_CALL PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv;
GLAD_API_CALL PFNGLSECONDARYCOLOR3IVPROC glad_debug_glSecondaryColor3iv;
#define glSecondaryColor3iv glad_debug_glSecondaryColor3iv
GLAD_API_CALL PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s;
GLAD_API_CALL PFNGLSECONDARYCOLOR3SPROC glad_debug_glSecondaryColor3s;
#define glSecondaryColor3s glad_debug_glSecondaryColor3s
GLAD_API_CALL PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv;
GLAD_API_CALL PFNGLSECONDARYCOLOR3SVPROC glad_debug_glSecondaryColor3sv;
#define glSecondaryColor3sv glad_debug_glSecondaryColor3sv
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub;
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBPROC glad_debug_glSecondaryColor3ub;
#define glSecondaryColor3ub glad_debug_glSecondaryColor3ub
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv;
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBVPROC glad_debug_glSecondaryColor3ubv;
#define glSecondaryColor3ubv glad_debug_glSecondaryColor3ubv
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui;
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIPROC glad_debug_glSecondaryColor3ui;
#define glSecondaryColor3ui glad_debug_glSecondaryColor3ui
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv;
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIVPROC glad_debug_glSecondaryColor3uiv;
#define glSecondaryColor3uiv glad_debug_glSecondaryColor3uiv
GLAD_API_CALL PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us;
GLAD_API_CALL PFNGLSECONDARYCOLOR3USPROC glad_debug_glSecondaryColor3us;
#define glSecondaryColor3us glad_debug_glSecondaryColor3us
GLAD_API_CALL PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv;
GLAD_API_CALL PFNGLSECONDARYCOLOR3USVPROC glad_debug_glSecondaryColor3usv;
#define glSecondaryColor3usv glad_debug_glSecondaryColor3usv
GLAD_API_CALL PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;
GLAD_API_CALL PFNGLSECONDARYCOLORP3UIPROC glad_debug_glSecondaryColorP3ui;
#define glSecondaryColorP3ui glad_debug_glSecondaryColorP3ui
GLAD_API_CALL PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;
GLAD_API_CALL PFNGLSECONDARYCOLORP3UIVPROC glad_debug_glSecondaryColorP3uiv;
#define glSecondaryColorP3uiv glad_debug_glSecondaryColorP3uiv
GLAD_API_CALL PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer;
GLAD_API_CALL PFNGLSECONDARYCOLORPOINTERPROC glad_debug_glSecondaryColorPointer;
#define glSecondaryColorPointer glad_debug_glSecondaryColorPointer
GLAD_API_CALL PFNGLSELECTBUFFERPROC glad_glSelectBuffer;
GLAD_API_CALL PFNGLSELECTBUFFERPROC glad_debug_glSelectBuffer;
#define glSelectBuffer glad_debug_glSelectBuffer
GLAD_API_CALL PFNGLSHADEMODELPROC glad_glShadeModel;
GLAD_API_CALL PFNGLSHADEMODELPROC glad_debug_glShadeModel;
#define glShadeModel glad_debug_glShadeModel
GLAD_API_CALL PFNGLSHADERBINARYPROC glad_glShaderBinary;
GLAD_API_CALL PFNGLSHADERBINARYPROC glad_debug_glShaderBinary;
#define glShaderBinary glad_debug_glShaderBinary
GLAD_API_CALL PFNGLSHADERSOURCEPROC glad_glShaderSource;
GLAD_API_CALL PFNGLSHADERSOURCEPROC glad_debug_glShaderSource;
#define glShaderSource glad_debug_glShaderSource
GLAD_API_CALL PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_glShaderStorageBlockBinding;
GLAD_API_CALL PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_debug_glShaderStorageBlockBinding;
#define glShaderStorageBlockBinding glad_debug_glShaderStorageBlockBinding
GLAD_API_CALL PFNGLSPECIALIZESHADERPROC glad_glSpecializeShader;
GLAD_API_CALL PFNGLSPECIALIZESHADERPROC glad_debug_glSpecializeShader;
#define glSpecializeShader glad_debug_glSpecializeShader
GLAD_API_CALL PFNGLSTENCILFUNCPROC glad_glStencilFunc;
GLAD_API_CALL PFNGLSTENCILFUNCPROC glad_debug_glStencilFunc;
#define glStencilFunc glad_debug_glStencilFunc
GLAD_API_CALL PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;
GLAD_API_CALL PFNGLSTENCILFUNCSEPARATEPROC glad_debug_glStencilFuncSeparate;
#define glStencilFuncSeparate glad_debug_glStencilFuncSeparate
GLAD_API_CALL PFNGLSTENCILMASKPROC glad_glStencilMask;
GLAD_API_CALL PFNGLSTENCILMASKPROC glad_debug_glStencilMask;
#define glStencilMask glad_debug_glStencilMask
GLAD_API_CALL PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;
GLAD_API_CALL PFNGLSTENCILMASKSEPARATEPROC glad_debug_glStencilMaskSeparate;
#define glStencilMaskSeparate glad_debug_glStencilMaskSeparate
GLAD_API_CALL PFNGLSTENCILOPPROC glad_glStencilOp;
GLAD_API_CALL PFNGLSTENCILOPPROC glad_debug_glStencilOp;
#define glStencilOp glad_debug_glStencilOp
GLAD_API_CALL PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;
GLAD_API_CALL PFNGLSTENCILOPSEPARATEPROC glad_debug_glStencilOpSeparate;
#define glStencilOpSeparate glad_debug_glStencilOpSeparate
GLAD_API_CALL PFNGLTEXBUFFERPROC glad_glTexBuffer;
GLAD_API_CALL PFNGLTEXBUFFERPROC glad_debug_glTexBuffer;
#define glTexBuffer glad_debug_glTexBuffer
GLAD_API_CALL PFNGLTEXBUFFERRANGEPROC glad_glTexBufferRange;
GLAD_API_CALL PFNGLTEXBUFFERRANGEPROC glad_debug_glTexBufferRange;
#define glTexBufferRange glad_debug_glTexBufferRange
GLAD_API_CALL PFNGLTEXCOORD1DPROC glad_glTexCoord1d;
GLAD_API_CALL PFNGLTEXCOORD1DPROC glad_debug_glTexCoord1d;
#define glTexCoord1d glad_debug_glTexCoord1d
GLAD_API_CALL PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv;
GLAD_API_CALL PFNGLTEXCOORD1DVPROC glad_debug_glTexCoord1dv;
#define glTexCoord1dv glad_debug_glTexCoord1dv
GLAD_API_CALL PFNGLTEXCOORD1FPROC glad_glTexCoord1f;
GLAD_API_CALL PFNGLTEXCOORD1FPROC glad_debug_glTexCoord1f;
#define glTexCoord1f glad_debug_glTexCoord1f
GLAD_API_CALL PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv;
GLAD_API_CALL PFNGLTEXCOORD1FVPROC glad_debug_glTexCoord1fv;
#define glTexCoord1fv glad_debug_glTexCoord1fv
GLAD_API_CALL PFNGLTEXCOORD1IPROC glad_glTexCoord1i;
GLAD_API_CALL PFNGLTEXCOORD1IPROC glad_debug_glTexCoord1i;
#define glTexCoord1i glad_debug_glTexCoord1i
GLAD_API_CALL PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv;
GLAD_API_CALL PFNGLTEXCOORD1IVPROC glad_debug_glTexCoord1iv;
#define glTexCoord1iv glad_debug_glTexCoord1iv
GLAD_API_CALL PFNGLTEXCOORD1SPROC glad_glTexCoord1s;
GLAD_API_CALL PFNGLTEXCOORD1SPROC glad_debug_glTexCoord1s;
#define glTexCoord1s glad_debug_glTexCoord1s
GLAD_API_CALL PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv;
GLAD_API_CALL PFNGLTEXCOORD1SVPROC glad_debug_glTexCoord1sv;
#define glTexCoord1sv glad_debug_glTexCoord1sv
GLAD_API_CALL PFNGLTEXCOORD2DPROC glad_glTexCoord2d;
GLAD_API_CALL PFNGLTEXCOORD2DPROC glad_debug_glTexCoord2d;
#define glTexCoord2d glad_debug_glTexCoord2d
GLAD_API_CALL PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv;
GLAD_API_CALL PFNGLTEXCOORD2DVPROC glad_debug_glTexCoord2dv;
#define glTexCoord2dv glad_debug_glTexCoord2dv
GLAD_API_CALL PFNGLTEXCOORD2FPROC glad_glTexCoord2f;
GLAD_API_CALL PFNGLTEXCOORD2FPROC glad_debug_glTexCoord2f;
#define glTexCoord2f glad_debug_glTexCoord2f
GLAD_API_CALL PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv;
GLAD_API_CALL PFNGLTEXCOORD2FVPROC glad_debug_glTexCoord2fv;
#define glTexCoord2fv glad_debug_glTexCoord2fv
GLAD_API_CALL PFNGLTEXCOORD2IPROC glad_glTexCoord2i;
GLAD_API_CALL PFNGLTEXCOORD2IPROC glad_debug_glTexCoord2i;
#define glTexCoord2i glad_debug_glTexCoord2i
GLAD_API_CALL PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv;
GLAD_API_CALL PFNGLTEXCOORD2IVPROC glad_debug_glTexCoord2iv;
#define glTexCoord2iv glad_debug_glTexCoord2iv
GLAD_API_CALL PFNGLTEXCOORD2SPROC glad_glTexCoord2s;
GLAD_API_CALL PFNGLTEXCOORD2SPROC glad_debug_glTexCoord2s;
#define glTexCoord2s glad_debug_glTexCoord2s
GLAD_API_CALL PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv;
GLAD_API_CALL PFNGLTEXCOORD2SVPROC glad_debug_glTexCoord2sv;
#define glTexCoord2sv glad_debug_glTexCoord2sv
GLAD_API_CALL PFNGLTEXCOORD3DPROC glad_glTexCoord3d;
GLAD_API_CALL PFNGLTEXCOORD3DPROC glad_debug_glTexCoord3d;
#define glTexCoord3d glad_debug_glTexCoord3d
GLAD_API_CALL PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv;
GLAD_API_CALL PFNGLTEXCOORD3DVPROC glad_debug_glTexCoord3dv;
#define glTexCoord3dv glad_debug_glTexCoord3dv
GLAD_API_CALL PFNGLTEXCOORD3FPROC glad_glTexCoord3f;
GLAD_API_CALL PFNGLTEXCOORD3FPROC glad_debug_glTexCoord3f;
#define glTexCoord3f glad_debug_glTexCoord3f
GLAD_API_CALL PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv;
GLAD_API_CALL PFNGLTEXCOORD3FVPROC glad_debug_glTexCoord3fv;
#define glTexCoord3fv glad_debug_glTexCoord3fv
GLAD_API_CALL PFNGLTEXCOORD3IPROC glad_glTexCoord3i;
GLAD_API_CALL PFNGLTEXCOORD3IPROC glad_debug_glTexCoord3i;
#define glTexCoord3i glad_debug_glTexCoord3i
GLAD_API_CALL PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv;
GLAD_API_CALL PFNGLTEXCOORD3IVPROC glad_debug_glTexCoord3iv;
#define glTexCoord3iv glad_debug_glTexCoord3iv
GLAD_API_CALL PFNGLTEXCOORD3SPROC glad_glTexCoord3s;
GLAD_API_CALL PFNGLTEXCOORD3SPROC glad_debug_glTexCoord3s;
#define glTexCoord3s glad_debug_glTexCoord3s
GLAD_API_CALL PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv;
GLAD_API_CALL PFNGLTEXCOORD3SVPROC glad_debug_glTexCoord3sv;
#define glTexCoord3sv glad_debug_glTexCoord3sv
GLAD_API_CALL PFNGLTEXCOORD4DPROC glad_glTexCoord4d;
GLAD_API_CALL PFNGLTEXCOORD4DPROC glad_debug_glTexCoord4d;
#define glTexCoord4d glad_debug_glTexCoord4d
GLAD_API_CALL PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv;
GLAD_API_CALL PFNGLTEXCOORD4DVPROC glad_debug_glTexCoord4dv;
#define glTexCoord4dv glad_debug_glTexCoord4dv
GLAD_API_CALL PFNGLTEXCOORD4FPROC glad_glTexCoord4f;
GLAD_API_CALL PFNGLTEXCOORD4FPROC glad_debug_glTexCoord4f;
#define glTexCoord4f glad_debug_glTexCoord4f
GLAD_API_CALL PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv;
GLAD_API_CALL PFNGLTEXCOORD4FVPROC glad_debug_glTexCoord4fv;
#define glTexCoord4fv glad_debug_glTexCoord4fv
GLAD_API_CALL PFNGLTEXCOORD4IPROC glad_glTexCoord4i;
GLAD_API_CALL PFNGLTEXCOORD4IPROC glad_debug_glTexCoord4i;
#define glTexCoord4i glad_debug_glTexCoord4i
GLAD_API_CALL PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv;
GLAD_API_CALL PFNGLTEXCOORD4IVPROC glad_debug_glTexCoord4iv;
#define glTexCoord4iv glad_debug_glTexCoord4iv
GLAD_API_CALL PFNGLTEXCOORD4SPROC glad_glTexCoord4s;
GLAD_API_CALL PFNGLTEXCOORD4SPROC glad_debug_glTexCoord4s;
#define glTexCoord4s glad_debug_glTexCoord4s
GLAD_API_CALL PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv;
GLAD_API_CALL PFNGLTEXCOORD4SVPROC glad_debug_glTexCoord4sv;
#define glTexCoord4sv glad_debug_glTexCoord4sv
GLAD_API_CALL PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;
GLAD_API_CALL PFNGLTEXCOORDP1UIPROC glad_debug_glTexCoordP1ui;
#define glTexCoordP1ui glad_debug_glTexCoordP1ui
GLAD_API_CALL PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;
GLAD_API_CALL PFNGLTEXCOORDP1UIVPROC glad_debug_glTexCoordP1uiv;
#define glTexCoordP1uiv glad_debug_glTexCoordP1uiv
GLAD_API_CALL PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;
GLAD_API_CALL PFNGLTEXCOORDP2UIPROC glad_debug_glTexCoordP2ui;
#define glTexCoordP2ui glad_debug_glTexCoordP2ui
GLAD_API_CALL PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;
GLAD_API_CALL PFNGLTEXCOORDP2UIVPROC glad_debug_glTexCoordP2uiv;
#define glTexCoordP2uiv glad_debug_glTexCoordP2uiv
GLAD_API_CALL PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;
GLAD_API_CALL PFNGLTEXCOORDP3UIPROC glad_debug_glTexCoordP3ui;
#define glTexCoordP3ui glad_debug_glTexCoordP3ui
GLAD_API_CALL PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;
GLAD_API_CALL PFNGLTEXCOORDP3UIVPROC glad_debug_glTexCoordP3uiv;
#define glTexCoordP3uiv glad_debug_glTexCoordP3uiv
GLAD_API_CALL PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;
GLAD_API_CALL PFNGLTEXCOORDP4UIPROC glad_debug_glTexCoordP4ui;
#define glTexCoordP4ui glad_debug_glTexCoordP4ui
GLAD_API_CALL PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;
GLAD_API_CALL PFNGLTEXCOORDP4UIVPROC glad_debug_glTexCoordP4uiv;
#define glTexCoordP4uiv glad_debug_glTexCoordP4uiv
GLAD_API_CALL PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer;
GLAD_API_CALL PFNGLTEXCOORDPOINTERPROC glad_debug_glTexCoordPointer;
#define glTexCoordPointer glad_debug_glTexCoordPointer
GLAD_API_CALL PFNGLTEXENVFPROC glad_glTexEnvf;
GLAD_API_CALL PFNGLTEXENVFPROC glad_debug_glTexEnvf;
#define glTexEnvf glad_debug_glTexEnvf
GLAD_API_CALL PFNGLTEXENVFVPROC glad_glTexEnvfv;
GLAD_API_CALL PFNGLTEXENVFVPROC glad_debug_glTexEnvfv;
#define glTexEnvfv glad_debug_glTexEnvfv
GLAD_API_CALL PFNGLTEXENVIPROC glad_glTexEnvi;
GLAD_API_CALL PFNGLTEXENVIPROC glad_debug_glTexEnvi;
#define glTexEnvi glad_debug_glTexEnvi
GLAD_API_CALL PFNGLTEXENVIVPROC glad_glTexEnviv;
GLAD_API_CALL PFNGLTEXENVIVPROC glad_debug_glTexEnviv;
#define glTexEnviv glad_debug_glTexEnviv
GLAD_API_CALL PFNGLTEXGENDPROC glad_glTexGend;
GLAD_API_CALL PFNGLTEXGENDPROC glad_debug_glTexGend;
#define glTexGend glad_debug_glTexGend
GLAD_API_CALL PFNGLTEXGENDVPROC glad_glTexGendv;
GLAD_API_CALL PFNGLTEXGENDVPROC glad_debug_glTexGendv;
#define glTexGendv glad_debug_glTexGendv
GLAD_API_CALL PFNGLTEXGENFPROC glad_glTexGenf;
GLAD_API_CALL PFNGLTEXGENFPROC glad_debug_glTexGenf;
#define glTexGenf glad_debug_glTexGenf
GLAD_API_CALL PFNGLTEXGENFVPROC glad_glTexGenfv;
GLAD_API_CALL PFNGLTEXGENFVPROC glad_debug_glTexGenfv;
#define glTexGenfv glad_debug_glTexGenfv
GLAD_API_CALL PFNGLTEXGENIPROC glad_glTexGeni;
GLAD_API_CALL PFNGLTEXGENIPROC glad_debug_glTexGeni;
#define glTexGeni glad_debug_glTexGeni
GLAD_API_CALL PFNGLTEXGENIVPROC glad_glTexGeniv;
GLAD_API_CALL PFNGLTEXGENIVPROC glad_debug_glTexGeniv;
#define glTexGeniv glad_debug_glTexGeniv
GLAD_API_CALL PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
GLAD_API_CALL PFNGLTEXIMAGE1DPROC glad_debug_glTexImage1D;
#define glTexImage1D glad_debug_glTexImage1D
GLAD_API_CALL PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
GLAD_API_CALL PFNGLTEXIMAGE2DPROC glad_debug_glTexImage2D;
#define glTexImage2D glad_debug_glTexImage2D
GLAD_API_CALL PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;
GLAD_API_CALL PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_debug_glTexImage2DMultisample;
#define glTexImage2DMultisample glad_debug_glTexImage2DMultisample
GLAD_API_CALL PFNGLTEXIMAGE3DPROC glad_glTexImage3D;
GLAD_API_CALL PFNGLTEXIMAGE3DPROC glad_debug_glTexImage3D;
#define glTexImage3D glad_debug_glTexImage3D
GLAD_API_CALL PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;
GLAD_API_CALL PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_debug_glTexImage3DMultisample;
#define glTexImage3DMultisample glad_debug_glTexImage3DMultisample
GLAD_API_CALL PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;
GLAD_API_CALL PFNGLTEXPARAMETERIIVPROC glad_debug_glTexParameterIiv;
#define glTexParameterIiv glad_debug_glTexParameterIiv
GLAD_API_CALL PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;
GLAD_API_CALL PFNGLTEXPARAMETERIUIVPROC glad_debug_glTexParameterIuiv;
#define glTexParameterIuiv glad_debug_glTexParameterIuiv
GLAD_API_CALL PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
GLAD_API_CALL PFNGLTEXPARAMETERFPROC glad_debug_glTexParameterf;
#define glTexParameterf glad_debug_glTexParameterf
GLAD_API_CALL PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
GLAD_API_CALL PFNGLTEXPARAMETERFVPROC glad_debug_glTexParameterfv;
#define glTexParameterfv glad_debug_glTexParameterfv
GLAD_API_CALL PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
GLAD_API_CALL PFNGLTEXPARAMETERIPROC glad_debug_glTexParameteri;
#define glTexParameteri glad_debug_glTexParameteri
GLAD_API_CALL PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
GLAD_API_CALL PFNGLTEXPARAMETERIVPROC glad_debug_glTexParameteriv;
#define glTexParameteriv glad_debug_glTexParameteriv
GLAD_API_CALL PFNGLTEXSTORAGE1DPROC glad_glTexStorage1D;
GLAD_API_CALL PFNGLTEXSTORAGE1DPROC glad_debug_glTexStorage1D;
#define glTexStorage1D glad_debug_glTexStorage1D
GLAD_API_CALL PFNGLTEXSTORAGE2DPROC glad_glTexStorage2D;
GLAD_API_CALL PFNGLTEXSTORAGE2DPROC glad_debug_glTexStorage2D;
#define glTexStorage2D glad_debug_glTexStorage2D
GLAD_API_CALL PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_glTexStorage2DMultisample;
GLAD_API_CALL PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_debug_glTexStorage2DMultisample;
#define glTexStorage2DMultisample glad_debug_glTexStorage2DMultisample
GLAD_API_CALL PFNGLTEXSTORAGE3DPROC glad_glTexStorage3D;
GLAD_API_CALL PFNGLTEXSTORAGE3DPROC glad_debug_glTexStorage3D;
#define glTexStorage3D glad_debug_glTexStorage3D
GLAD_API_CALL PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_glTexStorage3DMultisample;
GLAD_API_CALL PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_debug_glTexStorage3DMultisample;
#define glTexStorage3DMultisample glad_debug_glTexStorage3DMultisample
GLAD_API_CALL PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
GLAD_API_CALL PFNGLTEXSUBIMAGE1DPROC glad_debug_glTexSubImage1D;
#define glTexSubImage1D glad_debug_glTexSubImage1D
GLAD_API_CALL PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
GLAD_API_CALL PFNGLTEXSUBIMAGE2DPROC glad_debug_glTexSubImage2D;
#define glTexSubImage2D glad_debug_glTexSubImage2D
GLAD_API_CALL PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;
GLAD_API_CALL PFNGLTEXSUBIMAGE3DPROC glad_debug_glTexSubImage3D;
#define glTexSubImage3D glad_debug_glTexSubImage3D
GLAD_API_CALL PFNGLTEXTUREBARRIERPROC glad_glTextureBarrier;
GLAD_API_CALL PFNGLTEXTUREBARRIERPROC glad_debug_glTextureBarrier;
#define glTextureBarrier glad_debug_glTextureBarrier
GLAD_API_CALL PFNGLTEXTUREBUFFERPROC glad_glTextureBuffer;
GLAD_API_CALL PFNGLTEXTUREBUFFERPROC glad_debug_glTextureBuffer;
#define glTextureBuffer glad_debug_glTextureBuffer
GLAD_API_CALL PFNGLTEXTUREBUFFERRANGEPROC glad_glTextureBufferRange;
GLAD_API_CALL PFNGLTEXTUREBUFFERRANGEPROC glad_debug_glTextureBufferRange;
#define glTextureBufferRange glad_debug_glTextureBufferRange
GLAD_API_CALL PFNGLTEXTUREPARAMETERIIVPROC glad_glTextureParameterIiv;
GLAD_API_CALL PFNGLTEXTUREPARAMETERIIVPROC glad_debug_glTextureParameterIiv;
#define glTextureParameterIiv glad_debug_glTextureParameterIiv
GLAD_API_CALL PFNGLTEXTUREPARAMETERIUIVPROC glad_glTextureParameterIuiv;
GLAD_API_CALL PFNGLTEXTUREPARAMETERIUIVPROC glad_debug_glTextureParameterIuiv;
#define glTextureParameterIuiv glad_debug_glTextureParameterIuiv
GLAD_API_CALL PFNGLTEXTUREPARAMETERFPROC glad_glTextureParameterf;
GLAD_API_CALL PFNGLTEXTUREPARAMETERFPROC glad_debug_glTextureParameterf;
#define glTextureParameterf glad_debug_glTextureParameterf
GLAD_API_CALL PFNGLTEXTUREPARAMETERFVPROC glad_glTextureParameterfv;
GLAD_API_CALL PFNGLTEXTUREPARAMETERFVPROC glad_debug_glTextureParameterfv;
#define glTextureParameterfv glad_debug_glTextureParameterfv
GLAD_API_CALL PFNGLTEXTUREPARAMETERIPROC glad_glTextureParameteri;
GLAD_API_CALL PFNGLTEXTUREPARAMETERIPROC glad_debug_glTextureParameteri;
#define glTextureParameteri glad_debug_glTextureParameteri
GLAD_API_CALL PFNGLTEXTUREPARAMETERIVPROC glad_glTextureParameteriv;
GLAD_API_CALL PFNGLTEXTUREPARAMETERIVPROC glad_debug_glTextureParameteriv;
#define glTextureParameteriv glad_debug_glTextureParameteriv
GLAD_API_CALL PFNGLTEXTURESTORAGE1DPROC glad_glTextureStorage1D;
GLAD_API_CALL PFNGLTEXTURESTORAGE1DPROC glad_debug_glTextureStorage1D;
#define glTextureStorage1D glad_debug_glTextureStorage1D
GLAD_API_CALL PFNGLTEXTURESTORAGE2DPROC glad_glTextureStorage2D;
GLAD_API_CALL PFNGLTEXTURESTORAGE2DPROC glad_debug_glTextureStorage2D;
#define glTextureStorage2D glad_debug_glTextureStorage2D
GLAD_API_CALL PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_glTextureStorage2DMultisample;
GLAD_API_CALL PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_debug_glTextureStorage2DMultisample;
#define glTextureStorage2DMultisample glad_debug_glTextureStorage2DMultisample
GLAD_API_CALL PFNGLTEXTURESTORAGE3DPROC glad_glTextureStorage3D;
GLAD_API_CALL PFNGLTEXTURESTORAGE3DPROC glad_debug_glTextureStorage3D;
#define glTextureStorage3D glad_debug_glTextureStorage3D
GLAD_API_CALL PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_glTextureStorage3DMultisample;
GLAD_API_CALL PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_debug_glTextureStorage3DMultisample;
#define glTextureStorage3DMultisample glad_debug_glTextureStorage3DMultisample
GLAD_API_CALL PFNGLTEXTURESUBIMAGE1DPROC glad_glTextureSubImage1D;
GLAD_API_CALL PFNGLTEXTURESUBIMAGE1DPROC glad_debug_glTextureSubImage1D;
#define glTextureSubImage1D glad_debug_glTextureSubImage1D
GLAD_API_CALL PFNGLTEXTURESUBIMAGE2DPROC glad_glTextureSubImage2D;
GLAD_API_CALL PFNGLTEXTURESUBIMAGE2DPROC glad_debug_glTextureSubImage2D;
#define glTextureSubImage2D glad_debug_glTextureSubImage2D
GLAD_API_CALL PFNGLTEXTURESUBIMAGE3DPROC glad_glTextureSubImage3D;
GLAD_API_CALL PFNGLTEXTURESUBIMAGE3DPROC glad_debug_glTextureSubImage3D;
#define glTextureSubImage3D glad_debug_glTextureSubImage3D
GLAD_API_CALL PFNGLTEXTUREVIEWPROC glad_glTextureView;
GLAD_API_CALL PFNGLTEXTUREVIEWPROC glad_debug_glTextureView;
#define glTextureView glad_debug_glTextureView
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_glTransformFeedbackBufferBase;
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_debug_glTransformFeedbackBufferBase;
#define glTransformFeedbackBufferBase glad_debug_glTransformFeedbackBufferBase
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_glTransformFeedbackBufferRange;
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_debug_glTransformFeedbackBufferRange;
#define glTransformFeedbackBufferRange glad_debug_glTransformFeedbackBufferRange
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_debug_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings glad_debug_glTransformFeedbackVaryings
GLAD_API_CALL PFNGLTRANSLATEDPROC glad_glTranslated;
GLAD_API_CALL PFNGLTRANSLATEDPROC glad_debug_glTranslated;
#define glTranslated glad_debug_glTranslated
GLAD_API_CALL PFNGLTRANSLATEFPROC glad_glTranslatef;
GLAD_API_CALL PFNGLTRANSLATEFPROC glad_debug_glTranslatef;
#define glTranslatef glad_debug_glTranslatef
GLAD_API_CALL PFNGLUNIFORM1DPROC glad_glUniform1d;
GLAD_API_CALL PFNGLUNIFORM1DPROC glad_debug_glUniform1d;
#define glUniform1d glad_debug_glUniform1d
GLAD_API_CALL PFNGLUNIFORM1DVPROC glad_glUniform1dv;
GLAD_API_CALL PFNGLUNIFORM1DVPROC glad_debug_glUniform1dv;
#define glUniform1dv glad_debug_glUniform1dv
GLAD_API_CALL PFNGLUNIFORM1FPROC glad_glUniform1f;
GLAD_API_CALL PFNGLUNIFORM1FPROC glad_debug_glUniform1f;
#define glUniform1f glad_debug_glUniform1f
GLAD_API_CALL PFNGLUNIFORM1FVPROC glad_glUniform1fv;
GLAD_API_CALL PFNGLUNIFORM1FVPROC glad_debug_glUniform1fv;
#define glUniform1fv glad_debug_glUniform1fv
GLAD_API_CALL PFNGLUNIFORM1IPROC glad_glUniform1i;
GLAD_API_CALL PFNGLUNIFORM1IPROC glad_debug_glUniform1i;
#define glUniform1i glad_debug_glUniform1i
GLAD_API_CALL PFNGLUNIFORM1IVPROC glad_glUniform1iv;
GLAD_API_CALL PFNGLUNIFORM1IVPROC glad_debug_glUniform1iv;
#define glUniform1iv glad_debug_glUniform1iv
GLAD_API_CALL PFNGLUNIFORM1UIPROC glad_glUniform1ui;
GLAD_API_CALL PFNGLUNIFORM1UIPROC glad_debug_glUniform1ui;
#define glUniform1ui glad_debug_glUniform1ui
GLAD_API_CALL PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;
GLAD_API_CALL PFNGLUNIFORM1UIVPROC glad_debug_glUniform1uiv;
#define glUniform1uiv glad_debug_glUniform1uiv
GLAD_API_CALL PFNGLUNIFORM2DPROC glad_glUniform2d;
GLAD_API_CALL PFNGLUNIFORM2DPROC glad_debug_glUniform2d;
#define glUniform2d glad_debug_glUniform2d
GLAD_API_CALL PFNGLUNIFORM2DVPROC glad_glUniform2dv;
GLAD_API_CALL PFNGLUNIFORM2DVPROC glad_debug_glUniform2dv;
#define glUniform2dv glad_debug_glUniform2dv
GLAD_API_CALL PFNGLUNIFORM2FPROC glad_glUniform2f;
GLAD_API_CALL PFNGLUNIFORM2FPROC glad_debug_glUniform2f;
#define glUniform2f glad_debug_glUniform2f
GLAD_API_CALL PFNGLUNIFORM2FVPROC glad_glUniform2fv;
GLAD_API_CALL PFNGLUNIFORM2FVPROC glad_debug_glUniform2fv;
#define glUniform2fv glad_debug_glUniform2fv
GLAD_API_CALL PFNGLUNIFORM2IPROC glad_glUniform2i;
GLAD_API_CALL PFNGLUNIFORM2IPROC glad_debug_glUniform2i;
#define glUniform2i glad_debug_glUniform2i
GLAD_API_CALL PFNGLUNIFORM2IVPROC glad_glUniform2iv;
GLAD_API_CALL PFNGLUNIFORM2IVPROC glad_debug_glUniform2iv;
#define glUniform2iv glad_debug_glUniform2iv
GLAD_API_CALL PFNGLUNIFORM2UIPROC glad_glUniform2ui;
GLAD_API_CALL PFNGLUNIFORM2UIPROC glad_debug_glUniform2ui;
#define glUniform2ui glad_debug_glUniform2ui
GLAD_API_CALL PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;
GLAD_API_CALL PFNGLUNIFORM2UIVPROC glad_debug_glUniform2uiv;
#define glUniform2uiv glad_debug_glUniform2uiv
GLAD_API_CALL PFNGLUNIFORM3DPROC glad_glUniform3d;
GLAD_API_CALL PFNGLUNIFORM3DPROC glad_debug_glUniform3d;
#define glUniform3d glad_debug_glUniform3d
GLAD_API_CALL PFNGLUNIFORM3DVPROC glad_glUniform3dv;
GLAD_API_CALL PFNGLUNIFORM3DVPROC glad_debug_glUniform3dv;
#define glUniform3dv glad_debug_glUniform3dv
GLAD_API_CALL PFNGLUNIFORM3FPROC glad_glUniform3f;
GLAD_API_CALL PFNGLUNIFORM3FPROC glad_debug_glUniform3f;
#define glUniform3f glad_debug_glUniform3f
GLAD_API_CALL PFNGLUNIFORM3FVPROC glad_glUniform3fv;
GLAD_API_CALL PFNGLUNIFORM3FVPROC glad_debug_glUniform3fv;
#define glUniform3fv glad_debug_glUniform3fv
GLAD_API_CALL PFNGLUNIFORM3IPROC glad_glUniform3i;
GLAD_API_CALL PFNGLUNIFORM3IPROC glad_debug_glUniform3i;
#define glUniform3i glad_debug_glUniform3i
GLAD_API_CALL PFNGLUNIFORM3IVPROC glad_glUniform3iv;
GLAD_API_CALL PFNGLUNIFORM3IVPROC glad_debug_glUniform3iv;
#define glUniform3iv glad_debug_glUniform3iv
GLAD_API_CALL PFNGLUNIFORM3UIPROC glad_glUniform3ui;
GLAD_API_CALL PFNGLUNIFORM3UIPROC glad_debug_glUniform3ui;
#define glUniform3ui glad_debug_glUniform3ui
GLAD_API_CALL PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;
GLAD_API_CALL PFNGLUNIFORM3UIVPROC glad_debug_glUniform3uiv;
#define glUniform3uiv glad_debug_glUniform3uiv
GLAD_API_CALL PFNGLUNIFORM4DPROC glad_glUniform4d;
GLAD_API_CALL PFNGLUNIFORM4DPROC glad_debug_glUniform4d;
#define glUniform4d glad_debug_glUniform4d
GLAD_API_CALL PFNGLUNIFORM4DVPROC glad_glUniform4dv;
GLAD_API_CALL PFNGLUNIFORM4DVPROC glad_debug_glUniform4dv;
#define glUniform4dv glad_debug_glUniform4dv
GLAD_API_CALL PFNGLUNIFORM4FPROC glad_glUniform4f;
GLAD_API_CALL PFNGLUNIFORM4FPROC glad_debug_glUniform4f;
#define glUniform4f glad_debug_glUniform4f
GLAD_API_CALL PFNGLUNIFORM4FVPROC glad_glUniform4fv;
GLAD_API_CALL PFNGLUNIFORM4FVPROC glad_debug_glUniform4fv;
#define glUniform4fv glad_debug_glUniform4fv
GLAD_API_CALL PFNGLUNIFORM4IPROC glad_glUniform4i;
GLAD_API_CALL PFNGLUNIFORM4IPROC glad_debug_glUniform4i;
#define glUniform4i glad_debug_glUniform4i
GLAD_API_CALL PFNGLUNIFORM4IVPROC glad_glUniform4iv;
GLAD_API_CALL PFNGLUNIFORM4IVPROC glad_debug_glUniform4iv;
#define glUniform4iv glad_debug_glUniform4iv
GLAD_API_CALL PFNGLUNIFORM4UIPROC glad_glUniform4ui;
GLAD_API_CALL PFNGLUNIFORM4UIPROC glad_debug_glUniform4ui;
#define glUniform4ui glad_debug_glUniform4ui
GLAD_API_CALL PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;
GLAD_API_CALL PFNGLUNIFORM4UIVPROC glad_debug_glUniform4uiv;
#define glUniform4uiv glad_debug_glUniform4uiv
GLAD_API_CALL PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;
GLAD_API_CALL PFNGLUNIFORMBLOCKBINDINGPROC glad_debug_glUniformBlockBinding;
#define glUniformBlockBinding glad_debug_glUniformBlockBinding
GLAD_API_CALL PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2DVPROC glad_debug_glUniformMatrix2dv;
#define glUniformMatrix2dv glad_debug_glUniformMatrix2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVPROC glad_debug_glUniformMatrix2fv;
#define glUniformMatrix2fv glad_debug_glUniformMatrix2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3DVPROC glad_debug_glUniformMatrix2x3dv;
#define glUniformMatrix2x3dv glad_debug_glUniformMatrix2x3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3FVPROC glad_debug_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv glad_debug_glUniformMatrix2x3fv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4DVPROC glad_debug_glUniformMatrix2x4dv;
#define glUniformMatrix2x4dv glad_debug_glUniformMatrix2x4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4FVPROC glad_debug_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv glad_debug_glUniformMatrix2x4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3DVPROC glad_debug_glUniformMatrix3dv;
#define glUniformMatrix3dv glad_debug_glUniformMatrix3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVPROC glad_debug_glUniformMatrix3fv;
#define glUniformMatrix3fv glad_debug_glUniformMatrix3fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2DVPROC glad_debug_glUniformMatrix3x2dv;
#define glUniformMatrix3x2dv glad_debug_glUniformMatrix3x2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2FVPROC glad_debug_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv glad_debug_glUniformMatrix3x2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4DVPROC glad_debug_glUniformMatrix3x4dv;
#define glUniformMatrix3x4dv glad_debug_glUniformMatrix3x4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4FVPROC glad_debug_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv glad_debug_glUniformMatrix3x4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4DVPROC glad_debug_glUniformMatrix4dv;
#define glUniformMatrix4dv glad_debug_glUniformMatrix4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVPROC glad_debug_glUniformMatrix4fv;
#define glUniformMatrix4fv glad_debug_glUniformMatrix4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2DVPROC glad_debug_glUniformMatrix4x2dv;
#define glUniformMatrix4x2dv glad_debug_glUniformMatrix4x2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2FVPROC glad_debug_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv glad_debug_glUniformMatrix4x2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3DVPROC glad_debug_glUniformMatrix4x3dv;
#define glUniformMatrix4x3dv glad_debug_glUniformMatrix4x3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3FVPROC glad_debug_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv glad_debug_glUniformMatrix4x3fv
GLAD_API_CALL PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;
GLAD_API_CALL PFNGLUNIFORMSUBROUTINESUIVPROC glad_debug_glUniformSubroutinesuiv;
#define glUniformSubroutinesuiv glad_debug_glUniformSubroutinesuiv
GLAD_API_CALL PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;
GLAD_API_CALL PFNGLUNMAPBUFFERPROC glad_debug_glUnmapBuffer;
#define glUnmapBuffer glad_debug_glUnmapBuffer
GLAD_API_CALL PFNGLUNMAPNAMEDBUFFERPROC glad_glUnmapNamedBuffer;
GLAD_API_CALL PFNGLUNMAPNAMEDBUFFERPROC glad_debug_glUnmapNamedBuffer;
#define glUnmapNamedBuffer glad_debug_glUnmapNamedBuffer
GLAD_API_CALL PFNGLUSEPROGRAMPROC glad_glUseProgram;
GLAD_API_CALL PFNGLUSEPROGRAMPROC glad_debug_glUseProgram;
#define glUseProgram glad_debug_glUseProgram
GLAD_API_CALL PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;
GLAD_API_CALL PFNGLUSEPROGRAMSTAGESPROC glad_debug_glUseProgramStages;
#define glUseProgramStages glad_debug_glUseProgramStages
GLAD_API_CALL PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;
GLAD_API_CALL PFNGLVALIDATEPROGRAMPROC glad_debug_glValidateProgram;
#define glValidateProgram glad_debug_glValidateProgram
GLAD_API_CALL PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;
GLAD_API_CALL PFNGLVALIDATEPROGRAMPIPELINEPROC glad_debug_glValidateProgramPipeline;
#define glValidateProgramPipeline glad_debug_glValidateProgramPipeline
GLAD_API_CALL PFNGLVERTEX2DPROC glad_glVertex2d;
GLAD_API_CALL PFNGLVERTEX2DPROC glad_debug_glVertex2d;
#define glVertex2d glad_debug_glVertex2d
GLAD_API_CALL PFNGLVERTEX2DVPROC glad_glVertex2dv;
GLAD_API_CALL PFNGLVERTEX2DVPROC glad_debug_glVertex2dv;
#define glVertex2dv glad_debug_glVertex2dv
GLAD_API_CALL PFNGLVERTEX2FPROC glad_glVertex2f;
GLAD_API_CALL PFNGLVERTEX2FPROC glad_debug_glVertex2f;
#define glVertex2f glad_debug_glVertex2f
GLAD_API_CALL PFNGLVERTEX2FVPROC glad_glVertex2fv;
GLAD_API_CALL PFNGLVERTEX2FVPROC glad_debug_glVertex2fv;
#define glVertex2fv glad_debug_glVertex2fv
GLAD_API_CALL PFNGLVERTEX2IPROC glad_glVertex2i;
GLAD_API_CALL PFNGLVERTEX2IPROC glad_debug_glVertex2i;
#define glVertex2i glad_debug_glVertex2i
GLAD_API_CALL PFNGLVERTEX2IVPROC glad_glVertex2iv;
GLAD_API_CALL PFNGLVERTEX2IVPROC glad_debug_glVertex2iv;
#define glVertex2iv glad_debug_glVertex2iv
GLAD_API_CALL PFNGLVERTEX2SPROC glad_glVertex2s;
GLAD_API_CALL PFNGLVERTEX2SPROC glad_debug_glVertex2s;
#define glVertex2s glad_debug_glVertex2s
GLAD_API_CALL PFNGLVERTEX2SVPROC glad_glVertex2sv;
GLAD_API_CALL PFNGLVERTEX2SVPROC glad_debug_glVertex2sv;
#define glVertex2sv glad_debug_glVertex2sv
GLAD_API_CALL PFNGLVERTEX3DPROC glad_glVertex3d;
GLAD_API_CALL PFNGLVERTEX3DPROC glad_debug_glVertex3d;
#define glVertex3d glad_debug_glVertex3d
GLAD_API_CALL PFNGLVERTEX3DVPROC glad_glVertex3dv;
GLAD_API_CALL PFNGLVERTEX3DVPROC glad_debug_glVertex3dv;
#define glVertex3dv glad_debug_glVertex3dv
GLAD_API_CALL PFNGLVERTEX3FPROC glad_glVertex3f;
GLAD_API_CALL PFNGLVERTEX3FPROC glad_debug_glVertex3f;
#define glVertex3f glad_debug_glVertex3f
GLAD_API_CALL PFNGLVERTEX3FVPROC glad_glVertex3fv;
GLAD_API_CALL PFNGLVERTEX3FVPROC glad_debug_glVertex3fv;
#define glVertex3fv glad_debug_glVertex3fv
GLAD_API_CALL PFNGLVERTEX3IPROC glad_glVertex3i;
GLAD_API_CALL PFNGLVERTEX3IPROC glad_debug_glVertex3i;
#define glVertex3i glad_debug_glVertex3i
GLAD_API_CALL PFNGLVERTEX3IVPROC glad_glVertex3iv;
GLAD_API_CALL PFNGLVERTEX3IVPROC glad_debug_glVertex3iv;
#define glVertex3iv glad_debug_glVertex3iv
GLAD_API_CALL PFNGLVERTEX3SPROC glad_glVertex3s;
GLAD_API_CALL PFNGLVERTEX3SPROC glad_debug_glVertex3s;
#define glVertex3s glad_debug_glVertex3s
GLAD_API_CALL PFNGLVERTEX3SVPROC glad_glVertex3sv;
GLAD_API_CALL PFNGLVERTEX3SVPROC glad_debug_glVertex3sv;
#define glVertex3sv glad_debug_glVertex3sv
GLAD_API_CALL PFNGLVERTEX4DPROC glad_glVertex4d;
GLAD_API_CALL PFNGLVERTEX4DPROC glad_debug_glVertex4d;
#define glVertex4d glad_debug_glVertex4d
GLAD_API_CALL PFNGLVERTEX4DVPROC glad_glVertex4dv;
GLAD_API_CALL PFNGLVERTEX4DVPROC glad_debug_glVertex4dv;
#define glVertex4dv glad_debug_glVertex4dv
GLAD_API_CALL PFNGLVERTEX4FPROC glad_glVertex4f;
GLAD_API_CALL PFNGLVERTEX4FPROC glad_debug_glVertex4f;
#define glVertex4f glad_debug_glVertex4f
GLAD_API_CALL PFNGLVERTEX4FVPROC glad_glVertex4fv;
GLAD_API_CALL PFNGLVERTEX4FVPROC glad_debug_glVertex4fv;
#define glVertex4fv glad_debug_glVertex4fv
GLAD_API_CALL PFNGLVERTEX4IPROC glad_glVertex4i;
GLAD_API_CALL PFNGLVERTEX4IPROC glad_debug_glVertex4i;
#define glVertex4i glad_debug_glVertex4i
GLAD_API_CALL PFNGLVERTEX4IVPROC glad_glVertex4iv;
GLAD_API_CALL PFNGLVERTEX4IVPROC glad_debug_glVertex4iv;
#define glVertex4iv glad_debug_glVertex4iv
GLAD_API_CALL PFNGLVERTEX4SPROC glad_glVertex4s;
GLAD_API_CALL PFNGLVERTEX4SPROC glad_debug_glVertex4s;
#define glVertex4s glad_debug_glVertex4s
GLAD_API_CALL PFNGLVERTEX4SVPROC glad_glVertex4sv;
GLAD_API_CALL PFNGLVERTEX4SVPROC glad_debug_glVertex4sv;
#define glVertex4sv glad_debug_glVertex4sv
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_glVertexArrayAttribBinding;
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_debug_glVertexArrayAttribBinding;
#define glVertexArrayAttribBinding glad_debug_glVertexArrayAttribBinding
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBFORMATPROC glad_glVertexArrayAttribFormat;
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBFORMATPROC glad_debug_glVertexArrayAttribFormat;
#define glVertexArrayAttribFormat glad_debug_glVertexArrayAttribFormat
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_glVertexArrayAttribIFormat;
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_debug_glVertexArrayAttribIFormat;
#define glVertexArrayAttribIFormat glad_debug_glVertexArrayAttribIFormat
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_glVertexArrayAttribLFormat;
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_debug_glVertexArrayAttribLFormat;
#define glVertexArrayAttribLFormat glad_debug_glVertexArrayAttribLFormat
GLAD_API_CALL PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_glVertexArrayBindingDivisor;
GLAD_API_CALL PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_debug_glVertexArrayBindingDivisor;
#define glVertexArrayBindingDivisor glad_debug_glVertexArrayBindingDivisor
GLAD_API_CALL PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_glVertexArrayElementBuffer;
GLAD_API_CALL PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_debug_glVertexArrayElementBuffer;
#define glVertexArrayElementBuffer glad_debug_glVertexArrayElementBuffer
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_glVertexArrayVertexBuffer;
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_debug_glVertexArrayVertexBuffer;
#define glVertexArrayVertexBuffer glad_debug_glVertexArrayVertexBuffer
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_glVertexArrayVertexBuffers;
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_debug_glVertexArrayVertexBuffers;
#define glVertexArrayVertexBuffers glad_debug_glVertexArrayVertexBuffers
GLAD_API_CALL PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;
GLAD_API_CALL PFNGLVERTEXATTRIB1DPROC glad_debug_glVertexAttrib1d;
#define glVertexAttrib1d glad_debug_glVertexAttrib1d
GLAD_API_CALL PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;
GLAD_API_CALL PFNGLVERTEXATTRIB1DVPROC glad_debug_glVertexAttrib1dv;
#define glVertexAttrib1dv glad_debug_glVertexAttrib1dv
GLAD_API_CALL PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;
GLAD_API_CALL PFNGLVERTEXATTRIB1FPROC glad_debug_glVertexAttrib1f;
#define glVertexAttrib1f glad_debug_glVertexAttrib1f
GLAD_API_CALL PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;
GLAD_API_CALL PFNGLVERTEXATTRIB1FVPROC glad_debug_glVertexAttrib1fv;
#define glVertexAttrib1fv glad_debug_glVertexAttrib1fv
GLAD_API_CALL PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;
GLAD_API_CALL PFNGLVERTEXATTRIB1SPROC glad_debug_glVertexAttrib1s;
#define glVertexAttrib1s glad_debug_glVertexAttrib1s
GLAD_API_CALL PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;
GLAD_API_CALL PFNGLVERTEXATTRIB1SVPROC glad_debug_glVertexAttrib1sv;
#define glVertexAttrib1sv glad_debug_glVertexAttrib1sv
GLAD_API_CALL PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;
GLAD_API_CALL PFNGLVERTEXATTRIB2DPROC glad_debug_glVertexAttrib2d;
#define glVertexAttrib2d glad_debug_glVertexAttrib2d
GLAD_API_CALL PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;
GLAD_API_CALL PFNGLVERTEXATTRIB2DVPROC glad_debug_glVertexAttrib2dv;
#define glVertexAttrib2dv glad_debug_glVertexAttrib2dv
GLAD_API_CALL PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;
GLAD_API_CALL PFNGLVERTEXATTRIB2FPROC glad_debug_glVertexAttrib2f;
#define glVertexAttrib2f glad_debug_glVertexAttrib2f
GLAD_API_CALL PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;
GLAD_API_CALL PFNGLVERTEXATTRIB2FVPROC glad_debug_glVertexAttrib2fv;
#define glVertexAttrib2fv glad_debug_glVertexAttrib2fv
GLAD_API_CALL PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;
GLAD_API_CALL PFNGLVERTEXATTRIB2SPROC glad_debug_glVertexAttrib2s;
#define glVertexAttrib2s glad_debug_glVertexAttrib2s
GLAD_API_CALL PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;
GLAD_API_CALL PFNGLVERTEXATTRIB2SVPROC glad_debug_glVertexAttrib2sv;
#define glVertexAttrib2sv glad_debug_glVertexAttrib2sv
GLAD_API_CALL PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;
GLAD_API_CALL PFNGLVERTEXATTRIB3DPROC glad_debug_glVertexAttrib3d;
#define glVertexAttrib3d glad_debug_glVertexAttrib3d
GLAD_API_CALL PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;
GLAD_API_CALL PFNGLVERTEXATTRIB3DVPROC glad_debug_glVertexAttrib3dv;
#define glVertexAttrib3dv glad_debug_glVertexAttrib3dv
GLAD_API_CALL PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;
GLAD_API_CALL PFNGLVERTEXATTRIB3FPROC glad_debug_glVertexAttrib3f;
#define glVertexAttrib3f glad_debug_glVertexAttrib3f
GLAD_API_CALL PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;
GLAD_API_CALL PFNGLVERTEXATTRIB3FVPROC glad_debug_glVertexAttrib3fv;
#define glVertexAttrib3fv glad_debug_glVertexAttrib3fv
GLAD_API_CALL PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;
GLAD_API_CALL PFNGLVERTEXATTRIB3SPROC glad_debug_glVertexAttrib3s;
#define glVertexAttrib3s glad_debug_glVertexAttrib3s
GLAD_API_CALL PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;
GLAD_API_CALL PFNGLVERTEXATTRIB3SVPROC glad_debug_glVertexAttrib3sv;
#define glVertexAttrib3sv glad_debug_glVertexAttrib3sv
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVPROC glad_debug_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv glad_debug_glVertexAttrib4Nbv
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVPROC glad_debug_glVertexAttrib4Niv;
#define glVertexAttrib4Niv glad_debug_glVertexAttrib4Niv
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVPROC glad_debug_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv glad_debug_glVertexAttrib4Nsv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBPROC glad_debug_glVertexAttrib4Nub;
#define glVertexAttrib4Nub glad_debug_glVertexAttrib4Nub
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVPROC glad_debug_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv glad_debug_glVertexAttrib4Nubv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVPROC glad_debug_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv glad_debug_glVertexAttrib4Nuiv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVPROC glad_debug_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv glad_debug_glVertexAttrib4Nusv
GLAD_API_CALL PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;
GLAD_API_CALL PFNGLVERTEXATTRIB4BVPROC glad_debug_glVertexAttrib4bv;
#define glVertexAttrib4bv glad_debug_glVertexAttrib4bv
GLAD_API_CALL PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;
GLAD_API_CALL PFNGLVERTEXATTRIB4DPROC glad_debug_glVertexAttrib4d;
#define glVertexAttrib4d glad_debug_glVertexAttrib4d
GLAD_API_CALL PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;
GLAD_API_CALL PFNGLVERTEXATTRIB4DVPROC glad_debug_glVertexAttrib4dv;
#define glVertexAttrib4dv glad_debug_glVertexAttrib4dv
GLAD_API_CALL PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;
GLAD_API_CALL PFNGLVERTEXATTRIB4FPROC glad_debug_glVertexAttrib4f;
#define glVertexAttrib4f glad_debug_glVertexAttrib4f
GLAD_API_CALL PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;
GLAD_API_CALL PFNGLVERTEXATTRIB4FVPROC glad_debug_glVertexAttrib4fv;
#define glVertexAttrib4fv glad_debug_glVertexAttrib4fv
GLAD_API_CALL PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;
GLAD_API_CALL PFNGLVERTEXATTRIB4IVPROC glad_debug_glVertexAttrib4iv;
#define glVertexAttrib4iv glad_debug_glVertexAttrib4iv
GLAD_API_CALL PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;
GLAD_API_CALL PFNGLVERTEXATTRIB4SPROC glad_debug_glVertexAttrib4s;
#define glVertexAttrib4s glad_debug_glVertexAttrib4s
GLAD_API_CALL PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;
GLAD_API_CALL PFNGLVERTEXATTRIB4SVPROC glad_debug_glVertexAttrib4sv;
#define glVertexAttrib4sv glad_debug_glVertexAttrib4sv
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVPROC glad_debug_glVertexAttrib4ubv;
#define glVertexAttrib4ubv glad_debug_glVertexAttrib4ubv
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVPROC glad_debug_glVertexAttrib4uiv;
#define glVertexAttrib4uiv glad_debug_glVertexAttrib4uiv
GLAD_API_CALL PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;
GLAD_API_CALL PFNGLVERTEXATTRIB4USVPROC glad_debug_glVertexAttrib4usv;
#define glVertexAttrib4usv glad_debug_glVertexAttrib4usv
GLAD_API_CALL PFNGLVERTEXATTRIBBINDINGPROC glad_glVertexAttribBinding;
GLAD_API_CALL PFNGLVERTEXATTRIBBINDINGPROC glad_debug_glVertexAttribBinding;
#define glVertexAttribBinding glad_debug_glVertexAttribBinding
GLAD_API_CALL PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;
GLAD_API_CALL PFNGLVERTEXATTRIBDIVISORPROC glad_debug_glVertexAttribDivisor;
#define glVertexAttribDivisor glad_debug_glVertexAttribDivisor
GLAD_API_CALL PFNGLVERTEXATTRIBFORMATPROC glad_glVertexAttribFormat;
GLAD_API_CALL PFNGLVERTEXATTRIBFORMATPROC glad_debug_glVertexAttribFormat;
#define glVertexAttribFormat glad_debug_glVertexAttribFormat
GLAD_API_CALL PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;
GLAD_API_CALL PFNGLVERTEXATTRIBI1IPROC glad_debug_glVertexAttribI1i;
#define glVertexAttribI1i glad_debug_glVertexAttribI1i
GLAD_API_CALL PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;
GLAD_API_CALL PFNGLVERTEXATTRIBI1IVPROC glad_debug_glVertexAttribI1iv;
#define glVertexAttribI1iv glad_debug_glVertexAttribI1iv
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIPROC glad_debug_glVertexAttribI1ui;
#define glVertexAttribI1ui glad_debug_glVertexAttribI1ui
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIVPROC glad_debug_glVertexAttribI1uiv;
#define glVertexAttribI1uiv glad_debug_glVertexAttribI1uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;
GLAD_API_CALL PFNGLVERTEXATTRIBI2IPROC glad_debug_glVertexAttribI2i;
#define glVertexAttribI2i glad_debug_glVertexAttribI2i
GLAD_API_CALL PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;
GLAD_API_CALL PFNGLVERTEXATTRIBI2IVPROC glad_debug_glVertexAttribI2iv;
#define glVertexAttribI2iv glad_debug_glVertexAttribI2iv
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIPROC glad_debug_glVertexAttribI2ui;
#define glVertexAttribI2ui glad_debug_glVertexAttribI2ui
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIVPROC glad_debug_glVertexAttribI2uiv;
#define glVertexAttribI2uiv glad_debug_glVertexAttribI2uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;
GLAD_API_CALL PFNGLVERTEXATTRIBI3IPROC glad_debug_glVertexAttribI3i;
#define glVertexAttribI3i glad_debug_glVertexAttribI3i
GLAD_API_CALL PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;
GLAD_API_CALL PFNGLVERTEXATTRIBI3IVPROC glad_debug_glVertexAttribI3iv;
#define glVertexAttribI3iv glad_debug_glVertexAttribI3iv
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIPROC glad_debug_glVertexAttribI3ui;
#define glVertexAttribI3ui glad_debug_glVertexAttribI3ui
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIVPROC glad_debug_glVertexAttribI3uiv;
#define glVertexAttribI3uiv glad_debug_glVertexAttribI3uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4BVPROC glad_debug_glVertexAttribI4bv;
#define glVertexAttribI4bv glad_debug_glVertexAttribI4bv
GLAD_API_CALL PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;
GLAD_API_CALL PFNGLVERTEXATTRIBI4IPROC glad_debug_glVertexAttribI4i;
#define glVertexAttribI4i glad_debug_glVertexAttribI4i
GLAD_API_CALL PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4IVPROC glad_debug_glVertexAttribI4iv;
#define glVertexAttribI4iv glad_debug_glVertexAttribI4iv
GLAD_API_CALL PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4SVPROC glad_debug_glVertexAttribI4sv;
#define glVertexAttribI4sv glad_debug_glVertexAttribI4sv
GLAD_API_CALL PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4UBVPROC glad_debug_glVertexAttribI4ubv;
#define glVertexAttribI4ubv glad_debug_glVertexAttribI4ubv
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIPROC glad_debug_glVertexAttribI4ui;
#define glVertexAttribI4ui glad_debug_glVertexAttribI4ui
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIVPROC glad_debug_glVertexAttribI4uiv;
#define glVertexAttribI4uiv glad_debug_glVertexAttribI4uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4USVPROC glad_debug_glVertexAttribI4usv;
#define glVertexAttribI4usv glad_debug_glVertexAttribI4usv
GLAD_API_CALL PFNGLVERTEXATTRIBIFORMATPROC glad_glVertexAttribIFormat;
GLAD_API_CALL PFNGLVERTEXATTRIBIFORMATPROC glad_debug_glVertexAttribIFormat;
#define glVertexAttribIFormat glad_debug_glVertexAttribIFormat
GLAD_API_CALL PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;
GLAD_API_CALL PFNGLVERTEXATTRIBIPOINTERPROC glad_debug_glVertexAttribIPointer;
#define glVertexAttribIPointer glad_debug_glVertexAttribIPointer
GLAD_API_CALL PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;
GLAD_API_CALL PFNGLVERTEXATTRIBL1DPROC glad_debug_glVertexAttribL1d;
#define glVertexAttribL1d glad_debug_glVertexAttribL1d
GLAD_API_CALL PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;
GLAD_API_CALL PFNGLVERTEXATTRIBL1DVPROC glad_debug_glVertexAttribL1dv;
#define glVertexAttribL1dv glad_debug_glVertexAttribL1dv
GLAD_API_CALL PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;
GLAD_API_CALL PFNGLVERTEXATTRIBL2DPROC glad_debug_glVertexAttribL2d;
#define glVertexAttribL2d glad_debug_glVertexAttribL2d
GLAD_API_CALL PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;
GLAD_API_CALL PFNGLVERTEXATTRIBL2DVPROC glad_debug_glVertexAttribL2dv;
#define glVertexAttribL2dv glad_debug_glVertexAttribL2dv
GLAD_API_CALL PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;
GLAD_API_CALL PFNGLVERTEXATTRIBL3DPROC glad_debug_glVertexAttribL3d;
#define glVertexAttribL3d glad_debug_glVertexAttribL3d
GLAD_API_CALL PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;
GLAD_API_CALL PFNGLVERTEXATTRIBL3DVPROC glad_debug_glVertexAttribL3dv;
#define glVertexAttribL3dv glad_debug_glVertexAttribL3dv
GLAD_API_CALL PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;
GLAD_API_CALL PFNGLVERTEXATTRIBL4DPROC glad_debug_glVertexAttribL4d;
#define glVertexAttribL4d glad_debug_glVertexAttribL4d
GLAD_API_CALL PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;
GLAD_API_CALL PFNGLVERTEXATTRIBL4DVPROC glad_debug_glVertexAttribL4dv;
#define glVertexAttribL4dv glad_debug_glVertexAttribL4dv
GLAD_API_CALL PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat;
GLAD_API_CALL PFNGLVERTEXATTRIBLFORMATPROC glad_debug_glVertexAttribLFormat;
#define glVertexAttribLFormat glad_debug_glVertexAttribLFormat
GLAD_API_CALL PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;
GLAD_API_CALL PFNGLVERTEXATTRIBLPOINTERPROC glad_debug_glVertexAttribLPointer;
#define glVertexAttribLPointer glad_debug_glVertexAttribLPointer
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIPROC glad_debug_glVertexAttribP1ui;
#define glVertexAttribP1ui glad_debug_glVertexAttribP1ui
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIVPROC glad_debug_glVertexAttribP1uiv;
#define glVertexAttribP1uiv glad_debug_glVertexAttribP1uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIPROC glad_debug_glVertexAttribP2ui;
#define glVertexAttribP2ui glad_debug_glVertexAttribP2ui
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIVPROC glad_debug_glVertexAttribP2uiv;
#define glVertexAttribP2uiv glad_debug_glVertexAttribP2uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIPROC glad_debug_glVertexAttribP3ui;
#define glVertexAttribP3ui glad_debug_glVertexAttribP3ui
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIVPROC glad_debug_glVertexAttribP3uiv;
#define glVertexAttribP3uiv glad_debug_glVertexAttribP3uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIPROC glad_debug_glVertexAttribP4ui;
#define glVertexAttribP4ui glad_debug_glVertexAttribP4ui
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIVPROC glad_debug_glVertexAttribP4uiv;
#define glVertexAttribP4uiv glad_debug_glVertexAttribP4uiv
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERPROC glad_debug_glVertexAttribPointer;
#define glVertexAttribPointer glad_debug_glVertexAttribPointer
GLAD_API_CALL PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor;
GLAD_API_CALL PFNGLVERTEXBINDINGDIVISORPROC glad_debug_glVertexBindingDivisor;
#define glVertexBindingDivisor glad_debug_glVertexBindingDivisor
GLAD_API_CALL PFNGLVERTEXP2UIPROC glad_glVertexP2ui;
GLAD_API_CALL PFNGLVERTEXP2UIPROC glad_debug_glVertexP2ui;
#define glVertexP2ui glad_debug_glVertexP2ui
GLAD_API_CALL PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;
GLAD_API_CALL PFNGLVERTEXP2UIVPROC glad_debug_glVertexP2uiv;
#define glVertexP2uiv glad_debug_glVertexP2uiv
GLAD_API_CALL PFNGLVERTEXP3UIPROC glad_glVertexP3ui;
GLAD_API_CALL PFNGLVERTEXP3UIPROC glad_debug_glVertexP3ui;
#define glVertexP3ui glad_debug_glVertexP3ui
GLAD_API_CALL PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;
GLAD_API_CALL PFNGLVERTEXP3UIVPROC glad_debug_glVertexP3uiv;
#define glVertexP3uiv glad_debug_glVertexP3uiv
GLAD_API_CALL PFNGLVERTEXP4UIPROC glad_glVertexP4ui;
GLAD_API_CALL PFNGLVERTEXP4UIPROC glad_debug_glVertexP4ui;
#define glVertexP4ui glad_debug_glVertexP4ui
GLAD_API_CALL PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;
GLAD_API_CALL PFNGLVERTEXP4UIVPROC glad_debug_glVertexP4uiv;
#define glVertexP4uiv glad_debug_glVertexP4uiv
GLAD_API_CALL PFNGLVERTEXPOINTERPROC glad_glVertexPointer;
GLAD_API_CALL PFNGLVERTEXPOINTERPROC glad_debug_glVertexPointer;
#define glVertexPointer glad_debug_glVertexPointer
GLAD_API_CALL PFNGLVIEWPORTPROC glad_glViewport;
GLAD_API_CALL PFNGLVIEWPORTPROC glad_debug_glViewport;
#define glViewport glad_debug_glViewport
GLAD_API_CALL PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;
GLAD_API_CALL PFNGLVIEWPORTARRAYVPROC glad_debug_glViewportArrayv;
#define glViewportArrayv glad_debug_glViewportArrayv
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFPROC glad_debug_glViewportIndexedf;
#define glViewportIndexedf glad_debug_glViewportIndexedf
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFVPROC glad_debug_glViewportIndexedfv;
#define glViewportIndexedfv glad_debug_glViewportIndexedfv
GLAD_API_CALL PFNGLWAITSYNCPROC glad_glWaitSync;
GLAD_API_CALL PFNGLWAITSYNCPROC glad_debug_glWaitSync;
#define glWaitSync glad_debug_glWaitSync
GLAD_API_CALL PFNGLWINDOWPOS2DPROC glad_glWindowPos2d;
GLAD_API_CALL PFNGLWINDOWPOS2DPROC glad_debug_glWindowPos2d;
#define glWindowPos2d glad_debug_glWindowPos2d
GLAD_API_CALL PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv;
GLAD_API_CALL PFNGLWINDOWPOS2DVPROC glad_debug_glWindowPos2dv;
#define glWindowPos2dv glad_debug_glWindowPos2dv
GLAD_API_CALL PFNGLWINDOWPOS2FPROC glad_glWindowPos2f;
GLAD_API_CALL PFNGLWINDOWPOS2FPROC glad_debug_glWindowPos2f;
#define glWindowPos2f glad_debug_glWindowPos2f
GLAD_API_CALL PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv;
GLAD_API_CALL PFNGLWINDOWPOS2FVPROC glad_debug_glWindowPos2fv;
#define glWindowPos2fv glad_debug_glWindowPos2fv
GLAD_API_CALL PFNGLWINDOWPOS2IPROC glad_glWindowPos2i;
GLAD_API_CALL PFNGLWINDOWPOS2IPROC glad_debug_glWindowPos2i;
#define glWindowPos2i glad_debug_glWindowPos2i
GLAD_API_CALL PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv;
GLAD_API_CALL PFNGLWINDOWPOS2IVPROC glad_debug_glWindowPos2iv;
#define glWindowPos2iv glad_debug_glWindowPos2iv
GLAD_API_CALL PFNGLWINDOWPOS2SPROC glad_glWindowPos2s;
GLAD_API_CALL PFNGLWINDOWPOS2SPROC glad_debug_glWindowPos2s;
#define glWindowPos2s glad_debug_glWindowPos2s
GLAD_API_CALL PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv;
GLAD_API_CALL PFNGLWINDOWPOS2SVPROC glad_debug_glWindowPos2sv;
#define glWindowPos2sv glad_debug_glWindowPos2sv
GLAD_API_CALL PFNGLWINDOWPOS3DPROC glad_glWindowPos3d;
GLAD_API_CALL PFNGLWINDOWPOS3DPROC glad_debug_glWindowPos3d;
#define glWindowPos3d glad_debug_glWindowPos3d
GLAD_API_CALL PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv;
GLAD_API_CALL PFNGLWINDOWPOS3DVPROC glad_debug_glWindowPos3dv;
#define glWindowPos3dv glad_debug_glWindowPos3dv
GLAD_API_CALL PFNGLWINDOWPOS3FPROC glad_glWindowPos3f;
GLAD_API_CALL PFNGLWINDOWPOS3FPROC glad_debug_glWindowPos3f;
#define glWindowPos3f glad_debug_glWindowPos3f
GLAD_API_CALL PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv;
GLAD_API_CALL PFNGLWINDOWPOS3FVPROC glad_debug_glWindowPos3fv;
#define glWindowPos3fv glad_debug_glWindowPos3fv
GLAD_API_CALL PFNGLWINDOWPOS3IPROC glad_glWindowPos3i;
GLAD_API_CALL PFNGLWINDOWPOS3IPROC glad_debug_glWindowPos3i;
#define glWindowPos3i glad_debug_glWindowPos3i
GLAD_API_CALL PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv;
GLAD_API_CALL PFNGLWINDOWPOS3IVPROC glad_debug_glWindowPos3iv;
#define glWindowPos3iv glad_debug_glWindowPos3iv
GLAD_API_CALL PFNGLWINDOWPOS3SPROC glad_glWindowPos3s;
GLAD_API_CALL PFNGLWINDOWPOS3SPROC glad_debug_glWindowPos3s;
#define glWindowPos3s glad_debug_glWindowPos3s
GLAD_API_CALL PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv;
GLAD_API_CALL PFNGLWINDOWPOS3SVPROC glad_debug_glWindowPos3sv;
#define glWindowPos3sv glad_debug_glWindowPos3sv


GLAD_API_CALL int gladLoadGLUserPtr( GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadGL( GLADloadfunc load);



GLAD_API_CALL void gladSetGLPreCallback(GLADprecallback cb);
GLAD_API_CALL void gladSetGLPostCallback(GLADpostcallback cb);



#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef GLAD_GL_IMPLEMENTATION
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
#define GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* GLAD_IMPL_UTIL_C_ */


int GLAD_GL_VERSION_1_0 = 0;
int GLAD_GL_VERSION_1_1 = 0;
int GLAD_GL_VERSION_1_2 = 0;
int GLAD_GL_VERSION_1_3 = 0;
int GLAD_GL_VERSION_1_4 = 0;
int GLAD_GL_VERSION_1_5 = 0;
int GLAD_GL_VERSION_2_0 = 0;
int GLAD_GL_VERSION_2_1 = 0;
int GLAD_GL_VERSION_3_0 = 0;
int GLAD_GL_VERSION_3_1 = 0;
int GLAD_GL_VERSION_3_2 = 0;
int GLAD_GL_VERSION_3_3 = 0;
int GLAD_GL_VERSION_4_0 = 0;
int GLAD_GL_VERSION_4_1 = 0;
int GLAD_GL_VERSION_4_2 = 0;
int GLAD_GL_VERSION_4_3 = 0;
int GLAD_GL_VERSION_4_4 = 0;
int GLAD_GL_VERSION_4_5 = 0;
int GLAD_GL_VERSION_4_6 = 0;


void _pre_call_gl_callback_default(const char *name, GLADapiproc apiproc, int len_args, ...) {
    (void) len_args;

    if (apiproc == NULL) {
        fprintf(stderr, "GLAD: ERROR %s is NULL!\n", name);
        return;
    }
    if (glad_glGetError == NULL) {
        fprintf(stderr, "GLAD: ERROR glGetError is NULL!\n");
        return;
    }

    (void) glad_glGetError();
}
void _post_call_gl_callback_default(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...) {
    GLenum error_code;

    (void) ret;
    (void) apiproc;
    (void) len_args;

    error_code = glad_glGetError();

    if (error_code != GL_NO_ERROR) {
        fprintf(stderr, "GLAD: ERROR %d in %s!\n", error_code, name);
    }
}

static GLADprecallback _pre_call_gl_callback = _pre_call_gl_callback_default;
void gladSetglPreCallback(GLADprecallback cb) {
    _pre_call_gl_callback = cb;
}
static GLADpostcallback _post_call_gl_callback = _post_call_gl_callback_default;
void gladSetglPostCallback(GLADpostcallback cb) {
    _post_call_gl_callback = cb;
}

PFNGLACCUMPROC glad_glAccum = NULL;
void GLAD_API_PTR glad_debug_impl_glAccum(GLenum arg0, GLfloat arg1) {
    _pre_call_gl_callback("glAccum", (GLADapiproc) glAccum, 2, arg0, arg1);
    glAccum(arg0, arg1);
    _post_call_gl_callback(NULL, "glAccum", (GLADapiproc) glAccum, 2, arg0, arg1);
    
}
PFNGLACCUMPROC glad_debug_glAccum = glad_debug_impl_glAccum;
PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram = NULL;
void GLAD_API_PTR glad_debug_impl_glActiveShaderProgram(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glActiveShaderProgram", (GLADapiproc) glActiveShaderProgram, 2, arg0, arg1);
    glActiveShaderProgram(arg0, arg1);
    _post_call_gl_callback(NULL, "glActiveShaderProgram", (GLADapiproc) glActiveShaderProgram, 2, arg0, arg1);
    
}
PFNGLACTIVESHADERPROGRAMPROC glad_debug_glActiveShaderProgram = glad_debug_impl_glActiveShaderProgram;
PFNGLACTIVETEXTUREPROC glad_glActiveTexture = NULL;
void GLAD_API_PTR glad_debug_impl_glActiveTexture(GLenum arg0) {
    _pre_call_gl_callback("glActiveTexture", (GLADapiproc) glActiveTexture, 1, arg0);
    glActiveTexture(arg0);
    _post_call_gl_callback(NULL, "glActiveTexture", (GLADapiproc) glActiveTexture, 1, arg0);
    
}
PFNGLACTIVETEXTUREPROC glad_debug_glActiveTexture = glad_debug_impl_glActiveTexture;
PFNGLALPHAFUNCPROC glad_glAlphaFunc = NULL;
void GLAD_API_PTR glad_debug_impl_glAlphaFunc(GLenum arg0, GLfloat arg1) {
    _pre_call_gl_callback("glAlphaFunc", (GLADapiproc) glAlphaFunc, 2, arg0, arg1);
    glAlphaFunc(arg0, arg1);
    _post_call_gl_callback(NULL, "glAlphaFunc", (GLADapiproc) glAlphaFunc, 2, arg0, arg1);
    
}
PFNGLALPHAFUNCPROC glad_debug_glAlphaFunc = glad_debug_impl_glAlphaFunc;
PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glAreTexturesResident(GLsizei arg0, const GLuint * arg1, GLboolean * arg2) {
    GLboolean ret;
    _pre_call_gl_callback("glAreTexturesResident", (GLADapiproc) glAreTexturesResident, 3, arg0, arg1, arg2);
    ret = glAreTexturesResident(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glAreTexturesResident", (GLADapiproc) glAreTexturesResident, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLARETEXTURESRESIDENTPROC glad_debug_glAreTexturesResident = glad_debug_impl_glAreTexturesResident;
PFNGLARRAYELEMENTPROC glad_glArrayElement = NULL;
void GLAD_API_PTR glad_debug_impl_glArrayElement(GLint arg0) {
    _pre_call_gl_callback("glArrayElement", (GLADapiproc) glArrayElement, 1, arg0);
    glArrayElement(arg0);
    _post_call_gl_callback(NULL, "glArrayElement", (GLADapiproc) glArrayElement, 1, arg0);
    
}
PFNGLARRAYELEMENTPROC glad_debug_glArrayElement = glad_debug_impl_glArrayElement;
PFNGLATTACHSHADERPROC glad_glAttachShader = NULL;
void GLAD_API_PTR glad_debug_impl_glAttachShader(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glAttachShader", (GLADapiproc) glAttachShader, 2, arg0, arg1);
    glAttachShader(arg0, arg1);
    _post_call_gl_callback(NULL, "glAttachShader", (GLADapiproc) glAttachShader, 2, arg0, arg1);
    
}
PFNGLATTACHSHADERPROC glad_debug_glAttachShader = glad_debug_impl_glAttachShader;
PFNGLBEGINPROC glad_glBegin = NULL;
void GLAD_API_PTR glad_debug_impl_glBegin(GLenum arg0) {
    _pre_call_gl_callback("glBegin", (GLADapiproc) glBegin, 1, arg0);
    glBegin(arg0);
    _post_call_gl_callback(NULL, "glBegin", (GLADapiproc) glBegin, 1, arg0);
    
}
PFNGLBEGINPROC glad_debug_glBegin = glad_debug_impl_glBegin;
PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender = NULL;
void GLAD_API_PTR glad_debug_impl_glBeginConditionalRender(GLuint arg0, GLenum arg1) {
    _pre_call_gl_callback("glBeginConditionalRender", (GLADapiproc) glBeginConditionalRender, 2, arg0, arg1);
    glBeginConditionalRender(arg0, arg1);
    _post_call_gl_callback(NULL, "glBeginConditionalRender", (GLADapiproc) glBeginConditionalRender, 2, arg0, arg1);
    
}
PFNGLBEGINCONDITIONALRENDERPROC glad_debug_glBeginConditionalRender = glad_debug_impl_glBeginConditionalRender;
PFNGLBEGINQUERYPROC glad_glBeginQuery = NULL;
void GLAD_API_PTR glad_debug_impl_glBeginQuery(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBeginQuery", (GLADapiproc) glBeginQuery, 2, arg0, arg1);
    glBeginQuery(arg0, arg1);
    _post_call_gl_callback(NULL, "glBeginQuery", (GLADapiproc) glBeginQuery, 2, arg0, arg1);
    
}
PFNGLBEGINQUERYPROC glad_debug_glBeginQuery = glad_debug_impl_glBeginQuery;
PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed = NULL;
void GLAD_API_PTR glad_debug_impl_glBeginQueryIndexed(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glBeginQueryIndexed", (GLADapiproc) glBeginQueryIndexed, 3, arg0, arg1, arg2);
    glBeginQueryIndexed(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBeginQueryIndexed", (GLADapiproc) glBeginQueryIndexed, 3, arg0, arg1, arg2);
    
}
PFNGLBEGINQUERYINDEXEDPROC glad_debug_glBeginQueryIndexed = glad_debug_impl_glBeginQueryIndexed;
PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glBeginTransformFeedback(GLenum arg0) {
    _pre_call_gl_callback("glBeginTransformFeedback", (GLADapiproc) glBeginTransformFeedback, 1, arg0);
    glBeginTransformFeedback(arg0);
    _post_call_gl_callback(NULL, "glBeginTransformFeedback", (GLADapiproc) glBeginTransformFeedback, 1, arg0);
    
}
PFNGLBEGINTRANSFORMFEEDBACKPROC glad_debug_glBeginTransformFeedback = glad_debug_impl_glBeginTransformFeedback;
PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation = NULL;
void GLAD_API_PTR glad_debug_impl_glBindAttribLocation(GLuint arg0, GLuint arg1, const GLchar * arg2) {
    _pre_call_gl_callback("glBindAttribLocation", (GLADapiproc) glBindAttribLocation, 3, arg0, arg1, arg2);
    glBindAttribLocation(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBindAttribLocation", (GLADapiproc) glBindAttribLocation, 3, arg0, arg1, arg2);
    
}
PFNGLBINDATTRIBLOCATIONPROC glad_debug_glBindAttribLocation = glad_debug_impl_glBindAttribLocation;
PFNGLBINDBUFFERPROC glad_glBindBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glBindBuffer(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindBuffer", (GLADapiproc) glBindBuffer, 2, arg0, arg1);
    glBindBuffer(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindBuffer", (GLADapiproc) glBindBuffer, 2, arg0, arg1);
    
}
PFNGLBINDBUFFERPROC glad_debug_glBindBuffer = glad_debug_impl_glBindBuffer;
PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase = NULL;
void GLAD_API_PTR glad_debug_impl_glBindBufferBase(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glBindBufferBase", (GLADapiproc) glBindBufferBase, 3, arg0, arg1, arg2);
    glBindBufferBase(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBindBufferBase", (GLADapiproc) glBindBufferBase, 3, arg0, arg1, arg2);
    
}
PFNGLBINDBUFFERBASEPROC glad_debug_glBindBufferBase = glad_debug_impl_glBindBufferBase;
PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange = NULL;
void GLAD_API_PTR glad_debug_impl_glBindBufferRange(GLenum arg0, GLuint arg1, GLuint arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_gl_callback("glBindBufferRange", (GLADapiproc) glBindBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
    glBindBufferRange(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glBindBufferRange", (GLADapiproc) glBindBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLBINDBUFFERRANGEPROC glad_debug_glBindBufferRange = glad_debug_impl_glBindBufferRange;
PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase = NULL;
void GLAD_API_PTR glad_debug_impl_glBindBuffersBase(GLenum arg0, GLuint arg1, GLsizei arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glBindBuffersBase", (GLADapiproc) glBindBuffersBase, 4, arg0, arg1, arg2, arg3);
    glBindBuffersBase(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBindBuffersBase", (GLADapiproc) glBindBuffersBase, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBINDBUFFERSBASEPROC glad_debug_glBindBuffersBase = glad_debug_impl_glBindBuffersBase;
PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange = NULL;
void GLAD_API_PTR glad_debug_impl_glBindBuffersRange(GLenum arg0, GLuint arg1, GLsizei arg2, const GLuint * arg3, const GLintptr * arg4, const GLsizeiptr * arg5) {
    _pre_call_gl_callback("glBindBuffersRange", (GLADapiproc) glBindBuffersRange, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glBindBuffersRange(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glBindBuffersRange", (GLADapiproc) glBindBuffersRange, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLBINDBUFFERSRANGEPROC glad_debug_glBindBuffersRange = glad_debug_impl_glBindBuffersRange;
PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation = NULL;
void GLAD_API_PTR glad_debug_impl_glBindFragDataLocation(GLuint arg0, GLuint arg1, const GLchar * arg2) {
    _pre_call_gl_callback("glBindFragDataLocation", (GLADapiproc) glBindFragDataLocation, 3, arg0, arg1, arg2);
    glBindFragDataLocation(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBindFragDataLocation", (GLADapiproc) glBindFragDataLocation, 3, arg0, arg1, arg2);
    
}
PFNGLBINDFRAGDATALOCATIONPROC glad_debug_glBindFragDataLocation = glad_debug_impl_glBindFragDataLocation;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed = NULL;
void GLAD_API_PTR glad_debug_impl_glBindFragDataLocationIndexed(GLuint arg0, GLuint arg1, GLuint arg2, const GLchar * arg3) {
    _pre_call_gl_callback("glBindFragDataLocationIndexed", (GLADapiproc) glBindFragDataLocationIndexed, 4, arg0, arg1, arg2, arg3);
    glBindFragDataLocationIndexed(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBindFragDataLocationIndexed", (GLADapiproc) glBindFragDataLocationIndexed, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_debug_glBindFragDataLocationIndexed = glad_debug_impl_glBindFragDataLocationIndexed;
PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glBindFramebuffer(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindFramebuffer", (GLADapiproc) glBindFramebuffer, 2, arg0, arg1);
    glBindFramebuffer(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindFramebuffer", (GLADapiproc) glBindFramebuffer, 2, arg0, arg1);
    
}
PFNGLBINDFRAMEBUFFERPROC glad_debug_glBindFramebuffer = glad_debug_impl_glBindFramebuffer;
PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture = NULL;
void GLAD_API_PTR glad_debug_impl_glBindImageTexture(GLuint arg0, GLuint arg1, GLint arg2, GLboolean arg3, GLint arg4, GLenum arg5, GLenum arg6) {
    _pre_call_gl_callback("glBindImageTexture", (GLADapiproc) glBindImageTexture, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glBindImageTexture(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glBindImageTexture", (GLADapiproc) glBindImageTexture, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLBINDIMAGETEXTUREPROC glad_debug_glBindImageTexture = glad_debug_impl_glBindImageTexture;
PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures = NULL;
void GLAD_API_PTR glad_debug_impl_glBindImageTextures(GLuint arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glBindImageTextures", (GLADapiproc) glBindImageTextures, 3, arg0, arg1, arg2);
    glBindImageTextures(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBindImageTextures", (GLADapiproc) glBindImageTextures, 3, arg0, arg1, arg2);
    
}
PFNGLBINDIMAGETEXTURESPROC glad_debug_glBindImageTextures = glad_debug_impl_glBindImageTextures;
PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline = NULL;
void GLAD_API_PTR glad_debug_impl_glBindProgramPipeline(GLuint arg0) {
    _pre_call_gl_callback("glBindProgramPipeline", (GLADapiproc) glBindProgramPipeline, 1, arg0);
    glBindProgramPipeline(arg0);
    _post_call_gl_callback(NULL, "glBindProgramPipeline", (GLADapiproc) glBindProgramPipeline, 1, arg0);
    
}
PFNGLBINDPROGRAMPIPELINEPROC glad_debug_glBindProgramPipeline = glad_debug_impl_glBindProgramPipeline;
PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glBindRenderbuffer(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindRenderbuffer", (GLADapiproc) glBindRenderbuffer, 2, arg0, arg1);
    glBindRenderbuffer(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindRenderbuffer", (GLADapiproc) glBindRenderbuffer, 2, arg0, arg1);
    
}
PFNGLBINDRENDERBUFFERPROC glad_debug_glBindRenderbuffer = glad_debug_impl_glBindRenderbuffer;
PFNGLBINDSAMPLERPROC glad_glBindSampler = NULL;
void GLAD_API_PTR glad_debug_impl_glBindSampler(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindSampler", (GLADapiproc) glBindSampler, 2, arg0, arg1);
    glBindSampler(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindSampler", (GLADapiproc) glBindSampler, 2, arg0, arg1);
    
}
PFNGLBINDSAMPLERPROC glad_debug_glBindSampler = glad_debug_impl_glBindSampler;
PFNGLBINDSAMPLERSPROC glad_glBindSamplers = NULL;
void GLAD_API_PTR glad_debug_impl_glBindSamplers(GLuint arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glBindSamplers", (GLADapiproc) glBindSamplers, 3, arg0, arg1, arg2);
    glBindSamplers(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBindSamplers", (GLADapiproc) glBindSamplers, 3, arg0, arg1, arg2);
    
}
PFNGLBINDSAMPLERSPROC glad_debug_glBindSamplers = glad_debug_impl_glBindSamplers;
PFNGLBINDTEXTUREPROC glad_glBindTexture = NULL;
void GLAD_API_PTR glad_debug_impl_glBindTexture(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindTexture", (GLADapiproc) glBindTexture, 2, arg0, arg1);
    glBindTexture(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindTexture", (GLADapiproc) glBindTexture, 2, arg0, arg1);
    
}
PFNGLBINDTEXTUREPROC glad_debug_glBindTexture = glad_debug_impl_glBindTexture;
PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit = NULL;
void GLAD_API_PTR glad_debug_impl_glBindTextureUnit(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindTextureUnit", (GLADapiproc) glBindTextureUnit, 2, arg0, arg1);
    glBindTextureUnit(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindTextureUnit", (GLADapiproc) glBindTextureUnit, 2, arg0, arg1);
    
}
PFNGLBINDTEXTUREUNITPROC glad_debug_glBindTextureUnit = glad_debug_impl_glBindTextureUnit;
PFNGLBINDTEXTURESPROC glad_glBindTextures = NULL;
void GLAD_API_PTR glad_debug_impl_glBindTextures(GLuint arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glBindTextures", (GLADapiproc) glBindTextures, 3, arg0, arg1, arg2);
    glBindTextures(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBindTextures", (GLADapiproc) glBindTextures, 3, arg0, arg1, arg2);
    
}
PFNGLBINDTEXTURESPROC glad_debug_glBindTextures = glad_debug_impl_glBindTextures;
PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glBindTransformFeedback(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindTransformFeedback", (GLADapiproc) glBindTransformFeedback, 2, arg0, arg1);
    glBindTransformFeedback(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindTransformFeedback", (GLADapiproc) glBindTransformFeedback, 2, arg0, arg1);
    
}
PFNGLBINDTRANSFORMFEEDBACKPROC glad_debug_glBindTransformFeedback = glad_debug_impl_glBindTransformFeedback;
PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray = NULL;
void GLAD_API_PTR glad_debug_impl_glBindVertexArray(GLuint arg0) {
    _pre_call_gl_callback("glBindVertexArray", (GLADapiproc) glBindVertexArray, 1, arg0);
    glBindVertexArray(arg0);
    _post_call_gl_callback(NULL, "glBindVertexArray", (GLADapiproc) glBindVertexArray, 1, arg0);
    
}
PFNGLBINDVERTEXARRAYPROC glad_debug_glBindVertexArray = glad_debug_impl_glBindVertexArray;
PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glBindVertexBuffer(GLuint arg0, GLuint arg1, GLintptr arg2, GLsizei arg3) {
    _pre_call_gl_callback("glBindVertexBuffer", (GLADapiproc) glBindVertexBuffer, 4, arg0, arg1, arg2, arg3);
    glBindVertexBuffer(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBindVertexBuffer", (GLADapiproc) glBindVertexBuffer, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBINDVERTEXBUFFERPROC glad_debug_glBindVertexBuffer = glad_debug_impl_glBindVertexBuffer;
PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glBindVertexBuffers(GLuint arg0, GLsizei arg1, const GLuint * arg2, const GLintptr * arg3, const GLsizei * arg4) {
    _pre_call_gl_callback("glBindVertexBuffers", (GLADapiproc) glBindVertexBuffers, 5, arg0, arg1, arg2, arg3, arg4);
    glBindVertexBuffers(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glBindVertexBuffers", (GLADapiproc) glBindVertexBuffers, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLBINDVERTEXBUFFERSPROC glad_debug_glBindVertexBuffers = glad_debug_impl_glBindVertexBuffers;
PFNGLBITMAPPROC glad_glBitmap = NULL;
void GLAD_API_PTR glad_debug_impl_glBitmap(GLsizei arg0, GLsizei arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, const GLubyte * arg6) {
    _pre_call_gl_callback("glBitmap", (GLADapiproc) glBitmap, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glBitmap(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glBitmap", (GLADapiproc) glBitmap, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLBITMAPPROC glad_debug_glBitmap = glad_debug_impl_glBitmap;
PFNGLBLENDCOLORPROC glad_glBlendColor = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendColor(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glBlendColor", (GLADapiproc) glBlendColor, 4, arg0, arg1, arg2, arg3);
    glBlendColor(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBlendColor", (GLADapiproc) glBlendColor, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBLENDCOLORPROC glad_debug_glBlendColor = glad_debug_impl_glBlendColor;
PFNGLBLENDEQUATIONPROC glad_glBlendEquation = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendEquation(GLenum arg0) {
    _pre_call_gl_callback("glBlendEquation", (GLADapiproc) glBlendEquation, 1, arg0);
    glBlendEquation(arg0);
    _post_call_gl_callback(NULL, "glBlendEquation", (GLADapiproc) glBlendEquation, 1, arg0);
    
}
PFNGLBLENDEQUATIONPROC glad_debug_glBlendEquation = glad_debug_impl_glBlendEquation;
PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendEquationSeparate(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glBlendEquationSeparate", (GLADapiproc) glBlendEquationSeparate, 2, arg0, arg1);
    glBlendEquationSeparate(arg0, arg1);
    _post_call_gl_callback(NULL, "glBlendEquationSeparate", (GLADapiproc) glBlendEquationSeparate, 2, arg0, arg1);
    
}
PFNGLBLENDEQUATIONSEPARATEPROC glad_debug_glBlendEquationSeparate = glad_debug_impl_glBlendEquationSeparate;
PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendEquationSeparatei(GLuint arg0, GLenum arg1, GLenum arg2) {
    _pre_call_gl_callback("glBlendEquationSeparatei", (GLADapiproc) glBlendEquationSeparatei, 3, arg0, arg1, arg2);
    glBlendEquationSeparatei(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBlendEquationSeparatei", (GLADapiproc) glBlendEquationSeparatei, 3, arg0, arg1, arg2);
    
}
PFNGLBLENDEQUATIONSEPARATEIPROC glad_debug_glBlendEquationSeparatei = glad_debug_impl_glBlendEquationSeparatei;
PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendEquationi(GLuint arg0, GLenum arg1) {
    _pre_call_gl_callback("glBlendEquationi", (GLADapiproc) glBlendEquationi, 2, arg0, arg1);
    glBlendEquationi(arg0, arg1);
    _post_call_gl_callback(NULL, "glBlendEquationi", (GLADapiproc) glBlendEquationi, 2, arg0, arg1);
    
}
PFNGLBLENDEQUATIONIPROC glad_debug_glBlendEquationi = glad_debug_impl_glBlendEquationi;
PFNGLBLENDFUNCPROC glad_glBlendFunc = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendFunc(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glBlendFunc", (GLADapiproc) glBlendFunc, 2, arg0, arg1);
    glBlendFunc(arg0, arg1);
    _post_call_gl_callback(NULL, "glBlendFunc", (GLADapiproc) glBlendFunc, 2, arg0, arg1);
    
}
PFNGLBLENDFUNCPROC glad_debug_glBlendFunc = glad_debug_impl_glBlendFunc;
PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendFuncSeparate(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3) {
    _pre_call_gl_callback("glBlendFuncSeparate", (GLADapiproc) glBlendFuncSeparate, 4, arg0, arg1, arg2, arg3);
    glBlendFuncSeparate(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBlendFuncSeparate", (GLADapiproc) glBlendFuncSeparate, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBLENDFUNCSEPARATEPROC glad_debug_glBlendFuncSeparate = glad_debug_impl_glBlendFuncSeparate;
PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendFuncSeparatei(GLuint arg0, GLenum arg1, GLenum arg2, GLenum arg3, GLenum arg4) {
    _pre_call_gl_callback("glBlendFuncSeparatei", (GLADapiproc) glBlendFuncSeparatei, 5, arg0, arg1, arg2, arg3, arg4);
    glBlendFuncSeparatei(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glBlendFuncSeparatei", (GLADapiproc) glBlendFuncSeparatei, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLBLENDFUNCSEPARATEIPROC glad_debug_glBlendFuncSeparatei = glad_debug_impl_glBlendFuncSeparatei;
PFNGLBLENDFUNCIPROC glad_glBlendFunci = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendFunci(GLuint arg0, GLenum arg1, GLenum arg2) {
    _pre_call_gl_callback("glBlendFunci", (GLADapiproc) glBlendFunci, 3, arg0, arg1, arg2);
    glBlendFunci(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBlendFunci", (GLADapiproc) glBlendFunci, 3, arg0, arg1, arg2);
    
}
PFNGLBLENDFUNCIPROC glad_debug_glBlendFunci = glad_debug_impl_glBlendFunci;
PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glBlitFramebuffer(GLint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLint arg7, GLbitfield arg8, GLenum arg9) {
    _pre_call_gl_callback("glBlitFramebuffer", (GLADapiproc) glBlitFramebuffer, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    glBlitFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_gl_callback(NULL, "glBlitFramebuffer", (GLADapiproc) glBlitFramebuffer, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
}
PFNGLBLITFRAMEBUFFERPROC glad_debug_glBlitFramebuffer = glad_debug_impl_glBlitFramebuffer;
PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glBlitNamedFramebuffer(GLuint arg0, GLuint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLint arg7, GLint arg8, GLint arg9, GLbitfield arg10, GLenum arg11) {
    _pre_call_gl_callback("glBlitNamedFramebuffer", (GLADapiproc) glBlitNamedFramebuffer, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    glBlitNamedFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    _post_call_gl_callback(NULL, "glBlitNamedFramebuffer", (GLADapiproc) glBlitNamedFramebuffer, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
}
PFNGLBLITNAMEDFRAMEBUFFERPROC glad_debug_glBlitNamedFramebuffer = glad_debug_impl_glBlitNamedFramebuffer;
PFNGLBUFFERDATAPROC glad_glBufferData = NULL;
void GLAD_API_PTR glad_debug_impl_glBufferData(GLenum arg0, GLsizeiptr arg1, const void * arg2, GLenum arg3) {
    _pre_call_gl_callback("glBufferData", (GLADapiproc) glBufferData, 4, arg0, arg1, arg2, arg3);
    glBufferData(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBufferData", (GLADapiproc) glBufferData, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBUFFERDATAPROC glad_debug_glBufferData = glad_debug_impl_glBufferData;
PFNGLBUFFERSTORAGEPROC glad_glBufferStorage = NULL;
void GLAD_API_PTR glad_debug_impl_glBufferStorage(GLenum arg0, GLsizeiptr arg1, const void * arg2, GLbitfield arg3) {
    _pre_call_gl_callback("glBufferStorage", (GLADapiproc) glBufferStorage, 4, arg0, arg1, arg2, arg3);
    glBufferStorage(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBufferStorage", (GLADapiproc) glBufferStorage, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBUFFERSTORAGEPROC glad_debug_glBufferStorage = glad_debug_impl_glBufferStorage;
PFNGLBUFFERSUBDATAPROC glad_glBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glBufferSubData(GLenum arg0, GLintptr arg1, GLsizeiptr arg2, const void * arg3) {
    _pre_call_gl_callback("glBufferSubData", (GLADapiproc) glBufferSubData, 4, arg0, arg1, arg2, arg3);
    glBufferSubData(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBufferSubData", (GLADapiproc) glBufferSubData, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBUFFERSUBDATAPROC glad_debug_glBufferSubData = glad_debug_impl_glBufferSubData;
PFNGLCALLLISTPROC glad_glCallList = NULL;
void GLAD_API_PTR glad_debug_impl_glCallList(GLuint arg0) {
    _pre_call_gl_callback("glCallList", (GLADapiproc) glCallList, 1, arg0);
    glCallList(arg0);
    _post_call_gl_callback(NULL, "glCallList", (GLADapiproc) glCallList, 1, arg0);
    
}
PFNGLCALLLISTPROC glad_debug_glCallList = glad_debug_impl_glCallList;
PFNGLCALLLISTSPROC glad_glCallLists = NULL;
void GLAD_API_PTR glad_debug_impl_glCallLists(GLsizei arg0, GLenum arg1, const void * arg2) {
    _pre_call_gl_callback("glCallLists", (GLADapiproc) glCallLists, 3, arg0, arg1, arg2);
    glCallLists(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glCallLists", (GLADapiproc) glCallLists, 3, arg0, arg1, arg2);
    
}
PFNGLCALLLISTSPROC glad_debug_glCallLists = glad_debug_impl_glCallLists;
PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus = NULL;
GLenum GLAD_API_PTR glad_debug_impl_glCheckFramebufferStatus(GLenum arg0) {
    GLenum ret;
    _pre_call_gl_callback("glCheckFramebufferStatus", (GLADapiproc) glCheckFramebufferStatus, 1, arg0);
    ret = glCheckFramebufferStatus(arg0);
    _post_call_gl_callback((void*) &ret, "glCheckFramebufferStatus", (GLADapiproc) glCheckFramebufferStatus, 1, arg0);
    return ret;
}
PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_debug_glCheckFramebufferStatus = glad_debug_impl_glCheckFramebufferStatus;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus = NULL;
GLenum GLAD_API_PTR glad_debug_impl_glCheckNamedFramebufferStatus(GLuint arg0, GLenum arg1) {
    GLenum ret;
    _pre_call_gl_callback("glCheckNamedFramebufferStatus", (GLADapiproc) glCheckNamedFramebufferStatus, 2, arg0, arg1);
    ret = glCheckNamedFramebufferStatus(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glCheckNamedFramebufferStatus", (GLADapiproc) glCheckNamedFramebufferStatus, 2, arg0, arg1);
    return ret;
}
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_debug_glCheckNamedFramebufferStatus = glad_debug_impl_glCheckNamedFramebufferStatus;
PFNGLCLAMPCOLORPROC glad_glClampColor = NULL;
void GLAD_API_PTR glad_debug_impl_glClampColor(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glClampColor", (GLADapiproc) glClampColor, 2, arg0, arg1);
    glClampColor(arg0, arg1);
    _post_call_gl_callback(NULL, "glClampColor", (GLADapiproc) glClampColor, 2, arg0, arg1);
    
}
PFNGLCLAMPCOLORPROC glad_debug_glClampColor = glad_debug_impl_glClampColor;
PFNGLCLEARPROC glad_glClear = NULL;
void GLAD_API_PTR glad_debug_impl_glClear(GLbitfield arg0) {
    _pre_call_gl_callback("glClear", (GLADapiproc) glClear, 1, arg0);
    glClear(arg0);
    _post_call_gl_callback(NULL, "glClear", (GLADapiproc) glClear, 1, arg0);
    
}
PFNGLCLEARPROC glad_debug_glClear = glad_debug_impl_glClear;
PFNGLCLEARACCUMPROC glad_glClearAccum = NULL;
void GLAD_API_PTR glad_debug_impl_glClearAccum(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glClearAccum", (GLADapiproc) glClearAccum, 4, arg0, arg1, arg2, arg3);
    glClearAccum(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glClearAccum", (GLADapiproc) glClearAccum, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCLEARACCUMPROC glad_debug_glClearAccum = glad_debug_impl_glClearAccum;
PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData = NULL;
void GLAD_API_PTR glad_debug_impl_glClearBufferData(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3, const void * arg4) {
    _pre_call_gl_callback("glClearBufferData", (GLADapiproc) glClearBufferData, 5, arg0, arg1, arg2, arg3, arg4);
    glClearBufferData(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glClearBufferData", (GLADapiproc) glClearBufferData, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLCLEARBUFFERDATAPROC glad_debug_glClearBufferData = glad_debug_impl_glClearBufferData;
PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glClearBufferSubData(GLenum arg0, GLenum arg1, GLintptr arg2, GLsizeiptr arg3, GLenum arg4, GLenum arg5, const void * arg6) {
    _pre_call_gl_callback("glClearBufferSubData", (GLADapiproc) glClearBufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glClearBufferSubData(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glClearBufferSubData", (GLADapiproc) glClearBufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLCLEARBUFFERSUBDATAPROC glad_debug_glClearBufferSubData = glad_debug_impl_glClearBufferSubData;
PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi = NULL;
void GLAD_API_PTR glad_debug_impl_glClearBufferfi(GLenum arg0, GLint arg1, GLfloat arg2, GLint arg3) {
    _pre_call_gl_callback("glClearBufferfi", (GLADapiproc) glClearBufferfi, 4, arg0, arg1, arg2, arg3);
    glClearBufferfi(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glClearBufferfi", (GLADapiproc) glClearBufferfi, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCLEARBUFFERFIPROC glad_debug_glClearBufferfi = glad_debug_impl_glClearBufferfi;
PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv = NULL;
void GLAD_API_PTR glad_debug_impl_glClearBufferfv(GLenum arg0, GLint arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glClearBufferfv", (GLADapiproc) glClearBufferfv, 3, arg0, arg1, arg2);
    glClearBufferfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glClearBufferfv", (GLADapiproc) glClearBufferfv, 3, arg0, arg1, arg2);
    
}
PFNGLCLEARBUFFERFVPROC glad_debug_glClearBufferfv = glad_debug_impl_glClearBufferfv;
PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv = NULL;
void GLAD_API_PTR glad_debug_impl_glClearBufferiv(GLenum arg0, GLint arg1, const GLint * arg2) {
    _pre_call_gl_callback("glClearBufferiv", (GLADapiproc) glClearBufferiv, 3, arg0, arg1, arg2);
    glClearBufferiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glClearBufferiv", (GLADapiproc) glClearBufferiv, 3, arg0, arg1, arg2);
    
}
PFNGLCLEARBUFFERIVPROC glad_debug_glClearBufferiv = glad_debug_impl_glClearBufferiv;
PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glClearBufferuiv(GLenum arg0, GLint arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glClearBufferuiv", (GLADapiproc) glClearBufferuiv, 3, arg0, arg1, arg2);
    glClearBufferuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glClearBufferuiv", (GLADapiproc) glClearBufferuiv, 3, arg0, arg1, arg2);
    
}
PFNGLCLEARBUFFERUIVPROC glad_debug_glClearBufferuiv = glad_debug_impl_glClearBufferuiv;
PFNGLCLEARCOLORPROC glad_glClearColor = NULL;
void GLAD_API_PTR glad_debug_impl_glClearColor(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glClearColor", (GLADapiproc) glClearColor, 4, arg0, arg1, arg2, arg3);
    glClearColor(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glClearColor", (GLADapiproc) glClearColor, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCLEARCOLORPROC glad_debug_glClearColor = glad_debug_impl_glClearColor;
PFNGLCLEARDEPTHPROC glad_glClearDepth = NULL;
void GLAD_API_PTR glad_debug_impl_glClearDepth(GLdouble arg0) {
    _pre_call_gl_callback("glClearDepth", (GLADapiproc) glClearDepth, 1, arg0);
    glClearDepth(arg0);
    _post_call_gl_callback(NULL, "glClearDepth", (GLADapiproc) glClearDepth, 1, arg0);
    
}
PFNGLCLEARDEPTHPROC glad_debug_glClearDepth = glad_debug_impl_glClearDepth;
PFNGLCLEARDEPTHFPROC glad_glClearDepthf = NULL;
void GLAD_API_PTR glad_debug_impl_glClearDepthf(GLfloat arg0) {
    _pre_call_gl_callback("glClearDepthf", (GLADapiproc) glClearDepthf, 1, arg0);
    glClearDepthf(arg0);
    _post_call_gl_callback(NULL, "glClearDepthf", (GLADapiproc) glClearDepthf, 1, arg0);
    
}
PFNGLCLEARDEPTHFPROC glad_debug_glClearDepthf = glad_debug_impl_glClearDepthf;
PFNGLCLEARINDEXPROC glad_glClearIndex = NULL;
void GLAD_API_PTR glad_debug_impl_glClearIndex(GLfloat arg0) {
    _pre_call_gl_callback("glClearIndex", (GLADapiproc) glClearIndex, 1, arg0);
    glClearIndex(arg0);
    _post_call_gl_callback(NULL, "glClearIndex", (GLADapiproc) glClearIndex, 1, arg0);
    
}
PFNGLCLEARINDEXPROC glad_debug_glClearIndex = glad_debug_impl_glClearIndex;
PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData = NULL;
void GLAD_API_PTR glad_debug_impl_glClearNamedBufferData(GLuint arg0, GLenum arg1, GLenum arg2, GLenum arg3, const void * arg4) {
    _pre_call_gl_callback("glClearNamedBufferData", (GLADapiproc) glClearNamedBufferData, 5, arg0, arg1, arg2, arg3, arg4);
    glClearNamedBufferData(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glClearNamedBufferData", (GLADapiproc) glClearNamedBufferData, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLCLEARNAMEDBUFFERDATAPROC glad_debug_glClearNamedBufferData = glad_debug_impl_glClearNamedBufferData;
PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glClearNamedBufferSubData(GLuint arg0, GLenum arg1, GLintptr arg2, GLsizeiptr arg3, GLenum arg4, GLenum arg5, const void * arg6) {
    _pre_call_gl_callback("glClearNamedBufferSubData", (GLADapiproc) glClearNamedBufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glClearNamedBufferSubData(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glClearNamedBufferSubData", (GLADapiproc) glClearNamedBufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_debug_glClearNamedBufferSubData = glad_debug_impl_glClearNamedBufferSubData;
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi = NULL;
void GLAD_API_PTR glad_debug_impl_glClearNamedFramebufferfi(GLuint arg0, GLenum arg1, GLint arg2, GLfloat arg3, GLint arg4) {
    _pre_call_gl_callback("glClearNamedFramebufferfi", (GLADapiproc) glClearNamedFramebufferfi, 5, arg0, arg1, arg2, arg3, arg4);
    glClearNamedFramebufferfi(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glClearNamedFramebufferfi", (GLADapiproc) glClearNamedFramebufferfi, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_debug_glClearNamedFramebufferfi = glad_debug_impl_glClearNamedFramebufferfi;
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv = NULL;
void GLAD_API_PTR glad_debug_impl_glClearNamedFramebufferfv(GLuint arg0, GLenum arg1, GLint arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glClearNamedFramebufferfv", (GLADapiproc) glClearNamedFramebufferfv, 4, arg0, arg1, arg2, arg3);
    glClearNamedFramebufferfv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glClearNamedFramebufferfv", (GLADapiproc) glClearNamedFramebufferfv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_debug_glClearNamedFramebufferfv = glad_debug_impl_glClearNamedFramebufferfv;
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv = NULL;
void GLAD_API_PTR glad_debug_impl_glClearNamedFramebufferiv(GLuint arg0, GLenum arg1, GLint arg2, const GLint * arg3) {
    _pre_call_gl_callback("glClearNamedFramebufferiv", (GLADapiproc) glClearNamedFramebufferiv, 4, arg0, arg1, arg2, arg3);
    glClearNamedFramebufferiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glClearNamedFramebufferiv", (GLADapiproc) glClearNamedFramebufferiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_debug_glClearNamedFramebufferiv = glad_debug_impl_glClearNamedFramebufferiv;
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glClearNamedFramebufferuiv(GLuint arg0, GLenum arg1, GLint arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glClearNamedFramebufferuiv", (GLADapiproc) glClearNamedFramebufferuiv, 4, arg0, arg1, arg2, arg3);
    glClearNamedFramebufferuiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glClearNamedFramebufferuiv", (GLADapiproc) glClearNamedFramebufferuiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_debug_glClearNamedFramebufferuiv = glad_debug_impl_glClearNamedFramebufferuiv;
PFNGLCLEARSTENCILPROC glad_glClearStencil = NULL;
void GLAD_API_PTR glad_debug_impl_glClearStencil(GLint arg0) {
    _pre_call_gl_callback("glClearStencil", (GLADapiproc) glClearStencil, 1, arg0);
    glClearStencil(arg0);
    _post_call_gl_callback(NULL, "glClearStencil", (GLADapiproc) glClearStencil, 1, arg0);
    
}
PFNGLCLEARSTENCILPROC glad_debug_glClearStencil = glad_debug_impl_glClearStencil;
PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage = NULL;
void GLAD_API_PTR glad_debug_impl_glClearTexImage(GLuint arg0, GLint arg1, GLenum arg2, GLenum arg3, const void * arg4) {
    _pre_call_gl_callback("glClearTexImage", (GLADapiproc) glClearTexImage, 5, arg0, arg1, arg2, arg3, arg4);
    glClearTexImage(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glClearTexImage", (GLADapiproc) glClearTexImage, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLCLEARTEXIMAGEPROC glad_debug_glClearTexImage = glad_debug_impl_glClearTexImage;
PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage = NULL;
void GLAD_API_PTR glad_debug_impl_glClearTexSubImage(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLenum arg9, const void * arg10) {
    _pre_call_gl_callback("glClearTexSubImage", (GLADapiproc) glClearTexSubImage, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    glClearTexSubImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_gl_callback(NULL, "glClearTexSubImage", (GLADapiproc) glClearTexSubImage, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
}
PFNGLCLEARTEXSUBIMAGEPROC glad_debug_glClearTexSubImage = glad_debug_impl_glClearTexSubImage;
PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture = NULL;
void GLAD_API_PTR glad_debug_impl_glClientActiveTexture(GLenum arg0) {
    _pre_call_gl_callback("glClientActiveTexture", (GLADapiproc) glClientActiveTexture, 1, arg0);
    glClientActiveTexture(arg0);
    _post_call_gl_callback(NULL, "glClientActiveTexture", (GLADapiproc) glClientActiveTexture, 1, arg0);
    
}
PFNGLCLIENTACTIVETEXTUREPROC glad_debug_glClientActiveTexture = glad_debug_impl_glClientActiveTexture;
PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync = NULL;
GLenum GLAD_API_PTR glad_debug_impl_glClientWaitSync(GLsync arg0, GLbitfield arg1, GLuint64 arg2) {
    GLenum ret;
    _pre_call_gl_callback("glClientWaitSync", (GLADapiproc) glClientWaitSync, 3, arg0, arg1, arg2);
    ret = glClientWaitSync(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glClientWaitSync", (GLADapiproc) glClientWaitSync, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLCLIENTWAITSYNCPROC glad_debug_glClientWaitSync = glad_debug_impl_glClientWaitSync;
PFNGLCLIPCONTROLPROC glad_glClipControl = NULL;
void GLAD_API_PTR glad_debug_impl_glClipControl(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glClipControl", (GLADapiproc) glClipControl, 2, arg0, arg1);
    glClipControl(arg0, arg1);
    _post_call_gl_callback(NULL, "glClipControl", (GLADapiproc) glClipControl, 2, arg0, arg1);
    
}
PFNGLCLIPCONTROLPROC glad_debug_glClipControl = glad_debug_impl_glClipControl;
PFNGLCLIPPLANEPROC glad_glClipPlane = NULL;
void GLAD_API_PTR glad_debug_impl_glClipPlane(GLenum arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glClipPlane", (GLADapiproc) glClipPlane, 2, arg0, arg1);
    glClipPlane(arg0, arg1);
    _post_call_gl_callback(NULL, "glClipPlane", (GLADapiproc) glClipPlane, 2, arg0, arg1);
    
}
PFNGLCLIPPLANEPROC glad_debug_glClipPlane = glad_debug_impl_glClipPlane;
PFNGLCOLOR3BPROC glad_glColor3b = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3b(GLbyte arg0, GLbyte arg1, GLbyte arg2) {
    _pre_call_gl_callback("glColor3b", (GLADapiproc) glColor3b, 3, arg0, arg1, arg2);
    glColor3b(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glColor3b", (GLADapiproc) glColor3b, 3, arg0, arg1, arg2);
    
}
PFNGLCOLOR3BPROC glad_debug_glColor3b = glad_debug_impl_glColor3b;
PFNGLCOLOR3BVPROC glad_glColor3bv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3bv(const GLbyte * arg0) {
    _pre_call_gl_callback("glColor3bv", (GLADapiproc) glColor3bv, 1, arg0);
    glColor3bv(arg0);
    _post_call_gl_callback(NULL, "glColor3bv", (GLADapiproc) glColor3bv, 1, arg0);
    
}
PFNGLCOLOR3BVPROC glad_debug_glColor3bv = glad_debug_impl_glColor3bv;
PFNGLCOLOR3DPROC glad_glColor3d = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3d(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glColor3d", (GLADapiproc) glColor3d, 3, arg0, arg1, arg2);
    glColor3d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glColor3d", (GLADapiproc) glColor3d, 3, arg0, arg1, arg2);
    
}
PFNGLCOLOR3DPROC glad_debug_glColor3d = glad_debug_impl_glColor3d;
PFNGLCOLOR3DVPROC glad_glColor3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glColor3dv", (GLADapiproc) glColor3dv, 1, arg0);
    glColor3dv(arg0);
    _post_call_gl_callback(NULL, "glColor3dv", (GLADapiproc) glColor3dv, 1, arg0);
    
}
PFNGLCOLOR3DVPROC glad_debug_glColor3dv = glad_debug_impl_glColor3dv;
PFNGLCOLOR3FPROC glad_glColor3f = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3f(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glColor3f", (GLADapiproc) glColor3f, 3, arg0, arg1, arg2);
    glColor3f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glColor3f", (GLADapiproc) glColor3f, 3, arg0, arg1, arg2);
    
}
PFNGLCOLOR3FPROC glad_debug_glColor3f = glad_debug_impl_glColor3f;
PFNGLCOLOR3FVPROC glad_glColor3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glColor3fv", (GLADapiproc) glColor3fv, 1, arg0);
    glColor3fv(arg0);
    _post_call_gl_callback(NULL, "glColor3fv", (GLADapiproc) glColor3fv, 1, arg0);
    
}
PFNGLCOLOR3FVPROC glad_debug_glColor3fv = glad_debug_impl_glColor3fv;
PFNGLCOLOR3IPROC glad_glColor3i = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3i(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glColor3i", (GLADapiproc) glColor3i, 3, arg0, arg1, arg2);
    glColor3i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glColor3i", (GLADapiproc) glColor3i, 3, arg0, arg1, arg2);
    
}
PFNGLCOLOR3IPROC glad_debug_glColor3i = glad_debug_impl_glColor3i;
PFNGLCOLOR3IVPROC glad_glColor3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3iv(const GLint * arg0) {
    _pre_call_gl_callback("glColor3iv", (GLADapiproc) glColor3iv, 1, arg0);
    glColor3iv(arg0);
    _post_call_gl_callback(NULL, "glColor3iv", (GLADapiproc) glColor3iv, 1, arg0);
    
}
PFNGLCOLOR3IVPROC glad_debug_glColor3iv = glad_debug_impl_glColor3iv;
PFNGLCOLOR3SPROC glad_glColor3s = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3s(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_gl_callback("glColor3s", (GLADapiproc) glColor3s, 3, arg0, arg1, arg2);
    glColor3s(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glColor3s", (GLADapiproc) glColor3s, 3, arg0, arg1, arg2);
    
}
PFNGLCOLOR3SPROC glad_debug_glColor3s = glad_debug_impl_glColor3s;
PFNGLCOLOR3SVPROC glad_glColor3sv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3sv(const GLshort * arg0) {
    _pre_call_gl_callback("glColor3sv", (GLADapiproc) glColor3sv, 1, arg0);
    glColor3sv(arg0);
    _post_call_gl_callback(NULL, "glColor3sv", (GLADapiproc) glColor3sv, 1, arg0);
    
}
PFNGLCOLOR3SVPROC glad_debug_glColor3sv = glad_debug_impl_glColor3sv;
PFNGLCOLOR3UBPROC glad_glColor3ub = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3ub(GLubyte arg0, GLubyte arg1, GLubyte arg2) {
    _pre_call_gl_callback("glColor3ub", (GLADapiproc) glColor3ub, 3, arg0, arg1, arg2);
    glColor3ub(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glColor3ub", (GLADapiproc) glColor3ub, 3, arg0, arg1, arg2);
    
}
PFNGLCOLOR3UBPROC glad_debug_glColor3ub = glad_debug_impl_glColor3ub;
PFNGLCOLOR3UBVPROC glad_glColor3ubv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3ubv(const GLubyte * arg0) {
    _pre_call_gl_callback("glColor3ubv", (GLADapiproc) glColor3ubv, 1, arg0);
    glColor3ubv(arg0);
    _post_call_gl_callback(NULL, "glColor3ubv", (GLADapiproc) glColor3ubv, 1, arg0);
    
}
PFNGLCOLOR3UBVPROC glad_debug_glColor3ubv = glad_debug_impl_glColor3ubv;
PFNGLCOLOR3UIPROC glad_glColor3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3ui(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glColor3ui", (GLADapiproc) glColor3ui, 3, arg0, arg1, arg2);
    glColor3ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glColor3ui", (GLADapiproc) glColor3ui, 3, arg0, arg1, arg2);
    
}
PFNGLCOLOR3UIPROC glad_debug_glColor3ui = glad_debug_impl_glColor3ui;
PFNGLCOLOR3UIVPROC glad_glColor3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3uiv(const GLuint * arg0) {
    _pre_call_gl_callback("glColor3uiv", (GLADapiproc) glColor3uiv, 1, arg0);
    glColor3uiv(arg0);
    _post_call_gl_callback(NULL, "glColor3uiv", (GLADapiproc) glColor3uiv, 1, arg0);
    
}
PFNGLCOLOR3UIVPROC glad_debug_glColor3uiv = glad_debug_impl_glColor3uiv;
PFNGLCOLOR3USPROC glad_glColor3us = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3us(GLushort arg0, GLushort arg1, GLushort arg2) {
    _pre_call_gl_callback("glColor3us", (GLADapiproc) glColor3us, 3, arg0, arg1, arg2);
    glColor3us(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glColor3us", (GLADapiproc) glColor3us, 3, arg0, arg1, arg2);
    
}
PFNGLCOLOR3USPROC glad_debug_glColor3us = glad_debug_impl_glColor3us;
PFNGLCOLOR3USVPROC glad_glColor3usv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor3usv(const GLushort * arg0) {
    _pre_call_gl_callback("glColor3usv", (GLADapiproc) glColor3usv, 1, arg0);
    glColor3usv(arg0);
    _post_call_gl_callback(NULL, "glColor3usv", (GLADapiproc) glColor3usv, 1, arg0);
    
}
PFNGLCOLOR3USVPROC glad_debug_glColor3usv = glad_debug_impl_glColor3usv;
PFNGLCOLOR4BPROC glad_glColor4b = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4b(GLbyte arg0, GLbyte arg1, GLbyte arg2, GLbyte arg3) {
    _pre_call_gl_callback("glColor4b", (GLADapiproc) glColor4b, 4, arg0, arg1, arg2, arg3);
    glColor4b(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glColor4b", (GLADapiproc) glColor4b, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCOLOR4BPROC glad_debug_glColor4b = glad_debug_impl_glColor4b;
PFNGLCOLOR4BVPROC glad_glColor4bv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4bv(const GLbyte * arg0) {
    _pre_call_gl_callback("glColor4bv", (GLADapiproc) glColor4bv, 1, arg0);
    glColor4bv(arg0);
    _post_call_gl_callback(NULL, "glColor4bv", (GLADapiproc) glColor4bv, 1, arg0);
    
}
PFNGLCOLOR4BVPROC glad_debug_glColor4bv = glad_debug_impl_glColor4bv;
PFNGLCOLOR4DPROC glad_glColor4d = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4d(GLdouble arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glColor4d", (GLADapiproc) glColor4d, 4, arg0, arg1, arg2, arg3);
    glColor4d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glColor4d", (GLADapiproc) glColor4d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCOLOR4DPROC glad_debug_glColor4d = glad_debug_impl_glColor4d;
PFNGLCOLOR4DVPROC glad_glColor4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glColor4dv", (GLADapiproc) glColor4dv, 1, arg0);
    glColor4dv(arg0);
    _post_call_gl_callback(NULL, "glColor4dv", (GLADapiproc) glColor4dv, 1, arg0);
    
}
PFNGLCOLOR4DVPROC glad_debug_glColor4dv = glad_debug_impl_glColor4dv;
PFNGLCOLOR4FPROC glad_glColor4f = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4f(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glColor4f", (GLADapiproc) glColor4f, 4, arg0, arg1, arg2, arg3);
    glColor4f(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glColor4f", (GLADapiproc) glColor4f, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCOLOR4FPROC glad_debug_glColor4f = glad_debug_impl_glColor4f;
PFNGLCOLOR4FVPROC glad_glColor4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glColor4fv", (GLADapiproc) glColor4fv, 1, arg0);
    glColor4fv(arg0);
    _post_call_gl_callback(NULL, "glColor4fv", (GLADapiproc) glColor4fv, 1, arg0);
    
}
PFNGLCOLOR4FVPROC glad_debug_glColor4fv = glad_debug_impl_glColor4fv;
PFNGLCOLOR4IPROC glad_glColor4i = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4i(GLint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glColor4i", (GLADapiproc) glColor4i, 4, arg0, arg1, arg2, arg3);
    glColor4i(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glColor4i", (GLADapiproc) glColor4i, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCOLOR4IPROC glad_debug_glColor4i = glad_debug_impl_glColor4i;
PFNGLCOLOR4IVPROC glad_glColor4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4iv(const GLint * arg0) {
    _pre_call_gl_callback("glColor4iv", (GLADapiproc) glColor4iv, 1, arg0);
    glColor4iv(arg0);
    _post_call_gl_callback(NULL, "glColor4iv", (GLADapiproc) glColor4iv, 1, arg0);
    
}
PFNGLCOLOR4IVPROC glad_debug_glColor4iv = glad_debug_impl_glColor4iv;
PFNGLCOLOR4SPROC glad_glColor4s = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4s(GLshort arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_gl_callback("glColor4s", (GLADapiproc) glColor4s, 4, arg0, arg1, arg2, arg3);
    glColor4s(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glColor4s", (GLADapiproc) glColor4s, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCOLOR4SPROC glad_debug_glColor4s = glad_debug_impl_glColor4s;
PFNGLCOLOR4SVPROC glad_glColor4sv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4sv(const GLshort * arg0) {
    _pre_call_gl_callback("glColor4sv", (GLADapiproc) glColor4sv, 1, arg0);
    glColor4sv(arg0);
    _post_call_gl_callback(NULL, "glColor4sv", (GLADapiproc) glColor4sv, 1, arg0);
    
}
PFNGLCOLOR4SVPROC glad_debug_glColor4sv = glad_debug_impl_glColor4sv;
PFNGLCOLOR4UBPROC glad_glColor4ub = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4ub(GLubyte arg0, GLubyte arg1, GLubyte arg2, GLubyte arg3) {
    _pre_call_gl_callback("glColor4ub", (GLADapiproc) glColor4ub, 4, arg0, arg1, arg2, arg3);
    glColor4ub(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glColor4ub", (GLADapiproc) glColor4ub, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCOLOR4UBPROC glad_debug_glColor4ub = glad_debug_impl_glColor4ub;
PFNGLCOLOR4UBVPROC glad_glColor4ubv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4ubv(const GLubyte * arg0) {
    _pre_call_gl_callback("glColor4ubv", (GLADapiproc) glColor4ubv, 1, arg0);
    glColor4ubv(arg0);
    _post_call_gl_callback(NULL, "glColor4ubv", (GLADapiproc) glColor4ubv, 1, arg0);
    
}
PFNGLCOLOR4UBVPROC glad_debug_glColor4ubv = glad_debug_impl_glColor4ubv;
PFNGLCOLOR4UIPROC glad_glColor4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4ui(GLuint arg0, GLuint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_gl_callback("glColor4ui", (GLADapiproc) glColor4ui, 4, arg0, arg1, arg2, arg3);
    glColor4ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glColor4ui", (GLADapiproc) glColor4ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCOLOR4UIPROC glad_debug_glColor4ui = glad_debug_impl_glColor4ui;
PFNGLCOLOR4UIVPROC glad_glColor4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4uiv(const GLuint * arg0) {
    _pre_call_gl_callback("glColor4uiv", (GLADapiproc) glColor4uiv, 1, arg0);
    glColor4uiv(arg0);
    _post_call_gl_callback(NULL, "glColor4uiv", (GLADapiproc) glColor4uiv, 1, arg0);
    
}
PFNGLCOLOR4UIVPROC glad_debug_glColor4uiv = glad_debug_impl_glColor4uiv;
PFNGLCOLOR4USPROC glad_glColor4us = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4us(GLushort arg0, GLushort arg1, GLushort arg2, GLushort arg3) {
    _pre_call_gl_callback("glColor4us", (GLADapiproc) glColor4us, 4, arg0, arg1, arg2, arg3);
    glColor4us(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glColor4us", (GLADapiproc) glColor4us, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCOLOR4USPROC glad_debug_glColor4us = glad_debug_impl_glColor4us;
PFNGLCOLOR4USVPROC glad_glColor4usv = NULL;
void GLAD_API_PTR glad_debug_impl_glColor4usv(const GLushort * arg0) {
    _pre_call_gl_callback("glColor4usv", (GLADapiproc) glColor4usv, 1, arg0);
    glColor4usv(arg0);
    _post_call_gl_callback(NULL, "glColor4usv", (GLADapiproc) glColor4usv, 1, arg0);
    
}
PFNGLCOLOR4USVPROC glad_debug_glColor4usv = glad_debug_impl_glColor4usv;
PFNGLCOLORMASKPROC glad_glColorMask = NULL;
void GLAD_API_PTR glad_debug_impl_glColorMask(GLboolean arg0, GLboolean arg1, GLboolean arg2, GLboolean arg3) {
    _pre_call_gl_callback("glColorMask", (GLADapiproc) glColorMask, 4, arg0, arg1, arg2, arg3);
    glColorMask(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glColorMask", (GLADapiproc) glColorMask, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCOLORMASKPROC glad_debug_glColorMask = glad_debug_impl_glColorMask;
PFNGLCOLORMASKIPROC glad_glColorMaski = NULL;
void GLAD_API_PTR glad_debug_impl_glColorMaski(GLuint arg0, GLboolean arg1, GLboolean arg2, GLboolean arg3, GLboolean arg4) {
    _pre_call_gl_callback("glColorMaski", (GLADapiproc) glColorMaski, 5, arg0, arg1, arg2, arg3, arg4);
    glColorMaski(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glColorMaski", (GLADapiproc) glColorMaski, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLCOLORMASKIPROC glad_debug_glColorMaski = glad_debug_impl_glColorMaski;
PFNGLCOLORMATERIALPROC glad_glColorMaterial = NULL;
void GLAD_API_PTR glad_debug_impl_glColorMaterial(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glColorMaterial", (GLADapiproc) glColorMaterial, 2, arg0, arg1);
    glColorMaterial(arg0, arg1);
    _post_call_gl_callback(NULL, "glColorMaterial", (GLADapiproc) glColorMaterial, 2, arg0, arg1);
    
}
PFNGLCOLORMATERIALPROC glad_debug_glColorMaterial = glad_debug_impl_glColorMaterial;
PFNGLCOLORP3UIPROC glad_glColorP3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glColorP3ui(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glColorP3ui", (GLADapiproc) glColorP3ui, 2, arg0, arg1);
    glColorP3ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glColorP3ui", (GLADapiproc) glColorP3ui, 2, arg0, arg1);
    
}
PFNGLCOLORP3UIPROC glad_debug_glColorP3ui = glad_debug_impl_glColorP3ui;
PFNGLCOLORP3UIVPROC glad_glColorP3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glColorP3uiv(GLenum arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glColorP3uiv", (GLADapiproc) glColorP3uiv, 2, arg0, arg1);
    glColorP3uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glColorP3uiv", (GLADapiproc) glColorP3uiv, 2, arg0, arg1);
    
}
PFNGLCOLORP3UIVPROC glad_debug_glColorP3uiv = glad_debug_impl_glColorP3uiv;
PFNGLCOLORP4UIPROC glad_glColorP4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glColorP4ui(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glColorP4ui", (GLADapiproc) glColorP4ui, 2, arg0, arg1);
    glColorP4ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glColorP4ui", (GLADapiproc) glColorP4ui, 2, arg0, arg1);
    
}
PFNGLCOLORP4UIPROC glad_debug_glColorP4ui = glad_debug_impl_glColorP4ui;
PFNGLCOLORP4UIVPROC glad_glColorP4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glColorP4uiv(GLenum arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glColorP4uiv", (GLADapiproc) glColorP4uiv, 2, arg0, arg1);
    glColorP4uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glColorP4uiv", (GLADapiproc) glColorP4uiv, 2, arg0, arg1);
    
}
PFNGLCOLORP4UIVPROC glad_debug_glColorP4uiv = glad_debug_impl_glColorP4uiv;
PFNGLCOLORPOINTERPROC glad_glColorPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glColorPointer(GLint arg0, GLenum arg1, GLsizei arg2, const void * arg3) {
    _pre_call_gl_callback("glColorPointer", (GLADapiproc) glColorPointer, 4, arg0, arg1, arg2, arg3);
    glColorPointer(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glColorPointer", (GLADapiproc) glColorPointer, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCOLORPOINTERPROC glad_debug_glColorPointer = glad_debug_impl_glColorPointer;
PFNGLCOMPILESHADERPROC glad_glCompileShader = NULL;
void GLAD_API_PTR glad_debug_impl_glCompileShader(GLuint arg0) {
    _pre_call_gl_callback("glCompileShader", (GLADapiproc) glCompileShader, 1, arg0);
    glCompileShader(arg0);
    _post_call_gl_callback(NULL, "glCompileShader", (GLADapiproc) glCompileShader, 1, arg0);
    
}
PFNGLCOMPILESHADERPROC glad_debug_glCompileShader = glad_debug_impl_glCompileShader;
PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexImage1D(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLint arg4, GLsizei arg5, const void * arg6) {
    _pre_call_gl_callback("glCompressedTexImage1D", (GLADapiproc) glCompressedTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glCompressedTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glCompressedTexImage1D", (GLADapiproc) glCompressedTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_debug_glCompressedTexImage1D = glad_debug_impl_glCompressedTexImage1D;
PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexImage2D(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLint arg5, GLsizei arg6, const void * arg7) {
    _pre_call_gl_callback("glCompressedTexImage2D", (GLADapiproc) glCompressedTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glCompressedTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glCompressedTexImage2D", (GLADapiproc) glCompressedTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_debug_glCompressedTexImage2D = glad_debug_impl_glCompressedTexImage2D;
PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexImage3D(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLsizei arg7, const void * arg8) {
    _pre_call_gl_callback("glCompressedTexImage3D", (GLADapiproc) glCompressedTexImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glCompressedTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glCompressedTexImage3D", (GLADapiproc) glCompressedTexImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_debug_glCompressedTexImage3D = glad_debug_impl_glCompressedTexImage3D;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexSubImage1D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLsizei arg5, const void * arg6) {
    _pre_call_gl_callback("glCompressedTexSubImage1D", (GLADapiproc) glCompressedTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glCompressedTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glCompressedTexSubImage1D", (GLADapiproc) glCompressedTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_debug_glCompressedTexSubImage1D = glad_debug_impl_glCompressedTexSubImage1D;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexSubImage2D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLsizei arg7, const void * arg8) {
    _pre_call_gl_callback("glCompressedTexSubImage2D", (GLADapiproc) glCompressedTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glCompressedTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glCompressedTexSubImage2D", (GLADapiproc) glCompressedTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_debug_glCompressedTexSubImage2D = glad_debug_impl_glCompressedTexSubImage2D;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexSubImage3D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLsizei arg9, const void * arg10) {
    _pre_call_gl_callback("glCompressedTexSubImage3D", (GLADapiproc) glCompressedTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    glCompressedTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_gl_callback(NULL, "glCompressedTexSubImage3D", (GLADapiproc) glCompressedTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
}
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_debug_glCompressedTexSubImage3D = glad_debug_impl_glCompressedTexSubImage3D;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTextureSubImage1D(GLuint arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLsizei arg5, const void * arg6) {
    _pre_call_gl_callback("glCompressedTextureSubImage1D", (GLADapiproc) glCompressedTextureSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glCompressedTextureSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glCompressedTextureSubImage1D", (GLADapiproc) glCompressedTextureSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_debug_glCompressedTextureSubImage1D = glad_debug_impl_glCompressedTextureSubImage1D;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTextureSubImage2D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLsizei arg7, const void * arg8) {
    _pre_call_gl_callback("glCompressedTextureSubImage2D", (GLADapiproc) glCompressedTextureSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glCompressedTextureSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glCompressedTextureSubImage2D", (GLADapiproc) glCompressedTextureSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_debug_glCompressedTextureSubImage2D = glad_debug_impl_glCompressedTextureSubImage2D;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTextureSubImage3D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLsizei arg9, const void * arg10) {
    _pre_call_gl_callback("glCompressedTextureSubImage3D", (GLADapiproc) glCompressedTextureSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    glCompressedTextureSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_gl_callback(NULL, "glCompressedTextureSubImage3D", (GLADapiproc) glCompressedTextureSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
}
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_debug_glCompressedTextureSubImage3D = glad_debug_impl_glCompressedTextureSubImage3D;
PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyBufferSubData(GLenum arg0, GLenum arg1, GLintptr arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_gl_callback("glCopyBufferSubData", (GLADapiproc) glCopyBufferSubData, 5, arg0, arg1, arg2, arg3, arg4);
    glCopyBufferSubData(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glCopyBufferSubData", (GLADapiproc) glCopyBufferSubData, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLCOPYBUFFERSUBDATAPROC glad_debug_glCopyBufferSubData = glad_debug_impl_glCopyBufferSubData;
PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyImageSubData(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLuint arg6, GLenum arg7, GLint arg8, GLint arg9, GLint arg10, GLint arg11, GLsizei arg12, GLsizei arg13, GLsizei arg14) {
    _pre_call_gl_callback("glCopyImageSubData", (GLADapiproc) glCopyImageSubData, 15, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    glCopyImageSubData(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    _post_call_gl_callback(NULL, "glCopyImageSubData", (GLADapiproc) glCopyImageSubData, 15, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    
}
PFNGLCOPYIMAGESUBDATAPROC glad_debug_glCopyImageSubData = glad_debug_impl_glCopyImageSubData;
PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyNamedBufferSubData(GLuint arg0, GLuint arg1, GLintptr arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_gl_callback("glCopyNamedBufferSubData", (GLADapiproc) glCopyNamedBufferSubData, 5, arg0, arg1, arg2, arg3, arg4);
    glCopyNamedBufferSubData(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glCopyNamedBufferSubData", (GLADapiproc) glCopyNamedBufferSubData, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_debug_glCopyNamedBufferSubData = glad_debug_impl_glCopyNamedBufferSubData;
PFNGLCOPYPIXELSPROC glad_glCopyPixels = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyPixels(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLenum arg4) {
    _pre_call_gl_callback("glCopyPixels", (GLADapiproc) glCopyPixels, 5, arg0, arg1, arg2, arg3, arg4);
    glCopyPixels(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glCopyPixels", (GLADapiproc) glCopyPixels, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLCOPYPIXELSPROC glad_debug_glCopyPixels = glad_debug_impl_glCopyPixels;
PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTexImage1D(GLenum arg0, GLint arg1, GLenum arg2, GLint arg3, GLint arg4, GLsizei arg5, GLint arg6) {
    _pre_call_gl_callback("glCopyTexImage1D", (GLADapiproc) glCopyTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glCopyTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glCopyTexImage1D", (GLADapiproc) glCopyTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLCOPYTEXIMAGE1DPROC glad_debug_glCopyTexImage1D = glad_debug_impl_glCopyTexImage1D;
PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTexImage2D(GLenum arg0, GLint arg1, GLenum arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLint arg7) {
    _pre_call_gl_callback("glCopyTexImage2D", (GLADapiproc) glCopyTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glCopyTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glCopyTexImage2D", (GLADapiproc) glCopyTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLCOPYTEXIMAGE2DPROC glad_debug_glCopyTexImage2D = glad_debug_impl_glCopyTexImage2D;
PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTexSubImage1D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5) {
    _pre_call_gl_callback("glCopyTexSubImage1D", (GLADapiproc) glCopyTexSubImage1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glCopyTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glCopyTexSubImage1D", (GLADapiproc) glCopyTexSubImage1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLCOPYTEXSUBIMAGE1DPROC glad_debug_glCopyTexSubImage1D = glad_debug_impl_glCopyTexSubImage1D;
PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTexSubImage2D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7) {
    _pre_call_gl_callback("glCopyTexSubImage2D", (GLADapiproc) glCopyTexSubImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glCopyTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glCopyTexSubImage2D", (GLADapiproc) glCopyTexSubImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLCOPYTEXSUBIMAGE2DPROC glad_debug_glCopyTexSubImage2D = glad_debug_impl_glCopyTexSubImage2D;
PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTexSubImage3D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLsizei arg7, GLsizei arg8) {
    _pre_call_gl_callback("glCopyTexSubImage3D", (GLADapiproc) glCopyTexSubImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glCopyTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glCopyTexSubImage3D", (GLADapiproc) glCopyTexSubImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLCOPYTEXSUBIMAGE3DPROC glad_debug_glCopyTexSubImage3D = glad_debug_impl_glCopyTexSubImage3D;
PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTextureSubImage1D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5) {
    _pre_call_gl_callback("glCopyTextureSubImage1D", (GLADapiproc) glCopyTextureSubImage1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glCopyTextureSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glCopyTextureSubImage1D", (GLADapiproc) glCopyTextureSubImage1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_debug_glCopyTextureSubImage1D = glad_debug_impl_glCopyTextureSubImage1D;
PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_glCopyTextureSubImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTextureSubImage2D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7) {
    _pre_call_gl_callback("glCopyTextureSubImage2D", (GLADapiproc) glCopyTextureSubImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glCopyTextureSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glCopyTextureSubImage2D", (GLADapiproc) glCopyTextureSubImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_debug_glCopyTextureSubImage2D = glad_debug_impl_glCopyTextureSubImage2D;
PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_glCopyTextureSubImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTextureSubImage3D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLsizei arg7, GLsizei arg8) {
    _pre_call_gl_callback("glCopyTextureSubImage3D", (GLADapiproc) glCopyTextureSubImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glCopyTextureSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glCopyTextureSubImage3D", (GLADapiproc) glCopyTextureSubImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_debug_glCopyTextureSubImage3D = glad_debug_impl_glCopyTextureSubImage3D;
PFNGLCREATEBUFFERSPROC glad_glCreateBuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glCreateBuffers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glCreateBuffers", (GLADapiproc) glCreateBuffers, 2, arg0, arg1);
    glCreateBuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glCreateBuffers", (GLADapiproc) glCreateBuffers, 2, arg0, arg1);
    
}
PFNGLCREATEBUFFERSPROC glad_debug_glCreateBuffers = glad_debug_impl_glCreateBuffers;
PFNGLCREATEFRAMEBUFFERSPROC glad_glCreateFramebuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glCreateFramebuffers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glCreateFramebuffers", (GLADapiproc) glCreateFramebuffers, 2, arg0, arg1);
    glCreateFramebuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glCreateFramebuffers", (GLADapiproc) glCreateFramebuffers, 2, arg0, arg1);
    
}
PFNGLCREATEFRAMEBUFFERSPROC glad_debug_glCreateFramebuffers = glad_debug_impl_glCreateFramebuffers;
PFNGLCREATEPROGRAMPROC glad_glCreateProgram = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glCreateProgram(void) {
    GLuint ret;
    _pre_call_gl_callback("glCreateProgram", (GLADapiproc) glCreateProgram, 0);
    ret = glCreateProgram();
    _post_call_gl_callback((void*) &ret, "glCreateProgram", (GLADapiproc) glCreateProgram, 0);
    return ret;
}
PFNGLCREATEPROGRAMPROC glad_debug_glCreateProgram = glad_debug_impl_glCreateProgram;
PFNGLCREATEPROGRAMPIPELINESPROC glad_glCreateProgramPipelines = NULL;
void GLAD_API_PTR glad_debug_impl_glCreateProgramPipelines(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glCreateProgramPipelines", (GLADapiproc) glCreateProgramPipelines, 2, arg0, arg1);
    glCreateProgramPipelines(arg0, arg1);
    _post_call_gl_callback(NULL, "glCreateProgramPipelines", (GLADapiproc) glCreateProgramPipelines, 2, arg0, arg1);
    
}
PFNGLCREATEPROGRAMPIPELINESPROC glad_debug_glCreateProgramPipelines = glad_debug_impl_glCreateProgramPipelines;
PFNGLCREATEQUERIESPROC glad_glCreateQueries = NULL;
void GLAD_API_PTR glad_debug_impl_glCreateQueries(GLenum arg0, GLsizei arg1, GLuint * arg2) {
    _pre_call_gl_callback("glCreateQueries", (GLADapiproc) glCreateQueries, 3, arg0, arg1, arg2);
    glCreateQueries(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glCreateQueries", (GLADapiproc) glCreateQueries, 3, arg0, arg1, arg2);
    
}
PFNGLCREATEQUERIESPROC glad_debug_glCreateQueries = glad_debug_impl_glCreateQueries;
PFNGLCREATERENDERBUFFERSPROC glad_glCreateRenderbuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glCreateRenderbuffers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glCreateRenderbuffers", (GLADapiproc) glCreateRenderbuffers, 2, arg0, arg1);
    glCreateRenderbuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glCreateRenderbuffers", (GLADapiproc) glCreateRenderbuffers, 2, arg0, arg1);
    
}
PFNGLCREATERENDERBUFFERSPROC glad_debug_glCreateRenderbuffers = glad_debug_impl_glCreateRenderbuffers;
PFNGLCREATESAMPLERSPROC glad_glCreateSamplers = NULL;
void GLAD_API_PTR glad_debug_impl_glCreateSamplers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glCreateSamplers", (GLADapiproc) glCreateSamplers, 2, arg0, arg1);
    glCreateSamplers(arg0, arg1);
    _post_call_gl_callback(NULL, "glCreateSamplers", (GLADapiproc) glCreateSamplers, 2, arg0, arg1);
    
}
PFNGLCREATESAMPLERSPROC glad_debug_glCreateSamplers = glad_debug_impl_glCreateSamplers;
PFNGLCREATESHADERPROC glad_glCreateShader = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glCreateShader(GLenum arg0) {
    GLuint ret;
    _pre_call_gl_callback("glCreateShader", (GLADapiproc) glCreateShader, 1, arg0);
    ret = glCreateShader(arg0);
    _post_call_gl_callback((void*) &ret, "glCreateShader", (GLADapiproc) glCreateShader, 1, arg0);
    return ret;
}
PFNGLCREATESHADERPROC glad_debug_glCreateShader = glad_debug_impl_glCreateShader;
PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glCreateShaderProgramv(GLenum arg0, GLsizei arg1, const GLchar *const* arg2) {
    GLuint ret;
    _pre_call_gl_callback("glCreateShaderProgramv", (GLADapiproc) glCreateShaderProgramv, 3, arg0, arg1, arg2);
    ret = glCreateShaderProgramv(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glCreateShaderProgramv", (GLADapiproc) glCreateShaderProgramv, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLCREATESHADERPROGRAMVPROC glad_debug_glCreateShaderProgramv = glad_debug_impl_glCreateShaderProgramv;
PFNGLCREATETEXTURESPROC glad_glCreateTextures = NULL;
void GLAD_API_PTR glad_debug_impl_glCreateTextures(GLenum arg0, GLsizei arg1, GLuint * arg2) {
    _pre_call_gl_callback("glCreateTextures", (GLADapiproc) glCreateTextures, 3, arg0, arg1, arg2);
    glCreateTextures(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glCreateTextures", (GLADapiproc) glCreateTextures, 3, arg0, arg1, arg2);
    
}
PFNGLCREATETEXTURESPROC glad_debug_glCreateTextures = glad_debug_impl_glCreateTextures;
PFNGLCREATETRANSFORMFEEDBACKSPROC glad_glCreateTransformFeedbacks = NULL;
void GLAD_API_PTR glad_debug_impl_glCreateTransformFeedbacks(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glCreateTransformFeedbacks", (GLADapiproc) glCreateTransformFeedbacks, 2, arg0, arg1);
    glCreateTransformFeedbacks(arg0, arg1);
    _post_call_gl_callback(NULL, "glCreateTransformFeedbacks", (GLADapiproc) glCreateTransformFeedbacks, 2, arg0, arg1);
    
}
PFNGLCREATETRANSFORMFEEDBACKSPROC glad_debug_glCreateTransformFeedbacks = glad_debug_impl_glCreateTransformFeedbacks;
PFNGLCREATEVERTEXARRAYSPROC glad_glCreateVertexArrays = NULL;
void GLAD_API_PTR glad_debug_impl_glCreateVertexArrays(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glCreateVertexArrays", (GLADapiproc) glCreateVertexArrays, 2, arg0, arg1);
    glCreateVertexArrays(arg0, arg1);
    _post_call_gl_callback(NULL, "glCreateVertexArrays", (GLADapiproc) glCreateVertexArrays, 2, arg0, arg1);
    
}
PFNGLCREATEVERTEXARRAYSPROC glad_debug_glCreateVertexArrays = glad_debug_impl_glCreateVertexArrays;
PFNGLCULLFACEPROC glad_glCullFace = NULL;
void GLAD_API_PTR glad_debug_impl_glCullFace(GLenum arg0) {
    _pre_call_gl_callback("glCullFace", (GLADapiproc) glCullFace, 1, arg0);
    glCullFace(arg0);
    _post_call_gl_callback(NULL, "glCullFace", (GLADapiproc) glCullFace, 1, arg0);
    
}
PFNGLCULLFACEPROC glad_debug_glCullFace = glad_debug_impl_glCullFace;
PFNGLDEBUGMESSAGECALLBACKPROC glad_glDebugMessageCallback = NULL;
void GLAD_API_PTR glad_debug_impl_glDebugMessageCallback(GLDEBUGPROC arg0, const void * arg1) {
    _pre_call_gl_callback("glDebugMessageCallback", (GLADapiproc) glDebugMessageCallback, 2, arg0, arg1);
    glDebugMessageCallback(arg0, arg1);
    _post_call_gl_callback(NULL, "glDebugMessageCallback", (GLADapiproc) glDebugMessageCallback, 2, arg0, arg1);
    
}
PFNGLDEBUGMESSAGECALLBACKPROC glad_debug_glDebugMessageCallback = glad_debug_impl_glDebugMessageCallback;
PFNGLDEBUGMESSAGECONTROLPROC glad_glDebugMessageControl = NULL;
void GLAD_API_PTR glad_debug_impl_glDebugMessageControl(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, const GLuint * arg4, GLboolean arg5) {
    _pre_call_gl_callback("glDebugMessageControl", (GLADapiproc) glDebugMessageControl, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glDebugMessageControl(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glDebugMessageControl", (GLADapiproc) glDebugMessageControl, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLDEBUGMESSAGECONTROLPROC glad_debug_glDebugMessageControl = glad_debug_impl_glDebugMessageControl;
PFNGLDEBUGMESSAGEINSERTPROC glad_glDebugMessageInsert = NULL;
void GLAD_API_PTR glad_debug_impl_glDebugMessageInsert(GLenum arg0, GLenum arg1, GLuint arg2, GLenum arg3, GLsizei arg4, const GLchar * arg5) {
    _pre_call_gl_callback("glDebugMessageInsert", (GLADapiproc) glDebugMessageInsert, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glDebugMessageInsert(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glDebugMessageInsert", (GLADapiproc) glDebugMessageInsert, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLDEBUGMESSAGEINSERTPROC glad_debug_glDebugMessageInsert = glad_debug_impl_glDebugMessageInsert;
PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteBuffers(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteBuffers", (GLADapiproc) glDeleteBuffers, 2, arg0, arg1);
    glDeleteBuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteBuffers", (GLADapiproc) glDeleteBuffers, 2, arg0, arg1);
    
}
PFNGLDELETEBUFFERSPROC glad_debug_glDeleteBuffers = glad_debug_impl_glDeleteBuffers;
PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteFramebuffers(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteFramebuffers", (GLADapiproc) glDeleteFramebuffers, 2, arg0, arg1);
    glDeleteFramebuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteFramebuffers", (GLADapiproc) glDeleteFramebuffers, 2, arg0, arg1);
    
}
PFNGLDELETEFRAMEBUFFERSPROC glad_debug_glDeleteFramebuffers = glad_debug_impl_glDeleteFramebuffers;
PFNGLDELETELISTSPROC glad_glDeleteLists = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteLists(GLuint arg0, GLsizei arg1) {
    _pre_call_gl_callback("glDeleteLists", (GLADapiproc) glDeleteLists, 2, arg0, arg1);
    glDeleteLists(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteLists", (GLADapiproc) glDeleteLists, 2, arg0, arg1);
    
}
PFNGLDELETELISTSPROC glad_debug_glDeleteLists = glad_debug_impl_glDeleteLists;
PFNGLDELETEPROGRAMPROC glad_glDeleteProgram = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteProgram(GLuint arg0) {
    _pre_call_gl_callback("glDeleteProgram", (GLADapiproc) glDeleteProgram, 1, arg0);
    glDeleteProgram(arg0);
    _post_call_gl_callback(NULL, "glDeleteProgram", (GLADapiproc) glDeleteProgram, 1, arg0);
    
}
PFNGLDELETEPROGRAMPROC glad_debug_glDeleteProgram = glad_debug_impl_glDeleteProgram;
PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteProgramPipelines(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteProgramPipelines", (GLADapiproc) glDeleteProgramPipelines, 2, arg0, arg1);
    glDeleteProgramPipelines(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteProgramPipelines", (GLADapiproc) glDeleteProgramPipelines, 2, arg0, arg1);
    
}
PFNGLDELETEPROGRAMPIPELINESPROC glad_debug_glDeleteProgramPipelines = glad_debug_impl_glDeleteProgramPipelines;
PFNGLDELETEQUERIESPROC glad_glDeleteQueries = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteQueries(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteQueries", (GLADapiproc) glDeleteQueries, 2, arg0, arg1);
    glDeleteQueries(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteQueries", (GLADapiproc) glDeleteQueries, 2, arg0, arg1);
    
}
PFNGLDELETEQUERIESPROC glad_debug_glDeleteQueries = glad_debug_impl_glDeleteQueries;
PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteRenderbuffers(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteRenderbuffers", (GLADapiproc) glDeleteRenderbuffers, 2, arg0, arg1);
    glDeleteRenderbuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteRenderbuffers", (GLADapiproc) glDeleteRenderbuffers, 2, arg0, arg1);
    
}
PFNGLDELETERENDERBUFFERSPROC glad_debug_glDeleteRenderbuffers = glad_debug_impl_glDeleteRenderbuffers;
PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteSamplers(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteSamplers", (GLADapiproc) glDeleteSamplers, 2, arg0, arg1);
    glDeleteSamplers(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteSamplers", (GLADapiproc) glDeleteSamplers, 2, arg0, arg1);
    
}
PFNGLDELETESAMPLERSPROC glad_debug_glDeleteSamplers = glad_debug_impl_glDeleteSamplers;
PFNGLDELETESHADERPROC glad_glDeleteShader = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteShader(GLuint arg0) {
    _pre_call_gl_callback("glDeleteShader", (GLADapiproc) glDeleteShader, 1, arg0);
    glDeleteShader(arg0);
    _post_call_gl_callback(NULL, "glDeleteShader", (GLADapiproc) glDeleteShader, 1, arg0);
    
}
PFNGLDELETESHADERPROC glad_debug_glDeleteShader = glad_debug_impl_glDeleteShader;
PFNGLDELETESYNCPROC glad_glDeleteSync = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteSync(GLsync arg0) {
    _pre_call_gl_callback("glDeleteSync", (GLADapiproc) glDeleteSync, 1, arg0);
    glDeleteSync(arg0);
    _post_call_gl_callback(NULL, "glDeleteSync", (GLADapiproc) glDeleteSync, 1, arg0);
    
}
PFNGLDELETESYNCPROC glad_debug_glDeleteSync = glad_debug_impl_glDeleteSync;
PFNGLDELETETEXTURESPROC glad_glDeleteTextures = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteTextures(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteTextures", (GLADapiproc) glDeleteTextures, 2, arg0, arg1);
    glDeleteTextures(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteTextures", (GLADapiproc) glDeleteTextures, 2, arg0, arg1);
    
}
PFNGLDELETETEXTURESPROC glad_debug_glDeleteTextures = glad_debug_impl_glDeleteTextures;
PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteTransformFeedbacks(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteTransformFeedbacks", (GLADapiproc) glDeleteTransformFeedbacks, 2, arg0, arg1);
    glDeleteTransformFeedbacks(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteTransformFeedbacks", (GLADapiproc) glDeleteTransformFeedbacks, 2, arg0, arg1);
    
}
PFNGLDELETETRANSFORMFEEDBACKSPROC glad_debug_glDeleteTransformFeedbacks = glad_debug_impl_glDeleteTransformFeedbacks;
PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteVertexArrays(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteVertexArrays", (GLADapiproc) glDeleteVertexArrays, 2, arg0, arg1);
    glDeleteVertexArrays(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteVertexArrays", (GLADapiproc) glDeleteVertexArrays, 2, arg0, arg1);
    
}
PFNGLDELETEVERTEXARRAYSPROC glad_debug_glDeleteVertexArrays = glad_debug_impl_glDeleteVertexArrays;
PFNGLDEPTHFUNCPROC glad_glDepthFunc = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthFunc(GLenum arg0) {
    _pre_call_gl_callback("glDepthFunc", (GLADapiproc) glDepthFunc, 1, arg0);
    glDepthFunc(arg0);
    _post_call_gl_callback(NULL, "glDepthFunc", (GLADapiproc) glDepthFunc, 1, arg0);
    
}
PFNGLDEPTHFUNCPROC glad_debug_glDepthFunc = glad_debug_impl_glDepthFunc;
PFNGLDEPTHMASKPROC glad_glDepthMask = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthMask(GLboolean arg0) {
    _pre_call_gl_callback("glDepthMask", (GLADapiproc) glDepthMask, 1, arg0);
    glDepthMask(arg0);
    _post_call_gl_callback(NULL, "glDepthMask", (GLADapiproc) glDepthMask, 1, arg0);
    
}
PFNGLDEPTHMASKPROC glad_debug_glDepthMask = glad_debug_impl_glDepthMask;
PFNGLDEPTHRANGEPROC glad_glDepthRange = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthRange(GLdouble arg0, GLdouble arg1) {
    _pre_call_gl_callback("glDepthRange", (GLADapiproc) glDepthRange, 2, arg0, arg1);
    glDepthRange(arg0, arg1);
    _post_call_gl_callback(NULL, "glDepthRange", (GLADapiproc) glDepthRange, 2, arg0, arg1);
    
}
PFNGLDEPTHRANGEPROC glad_debug_glDepthRange = glad_debug_impl_glDepthRange;
PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthRangeArrayv(GLuint arg0, GLsizei arg1, const GLdouble * arg2) {
    _pre_call_gl_callback("glDepthRangeArrayv", (GLADapiproc) glDepthRangeArrayv, 3, arg0, arg1, arg2);
    glDepthRangeArrayv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDepthRangeArrayv", (GLADapiproc) glDepthRangeArrayv, 3, arg0, arg1, arg2);
    
}
PFNGLDEPTHRANGEARRAYVPROC glad_debug_glDepthRangeArrayv = glad_debug_impl_glDepthRangeArrayv;
PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthRangeIndexed(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glDepthRangeIndexed", (GLADapiproc) glDepthRangeIndexed, 3, arg0, arg1, arg2);
    glDepthRangeIndexed(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDepthRangeIndexed", (GLADapiproc) glDepthRangeIndexed, 3, arg0, arg1, arg2);
    
}
PFNGLDEPTHRANGEINDEXEDPROC glad_debug_glDepthRangeIndexed = glad_debug_impl_glDepthRangeIndexed;
PFNGLDEPTHRANGEFPROC glad_glDepthRangef = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthRangef(GLfloat arg0, GLfloat arg1) {
    _pre_call_gl_callback("glDepthRangef", (GLADapiproc) glDepthRangef, 2, arg0, arg1);
    glDepthRangef(arg0, arg1);
    _post_call_gl_callback(NULL, "glDepthRangef", (GLADapiproc) glDepthRangef, 2, arg0, arg1);
    
}
PFNGLDEPTHRANGEFPROC glad_debug_glDepthRangef = glad_debug_impl_glDepthRangef;
PFNGLDETACHSHADERPROC glad_glDetachShader = NULL;
void GLAD_API_PTR glad_debug_impl_glDetachShader(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glDetachShader", (GLADapiproc) glDetachShader, 2, arg0, arg1);
    glDetachShader(arg0, arg1);
    _post_call_gl_callback(NULL, "glDetachShader", (GLADapiproc) glDetachShader, 2, arg0, arg1);
    
}
PFNGLDETACHSHADERPROC glad_debug_glDetachShader = glad_debug_impl_glDetachShader;
PFNGLDISABLEPROC glad_glDisable = NULL;
void GLAD_API_PTR glad_debug_impl_glDisable(GLenum arg0) {
    _pre_call_gl_callback("glDisable", (GLADapiproc) glDisable, 1, arg0);
    glDisable(arg0);
    _post_call_gl_callback(NULL, "glDisable", (GLADapiproc) glDisable, 1, arg0);
    
}
PFNGLDISABLEPROC glad_debug_glDisable = glad_debug_impl_glDisable;
PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState = NULL;
void GLAD_API_PTR glad_debug_impl_glDisableClientState(GLenum arg0) {
    _pre_call_gl_callback("glDisableClientState", (GLADapiproc) glDisableClientState, 1, arg0);
    glDisableClientState(arg0);
    _post_call_gl_callback(NULL, "glDisableClientState", (GLADapiproc) glDisableClientState, 1, arg0);
    
}
PFNGLDISABLECLIENTSTATEPROC glad_debug_glDisableClientState = glad_debug_impl_glDisableClientState;
PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_glDisableVertexArrayAttrib = NULL;
void GLAD_API_PTR glad_debug_impl_glDisableVertexArrayAttrib(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glDisableVertexArrayAttrib", (GLADapiproc) glDisableVertexArrayAttrib, 2, arg0, arg1);
    glDisableVertexArrayAttrib(arg0, arg1);
    _post_call_gl_callback(NULL, "glDisableVertexArrayAttrib", (GLADapiproc) glDisableVertexArrayAttrib, 2, arg0, arg1);
    
}
PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_debug_glDisableVertexArrayAttrib = glad_debug_impl_glDisableVertexArrayAttrib;
PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray = NULL;
void GLAD_API_PTR glad_debug_impl_glDisableVertexAttribArray(GLuint arg0) {
    _pre_call_gl_callback("glDisableVertexAttribArray", (GLADapiproc) glDisableVertexAttribArray, 1, arg0);
    glDisableVertexAttribArray(arg0);
    _post_call_gl_callback(NULL, "glDisableVertexAttribArray", (GLADapiproc) glDisableVertexAttribArray, 1, arg0);
    
}
PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_debug_glDisableVertexAttribArray = glad_debug_impl_glDisableVertexAttribArray;
PFNGLDISABLEIPROC glad_glDisablei = NULL;
void GLAD_API_PTR glad_debug_impl_glDisablei(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glDisablei", (GLADapiproc) glDisablei, 2, arg0, arg1);
    glDisablei(arg0, arg1);
    _post_call_gl_callback(NULL, "glDisablei", (GLADapiproc) glDisablei, 2, arg0, arg1);
    
}
PFNGLDISABLEIPROC glad_debug_glDisablei = glad_debug_impl_glDisablei;
PFNGLDISPATCHCOMPUTEPROC glad_glDispatchCompute = NULL;
void GLAD_API_PTR glad_debug_impl_glDispatchCompute(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glDispatchCompute", (GLADapiproc) glDispatchCompute, 3, arg0, arg1, arg2);
    glDispatchCompute(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDispatchCompute", (GLADapiproc) glDispatchCompute, 3, arg0, arg1, arg2);
    
}
PFNGLDISPATCHCOMPUTEPROC glad_debug_glDispatchCompute = glad_debug_impl_glDispatchCompute;
PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_glDispatchComputeIndirect = NULL;
void GLAD_API_PTR glad_debug_impl_glDispatchComputeIndirect(GLintptr arg0) {
    _pre_call_gl_callback("glDispatchComputeIndirect", (GLADapiproc) glDispatchComputeIndirect, 1, arg0);
    glDispatchComputeIndirect(arg0);
    _post_call_gl_callback(NULL, "glDispatchComputeIndirect", (GLADapiproc) glDispatchComputeIndirect, 1, arg0);
    
}
PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_debug_glDispatchComputeIndirect = glad_debug_impl_glDispatchComputeIndirect;
PFNGLDRAWARRAYSPROC glad_glDrawArrays = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawArrays(GLenum arg0, GLint arg1, GLsizei arg2) {
    _pre_call_gl_callback("glDrawArrays", (GLADapiproc) glDrawArrays, 3, arg0, arg1, arg2);
    glDrawArrays(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDrawArrays", (GLADapiproc) glDrawArrays, 3, arg0, arg1, arg2);
    
}
PFNGLDRAWARRAYSPROC glad_debug_glDrawArrays = glad_debug_impl_glDrawArrays;
PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawArraysIndirect(GLenum arg0, const void * arg1) {
    _pre_call_gl_callback("glDrawArraysIndirect", (GLADapiproc) glDrawArraysIndirect, 2, arg0, arg1);
    glDrawArraysIndirect(arg0, arg1);
    _post_call_gl_callback(NULL, "glDrawArraysIndirect", (GLADapiproc) glDrawArraysIndirect, 2, arg0, arg1);
    
}
PFNGLDRAWARRAYSINDIRECTPROC glad_debug_glDrawArraysIndirect = glad_debug_impl_glDrawArraysIndirect;
PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawArraysInstanced(GLenum arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_gl_callback("glDrawArraysInstanced", (GLADapiproc) glDrawArraysInstanced, 4, arg0, arg1, arg2, arg3);
    glDrawArraysInstanced(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glDrawArraysInstanced", (GLADapiproc) glDrawArraysInstanced, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLDRAWARRAYSINSTANCEDPROC glad_debug_glDrawArraysInstanced = glad_debug_impl_glDrawArraysInstanced;
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_glDrawArraysInstancedBaseInstance = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawArraysInstancedBaseInstance(GLenum arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLuint arg4) {
    _pre_call_gl_callback("glDrawArraysInstancedBaseInstance", (GLADapiproc) glDrawArraysInstancedBaseInstance, 5, arg0, arg1, arg2, arg3, arg4);
    glDrawArraysInstancedBaseInstance(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glDrawArraysInstancedBaseInstance", (GLADapiproc) glDrawArraysInstancedBaseInstance, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_debug_glDrawArraysInstancedBaseInstance = glad_debug_impl_glDrawArraysInstancedBaseInstance;
PFNGLDRAWBUFFERPROC glad_glDrawBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawBuffer(GLenum arg0) {
    _pre_call_gl_callback("glDrawBuffer", (GLADapiproc) glDrawBuffer, 1, arg0);
    glDrawBuffer(arg0);
    _post_call_gl_callback(NULL, "glDrawBuffer", (GLADapiproc) glDrawBuffer, 1, arg0);
    
}
PFNGLDRAWBUFFERPROC glad_debug_glDrawBuffer = glad_debug_impl_glDrawBuffer;
PFNGLDRAWBUFFERSPROC glad_glDrawBuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawBuffers(GLsizei arg0, const GLenum * arg1) {
    _pre_call_gl_callback("glDrawBuffers", (GLADapiproc) glDrawBuffers, 2, arg0, arg1);
    glDrawBuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glDrawBuffers", (GLADapiproc) glDrawBuffers, 2, arg0, arg1);
    
}
PFNGLDRAWBUFFERSPROC glad_debug_glDrawBuffers = glad_debug_impl_glDrawBuffers;
PFNGLDRAWELEMENTSPROC glad_glDrawElements = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElements(GLenum arg0, GLsizei arg1, GLenum arg2, const void * arg3) {
    _pre_call_gl_callback("glDrawElements", (GLADapiproc) glDrawElements, 4, arg0, arg1, arg2, arg3);
    glDrawElements(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glDrawElements", (GLADapiproc) glDrawElements, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLDRAWELEMENTSPROC glad_debug_glDrawElements = glad_debug_impl_glDrawElements;
PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElementsBaseVertex(GLenum arg0, GLsizei arg1, GLenum arg2, const void * arg3, GLint arg4) {
    _pre_call_gl_callback("glDrawElementsBaseVertex", (GLADapiproc) glDrawElementsBaseVertex, 5, arg0, arg1, arg2, arg3, arg4);
    glDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glDrawElementsBaseVertex", (GLADapiproc) glDrawElementsBaseVertex, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLDRAWELEMENTSBASEVERTEXPROC glad_debug_glDrawElementsBaseVertex = glad_debug_impl_glDrawElementsBaseVertex;
PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElementsIndirect(GLenum arg0, GLenum arg1, const void * arg2) {
    _pre_call_gl_callback("glDrawElementsIndirect", (GLADapiproc) glDrawElementsIndirect, 3, arg0, arg1, arg2);
    glDrawElementsIndirect(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDrawElementsIndirect", (GLADapiproc) glDrawElementsIndirect, 3, arg0, arg1, arg2);
    
}
PFNGLDRAWELEMENTSINDIRECTPROC glad_debug_glDrawElementsIndirect = glad_debug_impl_glDrawElementsIndirect;
PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElementsInstanced(GLenum arg0, GLsizei arg1, GLenum arg2, const void * arg3, GLsizei arg4) {
    _pre_call_gl_callback("glDrawElementsInstanced", (GLADapiproc) glDrawElementsInstanced, 5, arg0, arg1, arg2, arg3, arg4);
    glDrawElementsInstanced(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glDrawElementsInstanced", (GLADapiproc) glDrawElementsInstanced, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLDRAWELEMENTSINSTANCEDPROC glad_debug_glDrawElementsInstanced = glad_debug_impl_glDrawElementsInstanced;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_glDrawElementsInstancedBaseInstance = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElementsInstancedBaseInstance(GLenum arg0, GLsizei arg1, GLenum arg2, const void * arg3, GLsizei arg4, GLuint arg5) {
    _pre_call_gl_callback("glDrawElementsInstancedBaseInstance", (GLADapiproc) glDrawElementsInstancedBaseInstance, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glDrawElementsInstancedBaseInstance(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glDrawElementsInstancedBaseInstance", (GLADapiproc) glDrawElementsInstancedBaseInstance, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_debug_glDrawElementsInstancedBaseInstance = glad_debug_impl_glDrawElementsInstancedBaseInstance;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElementsInstancedBaseVertex(GLenum arg0, GLsizei arg1, GLenum arg2, const void * arg3, GLsizei arg4, GLint arg5) {
    _pre_call_gl_callback("glDrawElementsInstancedBaseVertex", (GLADapiproc) glDrawElementsInstancedBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glDrawElementsInstancedBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glDrawElementsInstancedBaseVertex", (GLADapiproc) glDrawElementsInstancedBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_debug_glDrawElementsInstancedBaseVertex = glad_debug_impl_glDrawElementsInstancedBaseVertex;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_glDrawElementsInstancedBaseVertexBaseInstance = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElementsInstancedBaseVertexBaseInstance(GLenum arg0, GLsizei arg1, GLenum arg2, const void * arg3, GLsizei arg4, GLint arg5, GLuint arg6) {
    _pre_call_gl_callback("glDrawElementsInstancedBaseVertexBaseInstance", (GLADapiproc) glDrawElementsInstancedBaseVertexBaseInstance, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glDrawElementsInstancedBaseVertexBaseInstance(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glDrawElementsInstancedBaseVertexBaseInstance", (GLADapiproc) glDrawElementsInstancedBaseVertexBaseInstance, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_debug_glDrawElementsInstancedBaseVertexBaseInstance = glad_debug_impl_glDrawElementsInstancedBaseVertexBaseInstance;
PFNGLDRAWPIXELSPROC glad_glDrawPixels = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawPixels(GLsizei arg0, GLsizei arg1, GLenum arg2, GLenum arg3, const void * arg4) {
    _pre_call_gl_callback("glDrawPixels", (GLADapiproc) glDrawPixels, 5, arg0, arg1, arg2, arg3, arg4);
    glDrawPixels(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glDrawPixels", (GLADapiproc) glDrawPixels, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLDRAWPIXELSPROC glad_debug_glDrawPixels = glad_debug_impl_glDrawPixels;
PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawRangeElements(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3, GLenum arg4, const void * arg5) {
    _pre_call_gl_callback("glDrawRangeElements", (GLADapiproc) glDrawRangeElements, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glDrawRangeElements(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glDrawRangeElements", (GLADapiproc) glDrawRangeElements, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLDRAWRANGEELEMENTSPROC glad_debug_glDrawRangeElements = glad_debug_impl_glDrawRangeElements;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawRangeElementsBaseVertex(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3, GLenum arg4, const void * arg5, GLint arg6) {
    _pre_call_gl_callback("glDrawRangeElementsBaseVertex", (GLADapiproc) glDrawRangeElementsBaseVertex, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glDrawRangeElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glDrawRangeElementsBaseVertex", (GLADapiproc) glDrawRangeElementsBaseVertex, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_debug_glDrawRangeElementsBaseVertex = glad_debug_impl_glDrawRangeElementsBaseVertex;
PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawTransformFeedback(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glDrawTransformFeedback", (GLADapiproc) glDrawTransformFeedback, 2, arg0, arg1);
    glDrawTransformFeedback(arg0, arg1);
    _post_call_gl_callback(NULL, "glDrawTransformFeedback", (GLADapiproc) glDrawTransformFeedback, 2, arg0, arg1);
    
}
PFNGLDRAWTRANSFORMFEEDBACKPROC glad_debug_glDrawTransformFeedback = glad_debug_impl_glDrawTransformFeedback;
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_glDrawTransformFeedbackInstanced = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawTransformFeedbackInstanced(GLenum arg0, GLuint arg1, GLsizei arg2) {
    _pre_call_gl_callback("glDrawTransformFeedbackInstanced", (GLADapiproc) glDrawTransformFeedbackInstanced, 3, arg0, arg1, arg2);
    glDrawTransformFeedbackInstanced(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDrawTransformFeedbackInstanced", (GLADapiproc) glDrawTransformFeedbackInstanced, 3, arg0, arg1, arg2);
    
}
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_debug_glDrawTransformFeedbackInstanced = glad_debug_impl_glDrawTransformFeedbackInstanced;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawTransformFeedbackStream(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glDrawTransformFeedbackStream", (GLADapiproc) glDrawTransformFeedbackStream, 3, arg0, arg1, arg2);
    glDrawTransformFeedbackStream(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDrawTransformFeedbackStream", (GLADapiproc) glDrawTransformFeedbackStream, 3, arg0, arg1, arg2);
    
}
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_debug_glDrawTransformFeedbackStream = glad_debug_impl_glDrawTransformFeedbackStream;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_glDrawTransformFeedbackStreamInstanced = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawTransformFeedbackStreamInstanced(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3) {
    _pre_call_gl_callback("glDrawTransformFeedbackStreamInstanced", (GLADapiproc) glDrawTransformFeedbackStreamInstanced, 4, arg0, arg1, arg2, arg3);
    glDrawTransformFeedbackStreamInstanced(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glDrawTransformFeedbackStreamInstanced", (GLADapiproc) glDrawTransformFeedbackStreamInstanced, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_debug_glDrawTransformFeedbackStreamInstanced = glad_debug_impl_glDrawTransformFeedbackStreamInstanced;
PFNGLEDGEFLAGPROC glad_glEdgeFlag = NULL;
void GLAD_API_PTR glad_debug_impl_glEdgeFlag(GLboolean arg0) {
    _pre_call_gl_callback("glEdgeFlag", (GLADapiproc) glEdgeFlag, 1, arg0);
    glEdgeFlag(arg0);
    _post_call_gl_callback(NULL, "glEdgeFlag", (GLADapiproc) glEdgeFlag, 1, arg0);
    
}
PFNGLEDGEFLAGPROC glad_debug_glEdgeFlag = glad_debug_impl_glEdgeFlag;
PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glEdgeFlagPointer(GLsizei arg0, const void * arg1) {
    _pre_call_gl_callback("glEdgeFlagPointer", (GLADapiproc) glEdgeFlagPointer, 2, arg0, arg1);
    glEdgeFlagPointer(arg0, arg1);
    _post_call_gl_callback(NULL, "glEdgeFlagPointer", (GLADapiproc) glEdgeFlagPointer, 2, arg0, arg1);
    
}
PFNGLEDGEFLAGPOINTERPROC glad_debug_glEdgeFlagPointer = glad_debug_impl_glEdgeFlagPointer;
PFNGLEDGEFLAGVPROC glad_glEdgeFlagv = NULL;
void GLAD_API_PTR glad_debug_impl_glEdgeFlagv(const GLboolean * arg0) {
    _pre_call_gl_callback("glEdgeFlagv", (GLADapiproc) glEdgeFlagv, 1, arg0);
    glEdgeFlagv(arg0);
    _post_call_gl_callback(NULL, "glEdgeFlagv", (GLADapiproc) glEdgeFlagv, 1, arg0);
    
}
PFNGLEDGEFLAGVPROC glad_debug_glEdgeFlagv = glad_debug_impl_glEdgeFlagv;
PFNGLENABLEPROC glad_glEnable = NULL;
void GLAD_API_PTR glad_debug_impl_glEnable(GLenum arg0) {
    _pre_call_gl_callback("glEnable", (GLADapiproc) glEnable, 1, arg0);
    glEnable(arg0);
    _post_call_gl_callback(NULL, "glEnable", (GLADapiproc) glEnable, 1, arg0);
    
}
PFNGLENABLEPROC glad_debug_glEnable = glad_debug_impl_glEnable;
PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState = NULL;
void GLAD_API_PTR glad_debug_impl_glEnableClientState(GLenum arg0) {
    _pre_call_gl_callback("glEnableClientState", (GLADapiproc) glEnableClientState, 1, arg0);
    glEnableClientState(arg0);
    _post_call_gl_callback(NULL, "glEnableClientState", (GLADapiproc) glEnableClientState, 1, arg0);
    
}
PFNGLENABLECLIENTSTATEPROC glad_debug_glEnableClientState = glad_debug_impl_glEnableClientState;
PFNGLENABLEVERTEXARRAYATTRIBPROC glad_glEnableVertexArrayAttrib = NULL;
void GLAD_API_PTR glad_debug_impl_glEnableVertexArrayAttrib(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glEnableVertexArrayAttrib", (GLADapiproc) glEnableVertexArrayAttrib, 2, arg0, arg1);
    glEnableVertexArrayAttrib(arg0, arg1);
    _post_call_gl_callback(NULL, "glEnableVertexArrayAttrib", (GLADapiproc) glEnableVertexArrayAttrib, 2, arg0, arg1);
    
}
PFNGLENABLEVERTEXARRAYATTRIBPROC glad_debug_glEnableVertexArrayAttrib = glad_debug_impl_glEnableVertexArrayAttrib;
PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray = NULL;
void GLAD_API_PTR glad_debug_impl_glEnableVertexAttribArray(GLuint arg0) {
    _pre_call_gl_callback("glEnableVertexAttribArray", (GLADapiproc) glEnableVertexAttribArray, 1, arg0);
    glEnableVertexAttribArray(arg0);
    _post_call_gl_callback(NULL, "glEnableVertexAttribArray", (GLADapiproc) glEnableVertexAttribArray, 1, arg0);
    
}
PFNGLENABLEVERTEXATTRIBARRAYPROC glad_debug_glEnableVertexAttribArray = glad_debug_impl_glEnableVertexAttribArray;
PFNGLENABLEIPROC glad_glEnablei = NULL;
void GLAD_API_PTR glad_debug_impl_glEnablei(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glEnablei", (GLADapiproc) glEnablei, 2, arg0, arg1);
    glEnablei(arg0, arg1);
    _post_call_gl_callback(NULL, "glEnablei", (GLADapiproc) glEnablei, 2, arg0, arg1);
    
}
PFNGLENABLEIPROC glad_debug_glEnablei = glad_debug_impl_glEnablei;
PFNGLENDPROC glad_glEnd = NULL;
void GLAD_API_PTR glad_debug_impl_glEnd(void) {
    _pre_call_gl_callback("glEnd", (GLADapiproc) glEnd, 0);
    glEnd();
    _post_call_gl_callback(NULL, "glEnd", (GLADapiproc) glEnd, 0);
    
}
PFNGLENDPROC glad_debug_glEnd = glad_debug_impl_glEnd;
PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender = NULL;
void GLAD_API_PTR glad_debug_impl_glEndConditionalRender(void) {
    _pre_call_gl_callback("glEndConditionalRender", (GLADapiproc) glEndConditionalRender, 0);
    glEndConditionalRender();
    _post_call_gl_callback(NULL, "glEndConditionalRender", (GLADapiproc) glEndConditionalRender, 0);
    
}
PFNGLENDCONDITIONALRENDERPROC glad_debug_glEndConditionalRender = glad_debug_impl_glEndConditionalRender;
PFNGLENDLISTPROC glad_glEndList = NULL;
void GLAD_API_PTR glad_debug_impl_glEndList(void) {
    _pre_call_gl_callback("glEndList", (GLADapiproc) glEndList, 0);
    glEndList();
    _post_call_gl_callback(NULL, "glEndList", (GLADapiproc) glEndList, 0);
    
}
PFNGLENDLISTPROC glad_debug_glEndList = glad_debug_impl_glEndList;
PFNGLENDQUERYPROC glad_glEndQuery = NULL;
void GLAD_API_PTR glad_debug_impl_glEndQuery(GLenum arg0) {
    _pre_call_gl_callback("glEndQuery", (GLADapiproc) glEndQuery, 1, arg0);
    glEndQuery(arg0);
    _post_call_gl_callback(NULL, "glEndQuery", (GLADapiproc) glEndQuery, 1, arg0);
    
}
PFNGLENDQUERYPROC glad_debug_glEndQuery = glad_debug_impl_glEndQuery;
PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed = NULL;
void GLAD_API_PTR glad_debug_impl_glEndQueryIndexed(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glEndQueryIndexed", (GLADapiproc) glEndQueryIndexed, 2, arg0, arg1);
    glEndQueryIndexed(arg0, arg1);
    _post_call_gl_callback(NULL, "glEndQueryIndexed", (GLADapiproc) glEndQueryIndexed, 2, arg0, arg1);
    
}
PFNGLENDQUERYINDEXEDPROC glad_debug_glEndQueryIndexed = glad_debug_impl_glEndQueryIndexed;
PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glEndTransformFeedback(void) {
    _pre_call_gl_callback("glEndTransformFeedback", (GLADapiproc) glEndTransformFeedback, 0);
    glEndTransformFeedback();
    _post_call_gl_callback(NULL, "glEndTransformFeedback", (GLADapiproc) glEndTransformFeedback, 0);
    
}
PFNGLENDTRANSFORMFEEDBACKPROC glad_debug_glEndTransformFeedback = glad_debug_impl_glEndTransformFeedback;
PFNGLEVALCOORD1DPROC glad_glEvalCoord1d = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalCoord1d(GLdouble arg0) {
    _pre_call_gl_callback("glEvalCoord1d", (GLADapiproc) glEvalCoord1d, 1, arg0);
    glEvalCoord1d(arg0);
    _post_call_gl_callback(NULL, "glEvalCoord1d", (GLADapiproc) glEvalCoord1d, 1, arg0);
    
}
PFNGLEVALCOORD1DPROC glad_debug_glEvalCoord1d = glad_debug_impl_glEvalCoord1d;
PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalCoord1dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glEvalCoord1dv", (GLADapiproc) glEvalCoord1dv, 1, arg0);
    glEvalCoord1dv(arg0);
    _post_call_gl_callback(NULL, "glEvalCoord1dv", (GLADapiproc) glEvalCoord1dv, 1, arg0);
    
}
PFNGLEVALCOORD1DVPROC glad_debug_glEvalCoord1dv = glad_debug_impl_glEvalCoord1dv;
PFNGLEVALCOORD1FPROC glad_glEvalCoord1f = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalCoord1f(GLfloat arg0) {
    _pre_call_gl_callback("glEvalCoord1f", (GLADapiproc) glEvalCoord1f, 1, arg0);
    glEvalCoord1f(arg0);
    _post_call_gl_callback(NULL, "glEvalCoord1f", (GLADapiproc) glEvalCoord1f, 1, arg0);
    
}
PFNGLEVALCOORD1FPROC glad_debug_glEvalCoord1f = glad_debug_impl_glEvalCoord1f;
PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalCoord1fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glEvalCoord1fv", (GLADapiproc) glEvalCoord1fv, 1, arg0);
    glEvalCoord1fv(arg0);
    _post_call_gl_callback(NULL, "glEvalCoord1fv", (GLADapiproc) glEvalCoord1fv, 1, arg0);
    
}
PFNGLEVALCOORD1FVPROC glad_debug_glEvalCoord1fv = glad_debug_impl_glEvalCoord1fv;
PFNGLEVALCOORD2DPROC glad_glEvalCoord2d = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalCoord2d(GLdouble arg0, GLdouble arg1) {
    _pre_call_gl_callback("glEvalCoord2d", (GLADapiproc) glEvalCoord2d, 2, arg0, arg1);
    glEvalCoord2d(arg0, arg1);
    _post_call_gl_callback(NULL, "glEvalCoord2d", (GLADapiproc) glEvalCoord2d, 2, arg0, arg1);
    
}
PFNGLEVALCOORD2DPROC glad_debug_glEvalCoord2d = glad_debug_impl_glEvalCoord2d;
PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalCoord2dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glEvalCoord2dv", (GLADapiproc) glEvalCoord2dv, 1, arg0);
    glEvalCoord2dv(arg0);
    _post_call_gl_callback(NULL, "glEvalCoord2dv", (GLADapiproc) glEvalCoord2dv, 1, arg0);
    
}
PFNGLEVALCOORD2DVPROC glad_debug_glEvalCoord2dv = glad_debug_impl_glEvalCoord2dv;
PFNGLEVALCOORD2FPROC glad_glEvalCoord2f = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalCoord2f(GLfloat arg0, GLfloat arg1) {
    _pre_call_gl_callback("glEvalCoord2f", (GLADapiproc) glEvalCoord2f, 2, arg0, arg1);
    glEvalCoord2f(arg0, arg1);
    _post_call_gl_callback(NULL, "glEvalCoord2f", (GLADapiproc) glEvalCoord2f, 2, arg0, arg1);
    
}
PFNGLEVALCOORD2FPROC glad_debug_glEvalCoord2f = glad_debug_impl_glEvalCoord2f;
PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalCoord2fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glEvalCoord2fv", (GLADapiproc) glEvalCoord2fv, 1, arg0);
    glEvalCoord2fv(arg0);
    _post_call_gl_callback(NULL, "glEvalCoord2fv", (GLADapiproc) glEvalCoord2fv, 1, arg0);
    
}
PFNGLEVALCOORD2FVPROC glad_debug_glEvalCoord2fv = glad_debug_impl_glEvalCoord2fv;
PFNGLEVALMESH1PROC glad_glEvalMesh1 = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalMesh1(GLenum arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glEvalMesh1", (GLADapiproc) glEvalMesh1, 3, arg0, arg1, arg2);
    glEvalMesh1(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glEvalMesh1", (GLADapiproc) glEvalMesh1, 3, arg0, arg1, arg2);
    
}
PFNGLEVALMESH1PROC glad_debug_glEvalMesh1 = glad_debug_impl_glEvalMesh1;
PFNGLEVALMESH2PROC glad_glEvalMesh2 = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalMesh2(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_gl_callback("glEvalMesh2", (GLADapiproc) glEvalMesh2, 5, arg0, arg1, arg2, arg3, arg4);
    glEvalMesh2(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glEvalMesh2", (GLADapiproc) glEvalMesh2, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLEVALMESH2PROC glad_debug_glEvalMesh2 = glad_debug_impl_glEvalMesh2;
PFNGLEVALPOINT1PROC glad_glEvalPoint1 = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalPoint1(GLint arg0) {
    _pre_call_gl_callback("glEvalPoint1", (GLADapiproc) glEvalPoint1, 1, arg0);
    glEvalPoint1(arg0);
    _post_call_gl_callback(NULL, "glEvalPoint1", (GLADapiproc) glEvalPoint1, 1, arg0);
    
}
PFNGLEVALPOINT1PROC glad_debug_glEvalPoint1 = glad_debug_impl_glEvalPoint1;
PFNGLEVALPOINT2PROC glad_glEvalPoint2 = NULL;
void GLAD_API_PTR glad_debug_impl_glEvalPoint2(GLint arg0, GLint arg1) {
    _pre_call_gl_callback("glEvalPoint2", (GLADapiproc) glEvalPoint2, 2, arg0, arg1);
    glEvalPoint2(arg0, arg1);
    _post_call_gl_callback(NULL, "glEvalPoint2", (GLADapiproc) glEvalPoint2, 2, arg0, arg1);
    
}
PFNGLEVALPOINT2PROC glad_debug_glEvalPoint2 = glad_debug_impl_glEvalPoint2;
PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glFeedbackBuffer(GLsizei arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glFeedbackBuffer", (GLADapiproc) glFeedbackBuffer, 3, arg0, arg1, arg2);
    glFeedbackBuffer(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glFeedbackBuffer", (GLADapiproc) glFeedbackBuffer, 3, arg0, arg1, arg2);
    
}
PFNGLFEEDBACKBUFFERPROC glad_debug_glFeedbackBuffer = glad_debug_impl_glFeedbackBuffer;
PFNGLFENCESYNCPROC glad_glFenceSync = NULL;
GLsync GLAD_API_PTR glad_debug_impl_glFenceSync(GLenum arg0, GLbitfield arg1) {
    GLsync ret;
    _pre_call_gl_callback("glFenceSync", (GLADapiproc) glFenceSync, 2, arg0, arg1);
    ret = glFenceSync(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glFenceSync", (GLADapiproc) glFenceSync, 2, arg0, arg1);
    return ret;
}
PFNGLFENCESYNCPROC glad_debug_glFenceSync = glad_debug_impl_glFenceSync;
PFNGLFINISHPROC glad_glFinish = NULL;
void GLAD_API_PTR glad_debug_impl_glFinish(void) {
    _pre_call_gl_callback("glFinish", (GLADapiproc) glFinish, 0);
    glFinish();
    _post_call_gl_callback(NULL, "glFinish", (GLADapiproc) glFinish, 0);
    
}
PFNGLFINISHPROC glad_debug_glFinish = glad_debug_impl_glFinish;
PFNGLFLUSHPROC glad_glFlush = NULL;
void GLAD_API_PTR glad_debug_impl_glFlush(void) {
    _pre_call_gl_callback("glFlush", (GLADapiproc) glFlush, 0);
    glFlush();
    _post_call_gl_callback(NULL, "glFlush", (GLADapiproc) glFlush, 0);
    
}
PFNGLFLUSHPROC glad_debug_glFlush = glad_debug_impl_glFlush;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange = NULL;
void GLAD_API_PTR glad_debug_impl_glFlushMappedBufferRange(GLenum arg0, GLintptr arg1, GLsizeiptr arg2) {
    _pre_call_gl_callback("glFlushMappedBufferRange", (GLADapiproc) glFlushMappedBufferRange, 3, arg0, arg1, arg2);
    glFlushMappedBufferRange(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glFlushMappedBufferRange", (GLADapiproc) glFlushMappedBufferRange, 3, arg0, arg1, arg2);
    
}
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_debug_glFlushMappedBufferRange = glad_debug_impl_glFlushMappedBufferRange;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_glFlushMappedNamedBufferRange = NULL;
void GLAD_API_PTR glad_debug_impl_glFlushMappedNamedBufferRange(GLuint arg0, GLintptr arg1, GLsizeiptr arg2) {
    _pre_call_gl_callback("glFlushMappedNamedBufferRange", (GLADapiproc) glFlushMappedNamedBufferRange, 3, arg0, arg1, arg2);
    glFlushMappedNamedBufferRange(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glFlushMappedNamedBufferRange", (GLADapiproc) glFlushMappedNamedBufferRange, 3, arg0, arg1, arg2);
    
}
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_debug_glFlushMappedNamedBufferRange = glad_debug_impl_glFlushMappedNamedBufferRange;
PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glFogCoordPointer(GLenum arg0, GLsizei arg1, const void * arg2) {
    _pre_call_gl_callback("glFogCoordPointer", (GLADapiproc) glFogCoordPointer, 3, arg0, arg1, arg2);
    glFogCoordPointer(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glFogCoordPointer", (GLADapiproc) glFogCoordPointer, 3, arg0, arg1, arg2);
    
}
PFNGLFOGCOORDPOINTERPROC glad_debug_glFogCoordPointer = glad_debug_impl_glFogCoordPointer;
PFNGLFOGCOORDDPROC glad_glFogCoordd = NULL;
void GLAD_API_PTR glad_debug_impl_glFogCoordd(GLdouble arg0) {
    _pre_call_gl_callback("glFogCoordd", (GLADapiproc) glFogCoordd, 1, arg0);
    glFogCoordd(arg0);
    _post_call_gl_callback(NULL, "glFogCoordd", (GLADapiproc) glFogCoordd, 1, arg0);
    
}
PFNGLFOGCOORDDPROC glad_debug_glFogCoordd = glad_debug_impl_glFogCoordd;
PFNGLFOGCOORDDVPROC glad_glFogCoorddv = NULL;
void GLAD_API_PTR glad_debug_impl_glFogCoorddv(const GLdouble * arg0) {
    _pre_call_gl_callback("glFogCoorddv", (GLADapiproc) glFogCoorddv, 1, arg0);
    glFogCoorddv(arg0);
    _post_call_gl_callback(NULL, "glFogCoorddv", (GLADapiproc) glFogCoorddv, 1, arg0);
    
}
PFNGLFOGCOORDDVPROC glad_debug_glFogCoorddv = glad_debug_impl_glFogCoorddv;
PFNGLFOGCOORDFPROC glad_glFogCoordf = NULL;
void GLAD_API_PTR glad_debug_impl_glFogCoordf(GLfloat arg0) {
    _pre_call_gl_callback("glFogCoordf", (GLADapiproc) glFogCoordf, 1, arg0);
    glFogCoordf(arg0);
    _post_call_gl_callback(NULL, "glFogCoordf", (GLADapiproc) glFogCoordf, 1, arg0);
    
}
PFNGLFOGCOORDFPROC glad_debug_glFogCoordf = glad_debug_impl_glFogCoordf;
PFNGLFOGCOORDFVPROC glad_glFogCoordfv = NULL;
void GLAD_API_PTR glad_debug_impl_glFogCoordfv(const GLfloat * arg0) {
    _pre_call_gl_callback("glFogCoordfv", (GLADapiproc) glFogCoordfv, 1, arg0);
    glFogCoordfv(arg0);
    _post_call_gl_callback(NULL, "glFogCoordfv", (GLADapiproc) glFogCoordfv, 1, arg0);
    
}
PFNGLFOGCOORDFVPROC glad_debug_glFogCoordfv = glad_debug_impl_glFogCoordfv;
PFNGLFOGFPROC glad_glFogf = NULL;
void GLAD_API_PTR glad_debug_impl_glFogf(GLenum arg0, GLfloat arg1) {
    _pre_call_gl_callback("glFogf", (GLADapiproc) glFogf, 2, arg0, arg1);
    glFogf(arg0, arg1);
    _post_call_gl_callback(NULL, "glFogf", (GLADapiproc) glFogf, 2, arg0, arg1);
    
}
PFNGLFOGFPROC glad_debug_glFogf = glad_debug_impl_glFogf;
PFNGLFOGFVPROC glad_glFogfv = NULL;
void GLAD_API_PTR glad_debug_impl_glFogfv(GLenum arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glFogfv", (GLADapiproc) glFogfv, 2, arg0, arg1);
    glFogfv(arg0, arg1);
    _post_call_gl_callback(NULL, "glFogfv", (GLADapiproc) glFogfv, 2, arg0, arg1);
    
}
PFNGLFOGFVPROC glad_debug_glFogfv = glad_debug_impl_glFogfv;
PFNGLFOGIPROC glad_glFogi = NULL;
void GLAD_API_PTR glad_debug_impl_glFogi(GLenum arg0, GLint arg1) {
    _pre_call_gl_callback("glFogi", (GLADapiproc) glFogi, 2, arg0, arg1);
    glFogi(arg0, arg1);
    _post_call_gl_callback(NULL, "glFogi", (GLADapiproc) glFogi, 2, arg0, arg1);
    
}
PFNGLFOGIPROC glad_debug_glFogi = glad_debug_impl_glFogi;
PFNGLFOGIVPROC glad_glFogiv = NULL;
void GLAD_API_PTR glad_debug_impl_glFogiv(GLenum arg0, const GLint * arg1) {
    _pre_call_gl_callback("glFogiv", (GLADapiproc) glFogiv, 2, arg0, arg1);
    glFogiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glFogiv", (GLADapiproc) glFogiv, 2, arg0, arg1);
    
}
PFNGLFOGIVPROC glad_debug_glFogiv = glad_debug_impl_glFogiv;
PFNGLFRAMEBUFFERPARAMETERIPROC glad_glFramebufferParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferParameteri(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glFramebufferParameteri", (GLADapiproc) glFramebufferParameteri, 3, arg0, arg1, arg2);
    glFramebufferParameteri(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glFramebufferParameteri", (GLADapiproc) glFramebufferParameteri, 3, arg0, arg1, arg2);
    
}
PFNGLFRAMEBUFFERPARAMETERIPROC glad_debug_glFramebufferParameteri = glad_debug_impl_glFramebufferParameteri;
PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferRenderbuffer(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3) {
    _pre_call_gl_callback("glFramebufferRenderbuffer", (GLADapiproc) glFramebufferRenderbuffer, 4, arg0, arg1, arg2, arg3);
    glFramebufferRenderbuffer(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glFramebufferRenderbuffer", (GLADapiproc) glFramebufferRenderbuffer, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_debug_glFramebufferRenderbuffer = glad_debug_impl_glFramebufferRenderbuffer;
PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferTexture(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3) {
    _pre_call_gl_callback("glFramebufferTexture", (GLADapiproc) glFramebufferTexture, 4, arg0, arg1, arg2, arg3);
    glFramebufferTexture(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glFramebufferTexture", (GLADapiproc) glFramebufferTexture, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLFRAMEBUFFERTEXTUREPROC glad_debug_glFramebufferTexture = glad_debug_impl_glFramebufferTexture;
PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferTexture1D(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4) {
    _pre_call_gl_callback("glFramebufferTexture1D", (GLADapiproc) glFramebufferTexture1D, 5, arg0, arg1, arg2, arg3, arg4);
    glFramebufferTexture1D(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glFramebufferTexture1D", (GLADapiproc) glFramebufferTexture1D, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLFRAMEBUFFERTEXTURE1DPROC glad_debug_glFramebufferTexture1D = glad_debug_impl_glFramebufferTexture1D;
PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferTexture2D(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4) {
    _pre_call_gl_callback("glFramebufferTexture2D", (GLADapiproc) glFramebufferTexture2D, 5, arg0, arg1, arg2, arg3, arg4);
    glFramebufferTexture2D(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glFramebufferTexture2D", (GLADapiproc) glFramebufferTexture2D, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLFRAMEBUFFERTEXTURE2DPROC glad_debug_glFramebufferTexture2D = glad_debug_impl_glFramebufferTexture2D;
PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferTexture3D(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4, GLint arg5) {
    _pre_call_gl_callback("glFramebufferTexture3D", (GLADapiproc) glFramebufferTexture3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glFramebufferTexture3D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glFramebufferTexture3D", (GLADapiproc) glFramebufferTexture3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLFRAMEBUFFERTEXTURE3DPROC glad_debug_glFramebufferTexture3D = glad_debug_impl_glFramebufferTexture3D;
PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferTextureLayer(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3, GLint arg4) {
    _pre_call_gl_callback("glFramebufferTextureLayer", (GLADapiproc) glFramebufferTextureLayer, 5, arg0, arg1, arg2, arg3, arg4);
    glFramebufferTextureLayer(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glFramebufferTextureLayer", (GLADapiproc) glFramebufferTextureLayer, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_debug_glFramebufferTextureLayer = glad_debug_impl_glFramebufferTextureLayer;
PFNGLFRONTFACEPROC glad_glFrontFace = NULL;
void GLAD_API_PTR glad_debug_impl_glFrontFace(GLenum arg0) {
    _pre_call_gl_callback("glFrontFace", (GLADapiproc) glFrontFace, 1, arg0);
    glFrontFace(arg0);
    _post_call_gl_callback(NULL, "glFrontFace", (GLADapiproc) glFrontFace, 1, arg0);
    
}
PFNGLFRONTFACEPROC glad_debug_glFrontFace = glad_debug_impl_glFrontFace;
PFNGLFRUSTUMPROC glad_glFrustum = NULL;
void GLAD_API_PTR glad_debug_impl_glFrustum(GLdouble arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5) {
    _pre_call_gl_callback("glFrustum", (GLADapiproc) glFrustum, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glFrustum(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glFrustum", (GLADapiproc) glFrustum, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLFRUSTUMPROC glad_debug_glFrustum = glad_debug_impl_glFrustum;
PFNGLGENBUFFERSPROC glad_glGenBuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glGenBuffers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenBuffers", (GLADapiproc) glGenBuffers, 2, arg0, arg1);
    glGenBuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenBuffers", (GLADapiproc) glGenBuffers, 2, arg0, arg1);
    
}
PFNGLGENBUFFERSPROC glad_debug_glGenBuffers = glad_debug_impl_glGenBuffers;
PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glGenFramebuffers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenFramebuffers", (GLADapiproc) glGenFramebuffers, 2, arg0, arg1);
    glGenFramebuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenFramebuffers", (GLADapiproc) glGenFramebuffers, 2, arg0, arg1);
    
}
PFNGLGENFRAMEBUFFERSPROC glad_debug_glGenFramebuffers = glad_debug_impl_glGenFramebuffers;
PFNGLGENLISTSPROC glad_glGenLists = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glGenLists(GLsizei arg0) {
    GLuint ret;
    _pre_call_gl_callback("glGenLists", (GLADapiproc) glGenLists, 1, arg0);
    ret = glGenLists(arg0);
    _post_call_gl_callback((void*) &ret, "glGenLists", (GLADapiproc) glGenLists, 1, arg0);
    return ret;
}
PFNGLGENLISTSPROC glad_debug_glGenLists = glad_debug_impl_glGenLists;
PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines = NULL;
void GLAD_API_PTR glad_debug_impl_glGenProgramPipelines(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenProgramPipelines", (GLADapiproc) glGenProgramPipelines, 2, arg0, arg1);
    glGenProgramPipelines(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenProgramPipelines", (GLADapiproc) glGenProgramPipelines, 2, arg0, arg1);
    
}
PFNGLGENPROGRAMPIPELINESPROC glad_debug_glGenProgramPipelines = glad_debug_impl_glGenProgramPipelines;
PFNGLGENQUERIESPROC glad_glGenQueries = NULL;
void GLAD_API_PTR glad_debug_impl_glGenQueries(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenQueries", (GLADapiproc) glGenQueries, 2, arg0, arg1);
    glGenQueries(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenQueries", (GLADapiproc) glGenQueries, 2, arg0, arg1);
    
}
PFNGLGENQUERIESPROC glad_debug_glGenQueries = glad_debug_impl_glGenQueries;
PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glGenRenderbuffers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenRenderbuffers", (GLADapiproc) glGenRenderbuffers, 2, arg0, arg1);
    glGenRenderbuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenRenderbuffers", (GLADapiproc) glGenRenderbuffers, 2, arg0, arg1);
    
}
PFNGLGENRENDERBUFFERSPROC glad_debug_glGenRenderbuffers = glad_debug_impl_glGenRenderbuffers;
PFNGLGENSAMPLERSPROC glad_glGenSamplers = NULL;
void GLAD_API_PTR glad_debug_impl_glGenSamplers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenSamplers", (GLADapiproc) glGenSamplers, 2, arg0, arg1);
    glGenSamplers(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenSamplers", (GLADapiproc) glGenSamplers, 2, arg0, arg1);
    
}
PFNGLGENSAMPLERSPROC glad_debug_glGenSamplers = glad_debug_impl_glGenSamplers;
PFNGLGENTEXTURESPROC glad_glGenTextures = NULL;
void GLAD_API_PTR glad_debug_impl_glGenTextures(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenTextures", (GLADapiproc) glGenTextures, 2, arg0, arg1);
    glGenTextures(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenTextures", (GLADapiproc) glGenTextures, 2, arg0, arg1);
    
}
PFNGLGENTEXTURESPROC glad_debug_glGenTextures = glad_debug_impl_glGenTextures;
PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks = NULL;
void GLAD_API_PTR glad_debug_impl_glGenTransformFeedbacks(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenTransformFeedbacks", (GLADapiproc) glGenTransformFeedbacks, 2, arg0, arg1);
    glGenTransformFeedbacks(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenTransformFeedbacks", (GLADapiproc) glGenTransformFeedbacks, 2, arg0, arg1);
    
}
PFNGLGENTRANSFORMFEEDBACKSPROC glad_debug_glGenTransformFeedbacks = glad_debug_impl_glGenTransformFeedbacks;
PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays = NULL;
void GLAD_API_PTR glad_debug_impl_glGenVertexArrays(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenVertexArrays", (GLADapiproc) glGenVertexArrays, 2, arg0, arg1);
    glGenVertexArrays(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenVertexArrays", (GLADapiproc) glGenVertexArrays, 2, arg0, arg1);
    
}
PFNGLGENVERTEXARRAYSPROC glad_debug_glGenVertexArrays = glad_debug_impl_glGenVertexArrays;
PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap = NULL;
void GLAD_API_PTR glad_debug_impl_glGenerateMipmap(GLenum arg0) {
    _pre_call_gl_callback("glGenerateMipmap", (GLADapiproc) glGenerateMipmap, 1, arg0);
    glGenerateMipmap(arg0);
    _post_call_gl_callback(NULL, "glGenerateMipmap", (GLADapiproc) glGenerateMipmap, 1, arg0);
    
}
PFNGLGENERATEMIPMAPPROC glad_debug_glGenerateMipmap = glad_debug_impl_glGenerateMipmap;
PFNGLGENERATETEXTUREMIPMAPPROC glad_glGenerateTextureMipmap = NULL;
void GLAD_API_PTR glad_debug_impl_glGenerateTextureMipmap(GLuint arg0) {
    _pre_call_gl_callback("glGenerateTextureMipmap", (GLADapiproc) glGenerateTextureMipmap, 1, arg0);
    glGenerateTextureMipmap(arg0);
    _post_call_gl_callback(NULL, "glGenerateTextureMipmap", (GLADapiproc) glGenerateTextureMipmap, 1, arg0);
    
}
PFNGLGENERATETEXTUREMIPMAPPROC glad_debug_glGenerateTextureMipmap = glad_debug_impl_glGenerateTextureMipmap;
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_glGetActiveAtomicCounterBufferiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveAtomicCounterBufferiv(GLuint arg0, GLuint arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetActiveAtomicCounterBufferiv", (GLADapiproc) glGetActiveAtomicCounterBufferiv, 4, arg0, arg1, arg2, arg3);
    glGetActiveAtomicCounterBufferiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetActiveAtomicCounterBufferiv", (GLADapiproc) glGetActiveAtomicCounterBufferiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_debug_glGetActiveAtomicCounterBufferiv = glad_debug_impl_glGetActiveAtomicCounterBufferiv;
PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveAttrib(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei * arg3, GLint * arg4, GLenum * arg5, GLchar * arg6) {
    _pre_call_gl_callback("glGetActiveAttrib", (GLADapiproc) glGetActiveAttrib, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glGetActiveAttrib(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glGetActiveAttrib", (GLADapiproc) glGetActiveAttrib, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLGETACTIVEATTRIBPROC glad_debug_glGetActiveAttrib = glad_debug_impl_glGetActiveAttrib;
PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveSubroutineName(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, GLsizei * arg4, GLchar * arg5) {
    _pre_call_gl_callback("glGetActiveSubroutineName", (GLADapiproc) glGetActiveSubroutineName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glGetActiveSubroutineName(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glGetActiveSubroutineName", (GLADapiproc) glGetActiveSubroutineName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLGETACTIVESUBROUTINENAMEPROC glad_debug_glGetActiveSubroutineName = glad_debug_impl_glGetActiveSubroutineName;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveSubroutineUniformName(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, GLsizei * arg4, GLchar * arg5) {
    _pre_call_gl_callback("glGetActiveSubroutineUniformName", (GLADapiproc) glGetActiveSubroutineUniformName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glGetActiveSubroutineUniformName(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glGetActiveSubroutineUniformName", (GLADapiproc) glGetActiveSubroutineUniformName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_debug_glGetActiveSubroutineUniformName = glad_debug_impl_glGetActiveSubroutineUniformName;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveSubroutineUniformiv(GLuint arg0, GLenum arg1, GLuint arg2, GLenum arg3, GLint * arg4) {
    _pre_call_gl_callback("glGetActiveSubroutineUniformiv", (GLADapiproc) glGetActiveSubroutineUniformiv, 5, arg0, arg1, arg2, arg3, arg4);
    glGetActiveSubroutineUniformiv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetActiveSubroutineUniformiv", (GLADapiproc) glGetActiveSubroutineUniformiv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_debug_glGetActiveSubroutineUniformiv = glad_debug_impl_glGetActiveSubroutineUniformiv;
PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveUniform(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei * arg3, GLint * arg4, GLenum * arg5, GLchar * arg6) {
    _pre_call_gl_callback("glGetActiveUniform", (GLADapiproc) glGetActiveUniform, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glGetActiveUniform(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glGetActiveUniform", (GLADapiproc) glGetActiveUniform, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLGETACTIVEUNIFORMPROC glad_debug_glGetActiveUniform = glad_debug_impl_glGetActiveUniform;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveUniformBlockName(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei * arg3, GLchar * arg4) {
    _pre_call_gl_callback("glGetActiveUniformBlockName", (GLADapiproc) glGetActiveUniformBlockName, 5, arg0, arg1, arg2, arg3, arg4);
    glGetActiveUniformBlockName(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetActiveUniformBlockName", (GLADapiproc) glGetActiveUniformBlockName, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_debug_glGetActiveUniformBlockName = glad_debug_impl_glGetActiveUniformBlockName;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveUniformBlockiv(GLuint arg0, GLuint arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetActiveUniformBlockiv", (GLADapiproc) glGetActiveUniformBlockiv, 4, arg0, arg1, arg2, arg3);
    glGetActiveUniformBlockiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetActiveUniformBlockiv", (GLADapiproc) glGetActiveUniformBlockiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_debug_glGetActiveUniformBlockiv = glad_debug_impl_glGetActiveUniformBlockiv;
PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveUniformName(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei * arg3, GLchar * arg4) {
    _pre_call_gl_callback("glGetActiveUniformName", (GLADapiproc) glGetActiveUniformName, 5, arg0, arg1, arg2, arg3, arg4);
    glGetActiveUniformName(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetActiveUniformName", (GLADapiproc) glGetActiveUniformName, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETACTIVEUNIFORMNAMEPROC glad_debug_glGetActiveUniformName = glad_debug_impl_glGetActiveUniformName;
PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveUniformsiv(GLuint arg0, GLsizei arg1, const GLuint * arg2, GLenum arg3, GLint * arg4) {
    _pre_call_gl_callback("glGetActiveUniformsiv", (GLADapiproc) glGetActiveUniformsiv, 5, arg0, arg1, arg2, arg3, arg4);
    glGetActiveUniformsiv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetActiveUniformsiv", (GLADapiproc) glGetActiveUniformsiv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETACTIVEUNIFORMSIVPROC glad_debug_glGetActiveUniformsiv = glad_debug_impl_glGetActiveUniformsiv;
PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders = NULL;
void GLAD_API_PTR glad_debug_impl_glGetAttachedShaders(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLuint * arg3) {
    _pre_call_gl_callback("glGetAttachedShaders", (GLADapiproc) glGetAttachedShaders, 4, arg0, arg1, arg2, arg3);
    glGetAttachedShaders(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetAttachedShaders", (GLADapiproc) glGetAttachedShaders, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETATTACHEDSHADERSPROC glad_debug_glGetAttachedShaders = glad_debug_impl_glGetAttachedShaders;
PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetAttribLocation(GLuint arg0, const GLchar * arg1) {
    GLint ret;
    _pre_call_gl_callback("glGetAttribLocation", (GLADapiproc) glGetAttribLocation, 2, arg0, arg1);
    ret = glGetAttribLocation(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetAttribLocation", (GLADapiproc) glGetAttribLocation, 2, arg0, arg1);
    return ret;
}
PFNGLGETATTRIBLOCATIONPROC glad_debug_glGetAttribLocation = glad_debug_impl_glGetAttribLocation;
PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBooleani_v(GLenum arg0, GLuint arg1, GLboolean * arg2) {
    _pre_call_gl_callback("glGetBooleani_v", (GLADapiproc) glGetBooleani_v, 3, arg0, arg1, arg2);
    glGetBooleani_v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetBooleani_v", (GLADapiproc) glGetBooleani_v, 3, arg0, arg1, arg2);
    
}
PFNGLGETBOOLEANI_VPROC glad_debug_glGetBooleani_v = glad_debug_impl_glGetBooleani_v;
PFNGLGETBOOLEANVPROC glad_glGetBooleanv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBooleanv(GLenum arg0, GLboolean * arg1) {
    _pre_call_gl_callback("glGetBooleanv", (GLADapiproc) glGetBooleanv, 2, arg0, arg1);
    glGetBooleanv(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetBooleanv", (GLADapiproc) glGetBooleanv, 2, arg0, arg1);
    
}
PFNGLGETBOOLEANVPROC glad_debug_glGetBooleanv = glad_debug_impl_glGetBooleanv;
PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBufferParameteri64v(GLenum arg0, GLenum arg1, GLint64 * arg2) {
    _pre_call_gl_callback("glGetBufferParameteri64v", (GLADapiproc) glGetBufferParameteri64v, 3, arg0, arg1, arg2);
    glGetBufferParameteri64v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetBufferParameteri64v", (GLADapiproc) glGetBufferParameteri64v, 3, arg0, arg1, arg2);
    
}
PFNGLGETBUFFERPARAMETERI64VPROC glad_debug_glGetBufferParameteri64v = glad_debug_impl_glGetBufferParameteri64v;
PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBufferParameteriv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetBufferParameteriv", (GLADapiproc) glGetBufferParameteriv, 3, arg0, arg1, arg2);
    glGetBufferParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetBufferParameteriv", (GLADapiproc) glGetBufferParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETBUFFERPARAMETERIVPROC glad_debug_glGetBufferParameteriv = glad_debug_impl_glGetBufferParameteriv;
PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBufferPointerv(GLenum arg0, GLenum arg1, void ** arg2) {
    _pre_call_gl_callback("glGetBufferPointerv", (GLADapiproc) glGetBufferPointerv, 3, arg0, arg1, arg2);
    glGetBufferPointerv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetBufferPointerv", (GLADapiproc) glGetBufferPointerv, 3, arg0, arg1, arg2);
    
}
PFNGLGETBUFFERPOINTERVPROC glad_debug_glGetBufferPointerv = glad_debug_impl_glGetBufferPointerv;
PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBufferSubData(GLenum arg0, GLintptr arg1, GLsizeiptr arg2, void * arg3) {
    _pre_call_gl_callback("glGetBufferSubData", (GLADapiproc) glGetBufferSubData, 4, arg0, arg1, arg2, arg3);
    glGetBufferSubData(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetBufferSubData", (GLADapiproc) glGetBufferSubData, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETBUFFERSUBDATAPROC glad_debug_glGetBufferSubData = glad_debug_impl_glGetBufferSubData;
PFNGLGETCLIPPLANEPROC glad_glGetClipPlane = NULL;
void GLAD_API_PTR glad_debug_impl_glGetClipPlane(GLenum arg0, GLdouble * arg1) {
    _pre_call_gl_callback("glGetClipPlane", (GLADapiproc) glGetClipPlane, 2, arg0, arg1);
    glGetClipPlane(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetClipPlane", (GLADapiproc) glGetClipPlane, 2, arg0, arg1);
    
}
PFNGLGETCLIPPLANEPROC glad_debug_glGetClipPlane = glad_debug_impl_glGetClipPlane;
PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage = NULL;
void GLAD_API_PTR glad_debug_impl_glGetCompressedTexImage(GLenum arg0, GLint arg1, void * arg2) {
    _pre_call_gl_callback("glGetCompressedTexImage", (GLADapiproc) glGetCompressedTexImage, 3, arg0, arg1, arg2);
    glGetCompressedTexImage(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetCompressedTexImage", (GLADapiproc) glGetCompressedTexImage, 3, arg0, arg1, arg2);
    
}
PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_debug_glGetCompressedTexImage = glad_debug_impl_glGetCompressedTexImage;
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_glGetCompressedTextureImage = NULL;
void GLAD_API_PTR glad_debug_impl_glGetCompressedTextureImage(GLuint arg0, GLint arg1, GLsizei arg2, void * arg3) {
    _pre_call_gl_callback("glGetCompressedTextureImage", (GLADapiproc) glGetCompressedTextureImage, 4, arg0, arg1, arg2, arg3);
    glGetCompressedTextureImage(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetCompressedTextureImage", (GLADapiproc) glGetCompressedTextureImage, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_debug_glGetCompressedTextureImage = glad_debug_impl_glGetCompressedTextureImage;
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_glGetCompressedTextureSubImage = NULL;
void GLAD_API_PTR glad_debug_impl_glGetCompressedTextureSubImage(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLsizei arg8, void * arg9) {
    _pre_call_gl_callback("glGetCompressedTextureSubImage", (GLADapiproc) glGetCompressedTextureSubImage, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    glGetCompressedTextureSubImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_gl_callback(NULL, "glGetCompressedTextureSubImage", (GLADapiproc) glGetCompressedTextureSubImage, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
}
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_debug_glGetCompressedTextureSubImage = glad_debug_impl_glGetCompressedTextureSubImage;
PFNGLGETDEBUGMESSAGELOGPROC glad_glGetDebugMessageLog = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glGetDebugMessageLog(GLuint arg0, GLsizei arg1, GLenum * arg2, GLenum * arg3, GLuint * arg4, GLenum * arg5, GLsizei * arg6, GLchar * arg7) {
    GLuint ret;
    _pre_call_gl_callback("glGetDebugMessageLog", (GLADapiproc) glGetDebugMessageLog, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    ret = glGetDebugMessageLog(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback((void*) &ret, "glGetDebugMessageLog", (GLADapiproc) glGetDebugMessageLog, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    return ret;
}
PFNGLGETDEBUGMESSAGELOGPROC glad_debug_glGetDebugMessageLog = glad_debug_impl_glGetDebugMessageLog;
PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetDoublei_v(GLenum arg0, GLuint arg1, GLdouble * arg2) {
    _pre_call_gl_callback("glGetDoublei_v", (GLADapiproc) glGetDoublei_v, 3, arg0, arg1, arg2);
    glGetDoublei_v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetDoublei_v", (GLADapiproc) glGetDoublei_v, 3, arg0, arg1, arg2);
    
}
PFNGLGETDOUBLEI_VPROC glad_debug_glGetDoublei_v = glad_debug_impl_glGetDoublei_v;
PFNGLGETDOUBLEVPROC glad_glGetDoublev = NULL;
void GLAD_API_PTR glad_debug_impl_glGetDoublev(GLenum arg0, GLdouble * arg1) {
    _pre_call_gl_callback("glGetDoublev", (GLADapiproc) glGetDoublev, 2, arg0, arg1);
    glGetDoublev(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetDoublev", (GLADapiproc) glGetDoublev, 2, arg0, arg1);
    
}
PFNGLGETDOUBLEVPROC glad_debug_glGetDoublev = glad_debug_impl_glGetDoublev;
PFNGLGETERRORPROC glad_glGetError = NULL;
GLenum GLAD_API_PTR glad_debug_impl_glGetError(void) {
    GLenum ret;
    _pre_call_gl_callback("glGetError", (GLADapiproc) glGetError, 0);
    ret = glGetError();
    _post_call_gl_callback((void*) &ret, "glGetError", (GLADapiproc) glGetError, 0);
    return ret;
}
PFNGLGETERRORPROC glad_debug_glGetError = glad_debug_impl_glGetError;
PFNGLGETFLOATI_VPROC glad_glGetFloati_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetFloati_v(GLenum arg0, GLuint arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetFloati_v", (GLADapiproc) glGetFloati_v, 3, arg0, arg1, arg2);
    glGetFloati_v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetFloati_v", (GLADapiproc) glGetFloati_v, 3, arg0, arg1, arg2);
    
}
PFNGLGETFLOATI_VPROC glad_debug_glGetFloati_v = glad_debug_impl_glGetFloati_v;
PFNGLGETFLOATVPROC glad_glGetFloatv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetFloatv(GLenum arg0, GLfloat * arg1) {
    _pre_call_gl_callback("glGetFloatv", (GLADapiproc) glGetFloatv, 2, arg0, arg1);
    glGetFloatv(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetFloatv", (GLADapiproc) glGetFloatv, 2, arg0, arg1);
    
}
PFNGLGETFLOATVPROC glad_debug_glGetFloatv = glad_debug_impl_glGetFloatv;
PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetFragDataIndex(GLuint arg0, const GLchar * arg1) {
    GLint ret;
    _pre_call_gl_callback("glGetFragDataIndex", (GLADapiproc) glGetFragDataIndex, 2, arg0, arg1);
    ret = glGetFragDataIndex(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetFragDataIndex", (GLADapiproc) glGetFragDataIndex, 2, arg0, arg1);
    return ret;
}
PFNGLGETFRAGDATAINDEXPROC glad_debug_glGetFragDataIndex = glad_debug_impl_glGetFragDataIndex;
PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetFragDataLocation(GLuint arg0, const GLchar * arg1) {
    GLint ret;
    _pre_call_gl_callback("glGetFragDataLocation", (GLADapiproc) glGetFragDataLocation, 2, arg0, arg1);
    ret = glGetFragDataLocation(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetFragDataLocation", (GLADapiproc) glGetFragDataLocation, 2, arg0, arg1);
    return ret;
}
PFNGLGETFRAGDATALOCATIONPROC glad_debug_glGetFragDataLocation = glad_debug_impl_glGetFragDataLocation;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetFramebufferAttachmentParameteriv(GLenum arg0, GLenum arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetFramebufferAttachmentParameteriv", (GLADapiproc) glGetFramebufferAttachmentParameteriv, 4, arg0, arg1, arg2, arg3);
    glGetFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetFramebufferAttachmentParameteriv", (GLADapiproc) glGetFramebufferAttachmentParameteriv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_debug_glGetFramebufferAttachmentParameteriv = glad_debug_impl_glGetFramebufferAttachmentParameteriv;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_glGetFramebufferParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetFramebufferParameteriv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetFramebufferParameteriv", (GLADapiproc) glGetFramebufferParameteriv, 3, arg0, arg1, arg2);
    glGetFramebufferParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetFramebufferParameteriv", (GLADapiproc) glGetFramebufferParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_debug_glGetFramebufferParameteriv = glad_debug_impl_glGetFramebufferParameteriv;
PFNGLGETGRAPHICSRESETSTATUSPROC glad_glGetGraphicsResetStatus = NULL;
GLenum GLAD_API_PTR glad_debug_impl_glGetGraphicsResetStatus(void) {
    GLenum ret;
    _pre_call_gl_callback("glGetGraphicsResetStatus", (GLADapiproc) glGetGraphicsResetStatus, 0);
    ret = glGetGraphicsResetStatus();
    _post_call_gl_callback((void*) &ret, "glGetGraphicsResetStatus", (GLADapiproc) glGetGraphicsResetStatus, 0);
    return ret;
}
PFNGLGETGRAPHICSRESETSTATUSPROC glad_debug_glGetGraphicsResetStatus = glad_debug_impl_glGetGraphicsResetStatus;
PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetInteger64i_v(GLenum arg0, GLuint arg1, GLint64 * arg2) {
    _pre_call_gl_callback("glGetInteger64i_v", (GLADapiproc) glGetInteger64i_v, 3, arg0, arg1, arg2);
    glGetInteger64i_v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetInteger64i_v", (GLADapiproc) glGetInteger64i_v, 3, arg0, arg1, arg2);
    
}
PFNGLGETINTEGER64I_VPROC glad_debug_glGetInteger64i_v = glad_debug_impl_glGetInteger64i_v;
PFNGLGETINTEGER64VPROC glad_glGetInteger64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetInteger64v(GLenum arg0, GLint64 * arg1) {
    _pre_call_gl_callback("glGetInteger64v", (GLADapiproc) glGetInteger64v, 2, arg0, arg1);
    glGetInteger64v(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetInteger64v", (GLADapiproc) glGetInteger64v, 2, arg0, arg1);
    
}
PFNGLGETINTEGER64VPROC glad_debug_glGetInteger64v = glad_debug_impl_glGetInteger64v;
PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetIntegeri_v(GLenum arg0, GLuint arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetIntegeri_v", (GLADapiproc) glGetIntegeri_v, 3, arg0, arg1, arg2);
    glGetIntegeri_v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetIntegeri_v", (GLADapiproc) glGetIntegeri_v, 3, arg0, arg1, arg2);
    
}
PFNGLGETINTEGERI_VPROC glad_debug_glGetIntegeri_v = glad_debug_impl_glGetIntegeri_v;
PFNGLGETINTEGERVPROC glad_glGetIntegerv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetIntegerv(GLenum arg0, GLint * arg1) {
    _pre_call_gl_callback("glGetIntegerv", (GLADapiproc) glGetIntegerv, 2, arg0, arg1);
    glGetIntegerv(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetIntegerv", (GLADapiproc) glGetIntegerv, 2, arg0, arg1);
    
}
PFNGLGETINTEGERVPROC glad_debug_glGetIntegerv = glad_debug_impl_glGetIntegerv;
PFNGLGETINTERNALFORMATI64VPROC glad_glGetInternalformati64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetInternalformati64v(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, GLint64 * arg4) {
    _pre_call_gl_callback("glGetInternalformati64v", (GLADapiproc) glGetInternalformati64v, 5, arg0, arg1, arg2, arg3, arg4);
    glGetInternalformati64v(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetInternalformati64v", (GLADapiproc) glGetInternalformati64v, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETINTERNALFORMATI64VPROC glad_debug_glGetInternalformati64v = glad_debug_impl_glGetInternalformati64v;
PFNGLGETINTERNALFORMATIVPROC glad_glGetInternalformativ = NULL;
void GLAD_API_PTR glad_debug_impl_glGetInternalformativ(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, GLint * arg4) {
    _pre_call_gl_callback("glGetInternalformativ", (GLADapiproc) glGetInternalformativ, 5, arg0, arg1, arg2, arg3, arg4);
    glGetInternalformativ(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetInternalformativ", (GLADapiproc) glGetInternalformativ, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETINTERNALFORMATIVPROC glad_debug_glGetInternalformativ = glad_debug_impl_glGetInternalformativ;
PFNGLGETLIGHTFVPROC glad_glGetLightfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetLightfv(GLenum arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetLightfv", (GLADapiproc) glGetLightfv, 3, arg0, arg1, arg2);
    glGetLightfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetLightfv", (GLADapiproc) glGetLightfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETLIGHTFVPROC glad_debug_glGetLightfv = glad_debug_impl_glGetLightfv;
PFNGLGETLIGHTIVPROC glad_glGetLightiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetLightiv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetLightiv", (GLADapiproc) glGetLightiv, 3, arg0, arg1, arg2);
    glGetLightiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetLightiv", (GLADapiproc) glGetLightiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETLIGHTIVPROC glad_debug_glGetLightiv = glad_debug_impl_glGetLightiv;
PFNGLGETMAPDVPROC glad_glGetMapdv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetMapdv(GLenum arg0, GLenum arg1, GLdouble * arg2) {
    _pre_call_gl_callback("glGetMapdv", (GLADapiproc) glGetMapdv, 3, arg0, arg1, arg2);
    glGetMapdv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetMapdv", (GLADapiproc) glGetMapdv, 3, arg0, arg1, arg2);
    
}
PFNGLGETMAPDVPROC glad_debug_glGetMapdv = glad_debug_impl_glGetMapdv;
PFNGLGETMAPFVPROC glad_glGetMapfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetMapfv(GLenum arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetMapfv", (GLADapiproc) glGetMapfv, 3, arg0, arg1, arg2);
    glGetMapfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetMapfv", (GLADapiproc) glGetMapfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETMAPFVPROC glad_debug_glGetMapfv = glad_debug_impl_glGetMapfv;
PFNGLGETMAPIVPROC glad_glGetMapiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetMapiv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetMapiv", (GLADapiproc) glGetMapiv, 3, arg0, arg1, arg2);
    glGetMapiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetMapiv", (GLADapiproc) glGetMapiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETMAPIVPROC glad_debug_glGetMapiv = glad_debug_impl_glGetMapiv;
PFNGLGETMATERIALFVPROC glad_glGetMaterialfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetMaterialfv(GLenum arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetMaterialfv", (GLADapiproc) glGetMaterialfv, 3, arg0, arg1, arg2);
    glGetMaterialfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetMaterialfv", (GLADapiproc) glGetMaterialfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETMATERIALFVPROC glad_debug_glGetMaterialfv = glad_debug_impl_glGetMaterialfv;
PFNGLGETMATERIALIVPROC glad_glGetMaterialiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetMaterialiv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetMaterialiv", (GLADapiproc) glGetMaterialiv, 3, arg0, arg1, arg2);
    glGetMaterialiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetMaterialiv", (GLADapiproc) glGetMaterialiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETMATERIALIVPROC glad_debug_glGetMaterialiv = glad_debug_impl_glGetMaterialiv;
PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetMultisamplefv(GLenum arg0, GLuint arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetMultisamplefv", (GLADapiproc) glGetMultisamplefv, 3, arg0, arg1, arg2);
    glGetMultisamplefv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetMultisamplefv", (GLADapiproc) glGetMultisamplefv, 3, arg0, arg1, arg2);
    
}
PFNGLGETMULTISAMPLEFVPROC glad_debug_glGetMultisamplefv = glad_debug_impl_glGetMultisamplefv;
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_glGetNamedBufferParameteri64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetNamedBufferParameteri64v(GLuint arg0, GLenum arg1, GLint64 * arg2) {
    _pre_call_gl_callback("glGetNamedBufferParameteri64v", (GLADapiproc) glGetNamedBufferParameteri64v, 3, arg0, arg1, arg2);
    glGetNamedBufferParameteri64v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetNamedBufferParameteri64v", (GLADapiproc) glGetNamedBufferParameteri64v, 3, arg0, arg1, arg2);
    
}
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_debug_glGetNamedBufferParameteri64v = glad_debug_impl_glGetNamedBufferParameteri64v;
PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_glGetNamedBufferParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetNamedBufferParameteriv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetNamedBufferParameteriv", (GLADapiproc) glGetNamedBufferParameteriv, 3, arg0, arg1, arg2);
    glGetNamedBufferParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetNamedBufferParameteriv", (GLADapiproc) glGetNamedBufferParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_debug_glGetNamedBufferParameteriv = glad_debug_impl_glGetNamedBufferParameteriv;
PFNGLGETNAMEDBUFFERPOINTERVPROC glad_glGetNamedBufferPointerv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetNamedBufferPointerv(GLuint arg0, GLenum arg1, void ** arg2) {
    _pre_call_gl_callback("glGetNamedBufferPointerv", (GLADapiproc) glGetNamedBufferPointerv, 3, arg0, arg1, arg2);
    glGetNamedBufferPointerv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetNamedBufferPointerv", (GLADapiproc) glGetNamedBufferPointerv, 3, arg0, arg1, arg2);
    
}
PFNGLGETNAMEDBUFFERPOINTERVPROC glad_debug_glGetNamedBufferPointerv = glad_debug_impl_glGetNamedBufferPointerv;
PFNGLGETNAMEDBUFFERSUBDATAPROC glad_glGetNamedBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glGetNamedBufferSubData(GLuint arg0, GLintptr arg1, GLsizeiptr arg2, void * arg3) {
    _pre_call_gl_callback("glGetNamedBufferSubData", (GLADapiproc) glGetNamedBufferSubData, 4, arg0, arg1, arg2, arg3);
    glGetNamedBufferSubData(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetNamedBufferSubData", (GLADapiproc) glGetNamedBufferSubData, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNAMEDBUFFERSUBDATAPROC glad_debug_glGetNamedBufferSubData = glad_debug_impl_glGetNamedBufferSubData;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetNamedFramebufferAttachmentParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetNamedFramebufferAttachmentParameteriv(GLuint arg0, GLenum arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetNamedFramebufferAttachmentParameteriv", (GLADapiproc) glGetNamedFramebufferAttachmentParameteriv, 4, arg0, arg1, arg2, arg3);
    glGetNamedFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetNamedFramebufferAttachmentParameteriv", (GLADapiproc) glGetNamedFramebufferAttachmentParameteriv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_debug_glGetNamedFramebufferAttachmentParameteriv = glad_debug_impl_glGetNamedFramebufferAttachmentParameteriv;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_glGetNamedFramebufferParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetNamedFramebufferParameteriv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetNamedFramebufferParameteriv", (GLADapiproc) glGetNamedFramebufferParameteriv, 3, arg0, arg1, arg2);
    glGetNamedFramebufferParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetNamedFramebufferParameteriv", (GLADapiproc) glGetNamedFramebufferParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_debug_glGetNamedFramebufferParameteriv = glad_debug_impl_glGetNamedFramebufferParameteriv;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_glGetNamedRenderbufferParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetNamedRenderbufferParameteriv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetNamedRenderbufferParameteriv", (GLADapiproc) glGetNamedRenderbufferParameteriv, 3, arg0, arg1, arg2);
    glGetNamedRenderbufferParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetNamedRenderbufferParameteriv", (GLADapiproc) glGetNamedRenderbufferParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_debug_glGetNamedRenderbufferParameteriv = glad_debug_impl_glGetNamedRenderbufferParameteriv;
PFNGLGETOBJECTLABELPROC glad_glGetObjectLabel = NULL;
void GLAD_API_PTR glad_debug_impl_glGetObjectLabel(GLenum arg0, GLuint arg1, GLsizei arg2, GLsizei * arg3, GLchar * arg4) {
    _pre_call_gl_callback("glGetObjectLabel", (GLADapiproc) glGetObjectLabel, 5, arg0, arg1, arg2, arg3, arg4);
    glGetObjectLabel(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetObjectLabel", (GLADapiproc) glGetObjectLabel, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETOBJECTLABELPROC glad_debug_glGetObjectLabel = glad_debug_impl_glGetObjectLabel;
PFNGLGETOBJECTPTRLABELPROC glad_glGetObjectPtrLabel = NULL;
void GLAD_API_PTR glad_debug_impl_glGetObjectPtrLabel(const void * arg0, GLsizei arg1, GLsizei * arg2, GLchar * arg3) {
    _pre_call_gl_callback("glGetObjectPtrLabel", (GLADapiproc) glGetObjectPtrLabel, 4, arg0, arg1, arg2, arg3);
    glGetObjectPtrLabel(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetObjectPtrLabel", (GLADapiproc) glGetObjectPtrLabel, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETOBJECTPTRLABELPROC glad_debug_glGetObjectPtrLabel = glad_debug_impl_glGetObjectPtrLabel;
PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetPixelMapfv(GLenum arg0, GLfloat * arg1) {
    _pre_call_gl_callback("glGetPixelMapfv", (GLADapiproc) glGetPixelMapfv, 2, arg0, arg1);
    glGetPixelMapfv(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetPixelMapfv", (GLADapiproc) glGetPixelMapfv, 2, arg0, arg1);
    
}
PFNGLGETPIXELMAPFVPROC glad_debug_glGetPixelMapfv = glad_debug_impl_glGetPixelMapfv;
PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetPixelMapuiv(GLenum arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGetPixelMapuiv", (GLADapiproc) glGetPixelMapuiv, 2, arg0, arg1);
    glGetPixelMapuiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetPixelMapuiv", (GLADapiproc) glGetPixelMapuiv, 2, arg0, arg1);
    
}
PFNGLGETPIXELMAPUIVPROC glad_debug_glGetPixelMapuiv = glad_debug_impl_glGetPixelMapuiv;
PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetPixelMapusv(GLenum arg0, GLushort * arg1) {
    _pre_call_gl_callback("glGetPixelMapusv", (GLADapiproc) glGetPixelMapusv, 2, arg0, arg1);
    glGetPixelMapusv(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetPixelMapusv", (GLADapiproc) glGetPixelMapusv, 2, arg0, arg1);
    
}
PFNGLGETPIXELMAPUSVPROC glad_debug_glGetPixelMapusv = glad_debug_impl_glGetPixelMapusv;
PFNGLGETPOINTERVPROC glad_glGetPointerv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetPointerv(GLenum arg0, void ** arg1) {
    _pre_call_gl_callback("glGetPointerv", (GLADapiproc) glGetPointerv, 2, arg0, arg1);
    glGetPointerv(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetPointerv", (GLADapiproc) glGetPointerv, 2, arg0, arg1);
    
}
PFNGLGETPOINTERVPROC glad_debug_glGetPointerv = glad_debug_impl_glGetPointerv;
PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple = NULL;
void GLAD_API_PTR glad_debug_impl_glGetPolygonStipple(GLubyte * arg0) {
    _pre_call_gl_callback("glGetPolygonStipple", (GLADapiproc) glGetPolygonStipple, 1, arg0);
    glGetPolygonStipple(arg0);
    _post_call_gl_callback(NULL, "glGetPolygonStipple", (GLADapiproc) glGetPolygonStipple, 1, arg0);
    
}
PFNGLGETPOLYGONSTIPPLEPROC glad_debug_glGetPolygonStipple = glad_debug_impl_glGetPolygonStipple;
PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramBinary(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLenum * arg3, void * arg4) {
    _pre_call_gl_callback("glGetProgramBinary", (GLADapiproc) glGetProgramBinary, 5, arg0, arg1, arg2, arg3, arg4);
    glGetProgramBinary(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetProgramBinary", (GLADapiproc) glGetProgramBinary, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETPROGRAMBINARYPROC glad_debug_glGetProgramBinary = glad_debug_impl_glGetProgramBinary;
PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramInfoLog(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLchar * arg3) {
    _pre_call_gl_callback("glGetProgramInfoLog", (GLADapiproc) glGetProgramInfoLog, 4, arg0, arg1, arg2, arg3);
    glGetProgramInfoLog(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetProgramInfoLog", (GLADapiproc) glGetProgramInfoLog, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETPROGRAMINFOLOGPROC glad_debug_glGetProgramInfoLog = glad_debug_impl_glGetProgramInfoLog;
PFNGLGETPROGRAMINTERFACEIVPROC glad_glGetProgramInterfaceiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramInterfaceiv(GLuint arg0, GLenum arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetProgramInterfaceiv", (GLADapiproc) glGetProgramInterfaceiv, 4, arg0, arg1, arg2, arg3);
    glGetProgramInterfaceiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetProgramInterfaceiv", (GLADapiproc) glGetProgramInterfaceiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETPROGRAMINTERFACEIVPROC glad_debug_glGetProgramInterfaceiv = glad_debug_impl_glGetProgramInterfaceiv;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramPipelineInfoLog(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLchar * arg3) {
    _pre_call_gl_callback("glGetProgramPipelineInfoLog", (GLADapiproc) glGetProgramPipelineInfoLog, 4, arg0, arg1, arg2, arg3);
    glGetProgramPipelineInfoLog(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetProgramPipelineInfoLog", (GLADapiproc) glGetProgramPipelineInfoLog, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_debug_glGetProgramPipelineInfoLog = glad_debug_impl_glGetProgramPipelineInfoLog;
PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramPipelineiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetProgramPipelineiv", (GLADapiproc) glGetProgramPipelineiv, 3, arg0, arg1, arg2);
    glGetProgramPipelineiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetProgramPipelineiv", (GLADapiproc) glGetProgramPipelineiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETPROGRAMPIPELINEIVPROC glad_debug_glGetProgramPipelineiv = glad_debug_impl_glGetProgramPipelineiv;
PFNGLGETPROGRAMRESOURCEINDEXPROC glad_glGetProgramResourceIndex = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glGetProgramResourceIndex(GLuint arg0, GLenum arg1, const GLchar * arg2) {
    GLuint ret;
    _pre_call_gl_callback("glGetProgramResourceIndex", (GLADapiproc) glGetProgramResourceIndex, 3, arg0, arg1, arg2);
    ret = glGetProgramResourceIndex(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glGetProgramResourceIndex", (GLADapiproc) glGetProgramResourceIndex, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETPROGRAMRESOURCEINDEXPROC glad_debug_glGetProgramResourceIndex = glad_debug_impl_glGetProgramResourceIndex;
PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_glGetProgramResourceLocation = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetProgramResourceLocation(GLuint arg0, GLenum arg1, const GLchar * arg2) {
    GLint ret;
    _pre_call_gl_callback("glGetProgramResourceLocation", (GLADapiproc) glGetProgramResourceLocation, 3, arg0, arg1, arg2);
    ret = glGetProgramResourceLocation(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glGetProgramResourceLocation", (GLADapiproc) glGetProgramResourceLocation, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_debug_glGetProgramResourceLocation = glad_debug_impl_glGetProgramResourceLocation;
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_glGetProgramResourceLocationIndex = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetProgramResourceLocationIndex(GLuint arg0, GLenum arg1, const GLchar * arg2) {
    GLint ret;
    _pre_call_gl_callback("glGetProgramResourceLocationIndex", (GLADapiproc) glGetProgramResourceLocationIndex, 3, arg0, arg1, arg2);
    ret = glGetProgramResourceLocationIndex(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glGetProgramResourceLocationIndex", (GLADapiproc) glGetProgramResourceLocationIndex, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_debug_glGetProgramResourceLocationIndex = glad_debug_impl_glGetProgramResourceLocationIndex;
PFNGLGETPROGRAMRESOURCENAMEPROC glad_glGetProgramResourceName = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramResourceName(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, GLsizei * arg4, GLchar * arg5) {
    _pre_call_gl_callback("glGetProgramResourceName", (GLADapiproc) glGetProgramResourceName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glGetProgramResourceName(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glGetProgramResourceName", (GLADapiproc) glGetProgramResourceName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLGETPROGRAMRESOURCENAMEPROC glad_debug_glGetProgramResourceName = glad_debug_impl_glGetProgramResourceName;
PFNGLGETPROGRAMRESOURCEIVPROC glad_glGetProgramResourceiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramResourceiv(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, const GLenum * arg4, GLsizei arg5, GLsizei * arg6, GLint * arg7) {
    _pre_call_gl_callback("glGetProgramResourceiv", (GLADapiproc) glGetProgramResourceiv, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glGetProgramResourceiv(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glGetProgramResourceiv", (GLADapiproc) glGetProgramResourceiv, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLGETPROGRAMRESOURCEIVPROC glad_debug_glGetProgramResourceiv = glad_debug_impl_glGetProgramResourceiv;
PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramStageiv(GLuint arg0, GLenum arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetProgramStageiv", (GLADapiproc) glGetProgramStageiv, 4, arg0, arg1, arg2, arg3);
    glGetProgramStageiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetProgramStageiv", (GLADapiproc) glGetProgramStageiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETPROGRAMSTAGEIVPROC glad_debug_glGetProgramStageiv = glad_debug_impl_glGetProgramStageiv;
PFNGLGETPROGRAMIVPROC glad_glGetProgramiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetProgramiv", (GLADapiproc) glGetProgramiv, 3, arg0, arg1, arg2);
    glGetProgramiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetProgramiv", (GLADapiproc) glGetProgramiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETPROGRAMIVPROC glad_debug_glGetProgramiv = glad_debug_impl_glGetProgramiv;
PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_glGetQueryBufferObjecti64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryBufferObjecti64v(GLuint arg0, GLuint arg1, GLenum arg2, GLintptr arg3) {
    _pre_call_gl_callback("glGetQueryBufferObjecti64v", (GLADapiproc) glGetQueryBufferObjecti64v, 4, arg0, arg1, arg2, arg3);
    glGetQueryBufferObjecti64v(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetQueryBufferObjecti64v", (GLADapiproc) glGetQueryBufferObjecti64v, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_debug_glGetQueryBufferObjecti64v = glad_debug_impl_glGetQueryBufferObjecti64v;
PFNGLGETQUERYBUFFEROBJECTIVPROC glad_glGetQueryBufferObjectiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryBufferObjectiv(GLuint arg0, GLuint arg1, GLenum arg2, GLintptr arg3) {
    _pre_call_gl_callback("glGetQueryBufferObjectiv", (GLADapiproc) glGetQueryBufferObjectiv, 4, arg0, arg1, arg2, arg3);
    glGetQueryBufferObjectiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetQueryBufferObjectiv", (GLADapiproc) glGetQueryBufferObjectiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETQUERYBUFFEROBJECTIVPROC glad_debug_glGetQueryBufferObjectiv = glad_debug_impl_glGetQueryBufferObjectiv;
PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_glGetQueryBufferObjectui64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryBufferObjectui64v(GLuint arg0, GLuint arg1, GLenum arg2, GLintptr arg3) {
    _pre_call_gl_callback("glGetQueryBufferObjectui64v", (GLADapiproc) glGetQueryBufferObjectui64v, 4, arg0, arg1, arg2, arg3);
    glGetQueryBufferObjectui64v(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetQueryBufferObjectui64v", (GLADapiproc) glGetQueryBufferObjectui64v, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_debug_glGetQueryBufferObjectui64v = glad_debug_impl_glGetQueryBufferObjectui64v;
PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_glGetQueryBufferObjectuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryBufferObjectuiv(GLuint arg0, GLuint arg1, GLenum arg2, GLintptr arg3) {
    _pre_call_gl_callback("glGetQueryBufferObjectuiv", (GLADapiproc) glGetQueryBufferObjectuiv, 4, arg0, arg1, arg2, arg3);
    glGetQueryBufferObjectuiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetQueryBufferObjectuiv", (GLADapiproc) glGetQueryBufferObjectuiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_debug_glGetQueryBufferObjectuiv = glad_debug_impl_glGetQueryBufferObjectuiv;
PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryIndexediv(GLenum arg0, GLuint arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetQueryIndexediv", (GLADapiproc) glGetQueryIndexediv, 4, arg0, arg1, arg2, arg3);
    glGetQueryIndexediv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetQueryIndexediv", (GLADapiproc) glGetQueryIndexediv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETQUERYINDEXEDIVPROC glad_debug_glGetQueryIndexediv = glad_debug_impl_glGetQueryIndexediv;
PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryObjecti64v(GLuint arg0, GLenum arg1, GLint64 * arg2) {
    _pre_call_gl_callback("glGetQueryObjecti64v", (GLADapiproc) glGetQueryObjecti64v, 3, arg0, arg1, arg2);
    glGetQueryObjecti64v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetQueryObjecti64v", (GLADapiproc) glGetQueryObjecti64v, 3, arg0, arg1, arg2);
    
}
PFNGLGETQUERYOBJECTI64VPROC glad_debug_glGetQueryObjecti64v = glad_debug_impl_glGetQueryObjecti64v;
PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryObjectiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetQueryObjectiv", (GLADapiproc) glGetQueryObjectiv, 3, arg0, arg1, arg2);
    glGetQueryObjectiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetQueryObjectiv", (GLADapiproc) glGetQueryObjectiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETQUERYOBJECTIVPROC glad_debug_glGetQueryObjectiv = glad_debug_impl_glGetQueryObjectiv;
PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryObjectui64v(GLuint arg0, GLenum arg1, GLuint64 * arg2) {
    _pre_call_gl_callback("glGetQueryObjectui64v", (GLADapiproc) glGetQueryObjectui64v, 3, arg0, arg1, arg2);
    glGetQueryObjectui64v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetQueryObjectui64v", (GLADapiproc) glGetQueryObjectui64v, 3, arg0, arg1, arg2);
    
}
PFNGLGETQUERYOBJECTUI64VPROC glad_debug_glGetQueryObjectui64v = glad_debug_impl_glGetQueryObjectui64v;
PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryObjectuiv(GLuint arg0, GLenum arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetQueryObjectuiv", (GLADapiproc) glGetQueryObjectuiv, 3, arg0, arg1, arg2);
    glGetQueryObjectuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetQueryObjectuiv", (GLADapiproc) glGetQueryObjectuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETQUERYOBJECTUIVPROC glad_debug_glGetQueryObjectuiv = glad_debug_impl_glGetQueryObjectuiv;
PFNGLGETQUERYIVPROC glad_glGetQueryiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryiv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetQueryiv", (GLADapiproc) glGetQueryiv, 3, arg0, arg1, arg2);
    glGetQueryiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetQueryiv", (GLADapiproc) glGetQueryiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETQUERYIVPROC glad_debug_glGetQueryiv = glad_debug_impl_glGetQueryiv;
PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetRenderbufferParameteriv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetRenderbufferParameteriv", (GLADapiproc) glGetRenderbufferParameteriv, 3, arg0, arg1, arg2);
    glGetRenderbufferParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetRenderbufferParameteriv", (GLADapiproc) glGetRenderbufferParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_debug_glGetRenderbufferParameteriv = glad_debug_impl_glGetRenderbufferParameteriv;
PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetSamplerParameterIiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetSamplerParameterIiv", (GLADapiproc) glGetSamplerParameterIiv, 3, arg0, arg1, arg2);
    glGetSamplerParameterIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetSamplerParameterIiv", (GLADapiproc) glGetSamplerParameterIiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETSAMPLERPARAMETERIIVPROC glad_debug_glGetSamplerParameterIiv = glad_debug_impl_glGetSamplerParameterIiv;
PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetSamplerParameterIuiv(GLuint arg0, GLenum arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetSamplerParameterIuiv", (GLADapiproc) glGetSamplerParameterIuiv, 3, arg0, arg1, arg2);
    glGetSamplerParameterIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetSamplerParameterIuiv", (GLADapiproc) glGetSamplerParameterIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETSAMPLERPARAMETERIUIVPROC glad_debug_glGetSamplerParameterIuiv = glad_debug_impl_glGetSamplerParameterIuiv;
PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetSamplerParameterfv(GLuint arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetSamplerParameterfv", (GLADapiproc) glGetSamplerParameterfv, 3, arg0, arg1, arg2);
    glGetSamplerParameterfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetSamplerParameterfv", (GLADapiproc) glGetSamplerParameterfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETSAMPLERPARAMETERFVPROC glad_debug_glGetSamplerParameterfv = glad_debug_impl_glGetSamplerParameterfv;
PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetSamplerParameteriv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetSamplerParameteriv", (GLADapiproc) glGetSamplerParameteriv, 3, arg0, arg1, arg2);
    glGetSamplerParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetSamplerParameteriv", (GLADapiproc) glGetSamplerParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETSAMPLERPARAMETERIVPROC glad_debug_glGetSamplerParameteriv = glad_debug_impl_glGetSamplerParameteriv;
PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog = NULL;
void GLAD_API_PTR glad_debug_impl_glGetShaderInfoLog(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLchar * arg3) {
    _pre_call_gl_callback("glGetShaderInfoLog", (GLADapiproc) glGetShaderInfoLog, 4, arg0, arg1, arg2, arg3);
    glGetShaderInfoLog(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetShaderInfoLog", (GLADapiproc) glGetShaderInfoLog, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETSHADERINFOLOGPROC glad_debug_glGetShaderInfoLog = glad_debug_impl_glGetShaderInfoLog;
PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat = NULL;
void GLAD_API_PTR glad_debug_impl_glGetShaderPrecisionFormat(GLenum arg0, GLenum arg1, GLint * arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetShaderPrecisionFormat", (GLADapiproc) glGetShaderPrecisionFormat, 4, arg0, arg1, arg2, arg3);
    glGetShaderPrecisionFormat(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetShaderPrecisionFormat", (GLADapiproc) glGetShaderPrecisionFormat, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETSHADERPRECISIONFORMATPROC glad_debug_glGetShaderPrecisionFormat = glad_debug_impl_glGetShaderPrecisionFormat;
PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource = NULL;
void GLAD_API_PTR glad_debug_impl_glGetShaderSource(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLchar * arg3) {
    _pre_call_gl_callback("glGetShaderSource", (GLADapiproc) glGetShaderSource, 4, arg0, arg1, arg2, arg3);
    glGetShaderSource(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetShaderSource", (GLADapiproc) glGetShaderSource, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETSHADERSOURCEPROC glad_debug_glGetShaderSource = glad_debug_impl_glGetShaderSource;
PFNGLGETSHADERIVPROC glad_glGetShaderiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetShaderiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetShaderiv", (GLADapiproc) glGetShaderiv, 3, arg0, arg1, arg2);
    glGetShaderiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetShaderiv", (GLADapiproc) glGetShaderiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETSHADERIVPROC glad_debug_glGetShaderiv = glad_debug_impl_glGetShaderiv;
PFNGLGETSTRINGPROC glad_glGetString = NULL;
const GLubyte * GLAD_API_PTR glad_debug_impl_glGetString(GLenum arg0) {
    const GLubyte * ret;
    _pre_call_gl_callback("glGetString", (GLADapiproc) glGetString, 1, arg0);
    ret = glGetString(arg0);
    _post_call_gl_callback((void*) &ret, "glGetString", (GLADapiproc) glGetString, 1, arg0);
    return ret;
}
PFNGLGETSTRINGPROC glad_debug_glGetString = glad_debug_impl_glGetString;
PFNGLGETSTRINGIPROC glad_glGetStringi = NULL;
const GLubyte * GLAD_API_PTR glad_debug_impl_glGetStringi(GLenum arg0, GLuint arg1) {
    const GLubyte * ret;
    _pre_call_gl_callback("glGetStringi", (GLADapiproc) glGetStringi, 2, arg0, arg1);
    ret = glGetStringi(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetStringi", (GLADapiproc) glGetStringi, 2, arg0, arg1);
    return ret;
}
PFNGLGETSTRINGIPROC glad_debug_glGetStringi = glad_debug_impl_glGetStringi;
PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glGetSubroutineIndex(GLuint arg0, GLenum arg1, const GLchar * arg2) {
    GLuint ret;
    _pre_call_gl_callback("glGetSubroutineIndex", (GLADapiproc) glGetSubroutineIndex, 3, arg0, arg1, arg2);
    ret = glGetSubroutineIndex(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glGetSubroutineIndex", (GLADapiproc) glGetSubroutineIndex, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETSUBROUTINEINDEXPROC glad_debug_glGetSubroutineIndex = glad_debug_impl_glGetSubroutineIndex;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetSubroutineUniformLocation(GLuint arg0, GLenum arg1, const GLchar * arg2) {
    GLint ret;
    _pre_call_gl_callback("glGetSubroutineUniformLocation", (GLADapiproc) glGetSubroutineUniformLocation, 3, arg0, arg1, arg2);
    ret = glGetSubroutineUniformLocation(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glGetSubroutineUniformLocation", (GLADapiproc) glGetSubroutineUniformLocation, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_debug_glGetSubroutineUniformLocation = glad_debug_impl_glGetSubroutineUniformLocation;
PFNGLGETSYNCIVPROC glad_glGetSynciv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetSynciv(GLsync arg0, GLenum arg1, GLsizei arg2, GLsizei * arg3, GLint * arg4) {
    _pre_call_gl_callback("glGetSynciv", (GLADapiproc) glGetSynciv, 5, arg0, arg1, arg2, arg3, arg4);
    glGetSynciv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetSynciv", (GLADapiproc) glGetSynciv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETSYNCIVPROC glad_debug_glGetSynciv = glad_debug_impl_glGetSynciv;
PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexEnvfv(GLenum arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetTexEnvfv", (GLADapiproc) glGetTexEnvfv, 3, arg0, arg1, arg2);
    glGetTexEnvfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexEnvfv", (GLADapiproc) glGetTexEnvfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXENVFVPROC glad_debug_glGetTexEnvfv = glad_debug_impl_glGetTexEnvfv;
PFNGLGETTEXENVIVPROC glad_glGetTexEnviv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexEnviv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetTexEnviv", (GLADapiproc) glGetTexEnviv, 3, arg0, arg1, arg2);
    glGetTexEnviv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexEnviv", (GLADapiproc) glGetTexEnviv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXENVIVPROC glad_debug_glGetTexEnviv = glad_debug_impl_glGetTexEnviv;
PFNGLGETTEXGENDVPROC glad_glGetTexGendv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexGendv(GLenum arg0, GLenum arg1, GLdouble * arg2) {
    _pre_call_gl_callback("glGetTexGendv", (GLADapiproc) glGetTexGendv, 3, arg0, arg1, arg2);
    glGetTexGendv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexGendv", (GLADapiproc) glGetTexGendv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXGENDVPROC glad_debug_glGetTexGendv = glad_debug_impl_glGetTexGendv;
PFNGLGETTEXGENFVPROC glad_glGetTexGenfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexGenfv(GLenum arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetTexGenfv", (GLADapiproc) glGetTexGenfv, 3, arg0, arg1, arg2);
    glGetTexGenfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexGenfv", (GLADapiproc) glGetTexGenfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXGENFVPROC glad_debug_glGetTexGenfv = glad_debug_impl_glGetTexGenfv;
PFNGLGETTEXGENIVPROC glad_glGetTexGeniv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexGeniv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetTexGeniv", (GLADapiproc) glGetTexGeniv, 3, arg0, arg1, arg2);
    glGetTexGeniv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexGeniv", (GLADapiproc) glGetTexGeniv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXGENIVPROC glad_debug_glGetTexGeniv = glad_debug_impl_glGetTexGeniv;
PFNGLGETTEXIMAGEPROC glad_glGetTexImage = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexImage(GLenum arg0, GLint arg1, GLenum arg2, GLenum arg3, void * arg4) {
    _pre_call_gl_callback("glGetTexImage", (GLADapiproc) glGetTexImage, 5, arg0, arg1, arg2, arg3, arg4);
    glGetTexImage(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetTexImage", (GLADapiproc) glGetTexImage, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETTEXIMAGEPROC glad_debug_glGetTexImage = glad_debug_impl_glGetTexImage;
PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexLevelParameterfv(GLenum arg0, GLint arg1, GLenum arg2, GLfloat * arg3) {
    _pre_call_gl_callback("glGetTexLevelParameterfv", (GLADapiproc) glGetTexLevelParameterfv, 4, arg0, arg1, arg2, arg3);
    glGetTexLevelParameterfv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetTexLevelParameterfv", (GLADapiproc) glGetTexLevelParameterfv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETTEXLEVELPARAMETERFVPROC glad_debug_glGetTexLevelParameterfv = glad_debug_impl_glGetTexLevelParameterfv;
PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexLevelParameteriv(GLenum arg0, GLint arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetTexLevelParameteriv", (GLADapiproc) glGetTexLevelParameteriv, 4, arg0, arg1, arg2, arg3);
    glGetTexLevelParameteriv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetTexLevelParameteriv", (GLADapiproc) glGetTexLevelParameteriv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETTEXLEVELPARAMETERIVPROC glad_debug_glGetTexLevelParameteriv = glad_debug_impl_glGetTexLevelParameteriv;
PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexParameterIiv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetTexParameterIiv", (GLADapiproc) glGetTexParameterIiv, 3, arg0, arg1, arg2);
    glGetTexParameterIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexParameterIiv", (GLADapiproc) glGetTexParameterIiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXPARAMETERIIVPROC glad_debug_glGetTexParameterIiv = glad_debug_impl_glGetTexParameterIiv;
PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexParameterIuiv(GLenum arg0, GLenum arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetTexParameterIuiv", (GLADapiproc) glGetTexParameterIuiv, 3, arg0, arg1, arg2);
    glGetTexParameterIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexParameterIuiv", (GLADapiproc) glGetTexParameterIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXPARAMETERIUIVPROC glad_debug_glGetTexParameterIuiv = glad_debug_impl_glGetTexParameterIuiv;
PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexParameterfv(GLenum arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetTexParameterfv", (GLADapiproc) glGetTexParameterfv, 3, arg0, arg1, arg2);
    glGetTexParameterfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexParameterfv", (GLADapiproc) glGetTexParameterfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXPARAMETERFVPROC glad_debug_glGetTexParameterfv = glad_debug_impl_glGetTexParameterfv;
PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexParameteriv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetTexParameteriv", (GLADapiproc) glGetTexParameteriv, 3, arg0, arg1, arg2);
    glGetTexParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexParameteriv", (GLADapiproc) glGetTexParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXPARAMETERIVPROC glad_debug_glGetTexParameteriv = glad_debug_impl_glGetTexParameteriv;
PFNGLGETTEXTUREIMAGEPROC glad_glGetTextureImage = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTextureImage(GLuint arg0, GLint arg1, GLenum arg2, GLenum arg3, GLsizei arg4, void * arg5) {
    _pre_call_gl_callback("glGetTextureImage", (GLADapiproc) glGetTextureImage, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glGetTextureImage(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glGetTextureImage", (GLADapiproc) glGetTextureImage, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLGETTEXTUREIMAGEPROC glad_debug_glGetTextureImage = glad_debug_impl_glGetTextureImage;
PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_glGetTextureLevelParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTextureLevelParameterfv(GLuint arg0, GLint arg1, GLenum arg2, GLfloat * arg3) {
    _pre_call_gl_callback("glGetTextureLevelParameterfv", (GLADapiproc) glGetTextureLevelParameterfv, 4, arg0, arg1, arg2, arg3);
    glGetTextureLevelParameterfv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetTextureLevelParameterfv", (GLADapiproc) glGetTextureLevelParameterfv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_debug_glGetTextureLevelParameterfv = glad_debug_impl_glGetTextureLevelParameterfv;
PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_glGetTextureLevelParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTextureLevelParameteriv(GLuint arg0, GLint arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetTextureLevelParameteriv", (GLADapiproc) glGetTextureLevelParameteriv, 4, arg0, arg1, arg2, arg3);
    glGetTextureLevelParameteriv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetTextureLevelParameteriv", (GLADapiproc) glGetTextureLevelParameteriv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_debug_glGetTextureLevelParameteriv = glad_debug_impl_glGetTextureLevelParameteriv;
PFNGLGETTEXTUREPARAMETERIIVPROC glad_glGetTextureParameterIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTextureParameterIiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetTextureParameterIiv", (GLADapiproc) glGetTextureParameterIiv, 3, arg0, arg1, arg2);
    glGetTextureParameterIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTextureParameterIiv", (GLADapiproc) glGetTextureParameterIiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXTUREPARAMETERIIVPROC glad_debug_glGetTextureParameterIiv = glad_debug_impl_glGetTextureParameterIiv;
PFNGLGETTEXTUREPARAMETERIUIVPROC glad_glGetTextureParameterIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTextureParameterIuiv(GLuint arg0, GLenum arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetTextureParameterIuiv", (GLADapiproc) glGetTextureParameterIuiv, 3, arg0, arg1, arg2);
    glGetTextureParameterIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTextureParameterIuiv", (GLADapiproc) glGetTextureParameterIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXTUREPARAMETERIUIVPROC glad_debug_glGetTextureParameterIuiv = glad_debug_impl_glGetTextureParameterIuiv;
PFNGLGETTEXTUREPARAMETERFVPROC glad_glGetTextureParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTextureParameterfv(GLuint arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetTextureParameterfv", (GLADapiproc) glGetTextureParameterfv, 3, arg0, arg1, arg2);
    glGetTextureParameterfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTextureParameterfv", (GLADapiproc) glGetTextureParameterfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXTUREPARAMETERFVPROC glad_debug_glGetTextureParameterfv = glad_debug_impl_glGetTextureParameterfv;
PFNGLGETTEXTUREPARAMETERIVPROC glad_glGetTextureParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTextureParameteriv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetTextureParameteriv", (GLADapiproc) glGetTextureParameteriv, 3, arg0, arg1, arg2);
    glGetTextureParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTextureParameteriv", (GLADapiproc) glGetTextureParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXTUREPARAMETERIVPROC glad_debug_glGetTextureParameteriv = glad_debug_impl_glGetTextureParameteriv;
PFNGLGETTEXTURESUBIMAGEPROC glad_glGetTextureSubImage = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTextureSubImage(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLenum arg9, GLsizei arg10, void * arg11) {
    _pre_call_gl_callback("glGetTextureSubImage", (GLADapiproc) glGetTextureSubImage, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    glGetTextureSubImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    _post_call_gl_callback(NULL, "glGetTextureSubImage", (GLADapiproc) glGetTextureSubImage, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    
}
PFNGLGETTEXTURESUBIMAGEPROC glad_debug_glGetTextureSubImage = glad_debug_impl_glGetTextureSubImage;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTransformFeedbackVarying(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei * arg3, GLsizei * arg4, GLenum * arg5, GLchar * arg6) {
    _pre_call_gl_callback("glGetTransformFeedbackVarying", (GLADapiproc) glGetTransformFeedbackVarying, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glGetTransformFeedbackVarying", (GLADapiproc) glGetTransformFeedbackVarying, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_debug_glGetTransformFeedbackVarying = glad_debug_impl_glGetTransformFeedbackVarying;
PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_glGetTransformFeedbacki64_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTransformFeedbacki64_v(GLuint arg0, GLenum arg1, GLuint arg2, GLint64 * arg3) {
    _pre_call_gl_callback("glGetTransformFeedbacki64_v", (GLADapiproc) glGetTransformFeedbacki64_v, 4, arg0, arg1, arg2, arg3);
    glGetTransformFeedbacki64_v(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetTransformFeedbacki64_v", (GLADapiproc) glGetTransformFeedbacki64_v, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_debug_glGetTransformFeedbacki64_v = glad_debug_impl_glGetTransformFeedbacki64_v;
PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_glGetTransformFeedbacki_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTransformFeedbacki_v(GLuint arg0, GLenum arg1, GLuint arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetTransformFeedbacki_v", (GLADapiproc) glGetTransformFeedbacki_v, 4, arg0, arg1, arg2, arg3);
    glGetTransformFeedbacki_v(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetTransformFeedbacki_v", (GLADapiproc) glGetTransformFeedbacki_v, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_debug_glGetTransformFeedbacki_v = glad_debug_impl_glGetTransformFeedbacki_v;
PFNGLGETTRANSFORMFEEDBACKIVPROC glad_glGetTransformFeedbackiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTransformFeedbackiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetTransformFeedbackiv", (GLADapiproc) glGetTransformFeedbackiv, 3, arg0, arg1, arg2);
    glGetTransformFeedbackiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTransformFeedbackiv", (GLADapiproc) glGetTransformFeedbackiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTRANSFORMFEEDBACKIVPROC glad_debug_glGetTransformFeedbackiv = glad_debug_impl_glGetTransformFeedbackiv;
PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glGetUniformBlockIndex(GLuint arg0, const GLchar * arg1) {
    GLuint ret;
    _pre_call_gl_callback("glGetUniformBlockIndex", (GLADapiproc) glGetUniformBlockIndex, 2, arg0, arg1);
    ret = glGetUniformBlockIndex(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetUniformBlockIndex", (GLADapiproc) glGetUniformBlockIndex, 2, arg0, arg1);
    return ret;
}
PFNGLGETUNIFORMBLOCKINDEXPROC glad_debug_glGetUniformBlockIndex = glad_debug_impl_glGetUniformBlockIndex;
PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformIndices(GLuint arg0, GLsizei arg1, const GLchar *const* arg2, GLuint * arg3) {
    _pre_call_gl_callback("glGetUniformIndices", (GLADapiproc) glGetUniformIndices, 4, arg0, arg1, arg2, arg3);
    glGetUniformIndices(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetUniformIndices", (GLADapiproc) glGetUniformIndices, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETUNIFORMINDICESPROC glad_debug_glGetUniformIndices = glad_debug_impl_glGetUniformIndices;
PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetUniformLocation(GLuint arg0, const GLchar * arg1) {
    GLint ret;
    _pre_call_gl_callback("glGetUniformLocation", (GLADapiproc) glGetUniformLocation, 2, arg0, arg1);
    ret = glGetUniformLocation(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetUniformLocation", (GLADapiproc) glGetUniformLocation, 2, arg0, arg1);
    return ret;
}
PFNGLGETUNIFORMLOCATIONPROC glad_debug_glGetUniformLocation = glad_debug_impl_glGetUniformLocation;
PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformSubroutineuiv(GLenum arg0, GLint arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetUniformSubroutineuiv", (GLADapiproc) glGetUniformSubroutineuiv, 3, arg0, arg1, arg2);
    glGetUniformSubroutineuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetUniformSubroutineuiv", (GLADapiproc) glGetUniformSubroutineuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_debug_glGetUniformSubroutineuiv = glad_debug_impl_glGetUniformSubroutineuiv;
PFNGLGETUNIFORMDVPROC glad_glGetUniformdv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformdv(GLuint arg0, GLint arg1, GLdouble * arg2) {
    _pre_call_gl_callback("glGetUniformdv", (GLADapiproc) glGetUniformdv, 3, arg0, arg1, arg2);
    glGetUniformdv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetUniformdv", (GLADapiproc) glGetUniformdv, 3, arg0, arg1, arg2);
    
}
PFNGLGETUNIFORMDVPROC glad_debug_glGetUniformdv = glad_debug_impl_glGetUniformdv;
PFNGLGETUNIFORMFVPROC glad_glGetUniformfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformfv(GLuint arg0, GLint arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetUniformfv", (GLADapiproc) glGetUniformfv, 3, arg0, arg1, arg2);
    glGetUniformfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetUniformfv", (GLADapiproc) glGetUniformfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETUNIFORMFVPROC glad_debug_glGetUniformfv = glad_debug_impl_glGetUniformfv;
PFNGLGETUNIFORMIVPROC glad_glGetUniformiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformiv(GLuint arg0, GLint arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetUniformiv", (GLADapiproc) glGetUniformiv, 3, arg0, arg1, arg2);
    glGetUniformiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetUniformiv", (GLADapiproc) glGetUniformiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETUNIFORMIVPROC glad_debug_glGetUniformiv = glad_debug_impl_glGetUniformiv;
PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformuiv(GLuint arg0, GLint arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetUniformuiv", (GLADapiproc) glGetUniformuiv, 3, arg0, arg1, arg2);
    glGetUniformuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetUniformuiv", (GLADapiproc) glGetUniformuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETUNIFORMUIVPROC glad_debug_glGetUniformuiv = glad_debug_impl_glGetUniformuiv;
PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_glGetVertexArrayIndexed64iv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexArrayIndexed64iv(GLuint arg0, GLuint arg1, GLenum arg2, GLint64 * arg3) {
    _pre_call_gl_callback("glGetVertexArrayIndexed64iv", (GLADapiproc) glGetVertexArrayIndexed64iv, 4, arg0, arg1, arg2, arg3);
    glGetVertexArrayIndexed64iv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetVertexArrayIndexed64iv", (GLADapiproc) glGetVertexArrayIndexed64iv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_debug_glGetVertexArrayIndexed64iv = glad_debug_impl_glGetVertexArrayIndexed64iv;
PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_glGetVertexArrayIndexediv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexArrayIndexediv(GLuint arg0, GLuint arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetVertexArrayIndexediv", (GLADapiproc) glGetVertexArrayIndexediv, 4, arg0, arg1, arg2, arg3);
    glGetVertexArrayIndexediv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetVertexArrayIndexediv", (GLADapiproc) glGetVertexArrayIndexediv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_debug_glGetVertexArrayIndexediv = glad_debug_impl_glGetVertexArrayIndexediv;
PFNGLGETVERTEXARRAYIVPROC glad_glGetVertexArrayiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexArrayiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetVertexArrayiv", (GLADapiproc) glGetVertexArrayiv, 3, arg0, arg1, arg2);
    glGetVertexArrayiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexArrayiv", (GLADapiproc) glGetVertexArrayiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXARRAYIVPROC glad_debug_glGetVertexArrayiv = glad_debug_impl_glGetVertexArrayiv;
PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribIiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetVertexAttribIiv", (GLADapiproc) glGetVertexAttribIiv, 3, arg0, arg1, arg2);
    glGetVertexAttribIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribIiv", (GLADapiproc) glGetVertexAttribIiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBIIVPROC glad_debug_glGetVertexAttribIiv = glad_debug_impl_glGetVertexAttribIiv;
PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribIuiv(GLuint arg0, GLenum arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetVertexAttribIuiv", (GLADapiproc) glGetVertexAttribIuiv, 3, arg0, arg1, arg2);
    glGetVertexAttribIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribIuiv", (GLADapiproc) glGetVertexAttribIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBIUIVPROC glad_debug_glGetVertexAttribIuiv = glad_debug_impl_glGetVertexAttribIuiv;
PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribLdv(GLuint arg0, GLenum arg1, GLdouble * arg2) {
    _pre_call_gl_callback("glGetVertexAttribLdv", (GLADapiproc) glGetVertexAttribLdv, 3, arg0, arg1, arg2);
    glGetVertexAttribLdv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribLdv", (GLADapiproc) glGetVertexAttribLdv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBLDVPROC glad_debug_glGetVertexAttribLdv = glad_debug_impl_glGetVertexAttribLdv;
PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribPointerv(GLuint arg0, GLenum arg1, void ** arg2) {
    _pre_call_gl_callback("glGetVertexAttribPointerv", (GLADapiproc) glGetVertexAttribPointerv, 3, arg0, arg1, arg2);
    glGetVertexAttribPointerv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribPointerv", (GLADapiproc) glGetVertexAttribPointerv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBPOINTERVPROC glad_debug_glGetVertexAttribPointerv = glad_debug_impl_glGetVertexAttribPointerv;
PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribdv(GLuint arg0, GLenum arg1, GLdouble * arg2) {
    _pre_call_gl_callback("glGetVertexAttribdv", (GLADapiproc) glGetVertexAttribdv, 3, arg0, arg1, arg2);
    glGetVertexAttribdv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribdv", (GLADapiproc) glGetVertexAttribdv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBDVPROC glad_debug_glGetVertexAttribdv = glad_debug_impl_glGetVertexAttribdv;
PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribfv(GLuint arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetVertexAttribfv", (GLADapiproc) glGetVertexAttribfv, 3, arg0, arg1, arg2);
    glGetVertexAttribfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribfv", (GLADapiproc) glGetVertexAttribfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBFVPROC glad_debug_glGetVertexAttribfv = glad_debug_impl_glGetVertexAttribfv;
PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetVertexAttribiv", (GLADapiproc) glGetVertexAttribiv, 3, arg0, arg1, arg2);
    glGetVertexAttribiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribiv", (GLADapiproc) glGetVertexAttribiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBIVPROC glad_debug_glGetVertexAttribiv = glad_debug_impl_glGetVertexAttribiv;
PFNGLGETNCOLORTABLEPROC glad_glGetnColorTable = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnColorTable(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, void * arg4) {
    _pre_call_gl_callback("glGetnColorTable", (GLADapiproc) glGetnColorTable, 5, arg0, arg1, arg2, arg3, arg4);
    glGetnColorTable(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetnColorTable", (GLADapiproc) glGetnColorTable, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETNCOLORTABLEPROC glad_debug_glGetnColorTable = glad_debug_impl_glGetnColorTable;
PFNGLGETNCOMPRESSEDTEXIMAGEPROC glad_glGetnCompressedTexImage = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnCompressedTexImage(GLenum arg0, GLint arg1, GLsizei arg2, void * arg3) {
    _pre_call_gl_callback("glGetnCompressedTexImage", (GLADapiproc) glGetnCompressedTexImage, 4, arg0, arg1, arg2, arg3);
    glGetnCompressedTexImage(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnCompressedTexImage", (GLADapiproc) glGetnCompressedTexImage, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNCOMPRESSEDTEXIMAGEPROC glad_debug_glGetnCompressedTexImage = glad_debug_impl_glGetnCompressedTexImage;
PFNGLGETNCONVOLUTIONFILTERPROC glad_glGetnConvolutionFilter = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnConvolutionFilter(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, void * arg4) {
    _pre_call_gl_callback("glGetnConvolutionFilter", (GLADapiproc) glGetnConvolutionFilter, 5, arg0, arg1, arg2, arg3, arg4);
    glGetnConvolutionFilter(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetnConvolutionFilter", (GLADapiproc) glGetnConvolutionFilter, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETNCONVOLUTIONFILTERPROC glad_debug_glGetnConvolutionFilter = glad_debug_impl_glGetnConvolutionFilter;
PFNGLGETNHISTOGRAMPROC glad_glGetnHistogram = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnHistogram(GLenum arg0, GLboolean arg1, GLenum arg2, GLenum arg3, GLsizei arg4, void * arg5) {
    _pre_call_gl_callback("glGetnHistogram", (GLADapiproc) glGetnHistogram, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glGetnHistogram(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glGetnHistogram", (GLADapiproc) glGetnHistogram, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLGETNHISTOGRAMPROC glad_debug_glGetnHistogram = glad_debug_impl_glGetnHistogram;
PFNGLGETNMAPDVPROC glad_glGetnMapdv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnMapdv(GLenum arg0, GLenum arg1, GLsizei arg2, GLdouble * arg3) {
    _pre_call_gl_callback("glGetnMapdv", (GLADapiproc) glGetnMapdv, 4, arg0, arg1, arg2, arg3);
    glGetnMapdv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnMapdv", (GLADapiproc) glGetnMapdv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNMAPDVPROC glad_debug_glGetnMapdv = glad_debug_impl_glGetnMapdv;
PFNGLGETNMAPFVPROC glad_glGetnMapfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnMapfv(GLenum arg0, GLenum arg1, GLsizei arg2, GLfloat * arg3) {
    _pre_call_gl_callback("glGetnMapfv", (GLADapiproc) glGetnMapfv, 4, arg0, arg1, arg2, arg3);
    glGetnMapfv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnMapfv", (GLADapiproc) glGetnMapfv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNMAPFVPROC glad_debug_glGetnMapfv = glad_debug_impl_glGetnMapfv;
PFNGLGETNMAPIVPROC glad_glGetnMapiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnMapiv(GLenum arg0, GLenum arg1, GLsizei arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetnMapiv", (GLADapiproc) glGetnMapiv, 4, arg0, arg1, arg2, arg3);
    glGetnMapiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnMapiv", (GLADapiproc) glGetnMapiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNMAPIVPROC glad_debug_glGetnMapiv = glad_debug_impl_glGetnMapiv;
PFNGLGETNMINMAXPROC glad_glGetnMinmax = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnMinmax(GLenum arg0, GLboolean arg1, GLenum arg2, GLenum arg3, GLsizei arg4, void * arg5) {
    _pre_call_gl_callback("glGetnMinmax", (GLADapiproc) glGetnMinmax, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glGetnMinmax(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glGetnMinmax", (GLADapiproc) glGetnMinmax, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLGETNMINMAXPROC glad_debug_glGetnMinmax = glad_debug_impl_glGetnMinmax;
PFNGLGETNPIXELMAPFVPROC glad_glGetnPixelMapfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnPixelMapfv(GLenum arg0, GLsizei arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetnPixelMapfv", (GLADapiproc) glGetnPixelMapfv, 3, arg0, arg1, arg2);
    glGetnPixelMapfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetnPixelMapfv", (GLADapiproc) glGetnPixelMapfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETNPIXELMAPFVPROC glad_debug_glGetnPixelMapfv = glad_debug_impl_glGetnPixelMapfv;
PFNGLGETNPIXELMAPUIVPROC glad_glGetnPixelMapuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnPixelMapuiv(GLenum arg0, GLsizei arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetnPixelMapuiv", (GLADapiproc) glGetnPixelMapuiv, 3, arg0, arg1, arg2);
    glGetnPixelMapuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetnPixelMapuiv", (GLADapiproc) glGetnPixelMapuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETNPIXELMAPUIVPROC glad_debug_glGetnPixelMapuiv = glad_debug_impl_glGetnPixelMapuiv;
PFNGLGETNPIXELMAPUSVPROC glad_glGetnPixelMapusv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnPixelMapusv(GLenum arg0, GLsizei arg1, GLushort * arg2) {
    _pre_call_gl_callback("glGetnPixelMapusv", (GLADapiproc) glGetnPixelMapusv, 3, arg0, arg1, arg2);
    glGetnPixelMapusv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetnPixelMapusv", (GLADapiproc) glGetnPixelMapusv, 3, arg0, arg1, arg2);
    
}
PFNGLGETNPIXELMAPUSVPROC glad_debug_glGetnPixelMapusv = glad_debug_impl_glGetnPixelMapusv;
PFNGLGETNPOLYGONSTIPPLEPROC glad_glGetnPolygonStipple = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnPolygonStipple(GLsizei arg0, GLubyte * arg1) {
    _pre_call_gl_callback("glGetnPolygonStipple", (GLADapiproc) glGetnPolygonStipple, 2, arg0, arg1);
    glGetnPolygonStipple(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetnPolygonStipple", (GLADapiproc) glGetnPolygonStipple, 2, arg0, arg1);
    
}
PFNGLGETNPOLYGONSTIPPLEPROC glad_debug_glGetnPolygonStipple = glad_debug_impl_glGetnPolygonStipple;
PFNGLGETNSEPARABLEFILTERPROC glad_glGetnSeparableFilter = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnSeparableFilter(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, void * arg4, GLsizei arg5, void * arg6, void * arg7) {
    _pre_call_gl_callback("glGetnSeparableFilter", (GLADapiproc) glGetnSeparableFilter, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glGetnSeparableFilter(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glGetnSeparableFilter", (GLADapiproc) glGetnSeparableFilter, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLGETNSEPARABLEFILTERPROC glad_debug_glGetnSeparableFilter = glad_debug_impl_glGetnSeparableFilter;
PFNGLGETNTEXIMAGEPROC glad_glGetnTexImage = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnTexImage(GLenum arg0, GLint arg1, GLenum arg2, GLenum arg3, GLsizei arg4, void * arg5) {
    _pre_call_gl_callback("glGetnTexImage", (GLADapiproc) glGetnTexImage, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glGetnTexImage(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glGetnTexImage", (GLADapiproc) glGetnTexImage, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLGETNTEXIMAGEPROC glad_debug_glGetnTexImage = glad_debug_impl_glGetnTexImage;
PFNGLGETNUNIFORMDVPROC glad_glGetnUniformdv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnUniformdv(GLuint arg0, GLint arg1, GLsizei arg2, GLdouble * arg3) {
    _pre_call_gl_callback("glGetnUniformdv", (GLADapiproc) glGetnUniformdv, 4, arg0, arg1, arg2, arg3);
    glGetnUniformdv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnUniformdv", (GLADapiproc) glGetnUniformdv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNUNIFORMDVPROC glad_debug_glGetnUniformdv = glad_debug_impl_glGetnUniformdv;
PFNGLGETNUNIFORMFVPROC glad_glGetnUniformfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnUniformfv(GLuint arg0, GLint arg1, GLsizei arg2, GLfloat * arg3) {
    _pre_call_gl_callback("glGetnUniformfv", (GLADapiproc) glGetnUniformfv, 4, arg0, arg1, arg2, arg3);
    glGetnUniformfv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnUniformfv", (GLADapiproc) glGetnUniformfv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNUNIFORMFVPROC glad_debug_glGetnUniformfv = glad_debug_impl_glGetnUniformfv;
PFNGLGETNUNIFORMIVPROC glad_glGetnUniformiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnUniformiv(GLuint arg0, GLint arg1, GLsizei arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetnUniformiv", (GLADapiproc) glGetnUniformiv, 4, arg0, arg1, arg2, arg3);
    glGetnUniformiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnUniformiv", (GLADapiproc) glGetnUniformiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNUNIFORMIVPROC glad_debug_glGetnUniformiv = glad_debug_impl_glGetnUniformiv;
PFNGLGETNUNIFORMUIVPROC glad_glGetnUniformuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnUniformuiv(GLuint arg0, GLint arg1, GLsizei arg2, GLuint * arg3) {
    _pre_call_gl_callback("glGetnUniformuiv", (GLADapiproc) glGetnUniformuiv, 4, arg0, arg1, arg2, arg3);
    glGetnUniformuiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnUniformuiv", (GLADapiproc) glGetnUniformuiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNUNIFORMUIVPROC glad_debug_glGetnUniformuiv = glad_debug_impl_glGetnUniformuiv;
PFNGLHINTPROC glad_glHint = NULL;
void GLAD_API_PTR glad_debug_impl_glHint(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glHint", (GLADapiproc) glHint, 2, arg0, arg1);
    glHint(arg0, arg1);
    _post_call_gl_callback(NULL, "glHint", (GLADapiproc) glHint, 2, arg0, arg1);
    
}
PFNGLHINTPROC glad_debug_glHint = glad_debug_impl_glHint;
PFNGLINDEXMASKPROC glad_glIndexMask = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexMask(GLuint arg0) {
    _pre_call_gl_callback("glIndexMask", (GLADapiproc) glIndexMask, 1, arg0);
    glIndexMask(arg0);
    _post_call_gl_callback(NULL, "glIndexMask", (GLADapiproc) glIndexMask, 1, arg0);
    
}
PFNGLINDEXMASKPROC glad_debug_glIndexMask = glad_debug_impl_glIndexMask;
PFNGLINDEXPOINTERPROC glad_glIndexPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexPointer(GLenum arg0, GLsizei arg1, const void * arg2) {
    _pre_call_gl_callback("glIndexPointer", (GLADapiproc) glIndexPointer, 3, arg0, arg1, arg2);
    glIndexPointer(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glIndexPointer", (GLADapiproc) glIndexPointer, 3, arg0, arg1, arg2);
    
}
PFNGLINDEXPOINTERPROC glad_debug_glIndexPointer = glad_debug_impl_glIndexPointer;
PFNGLINDEXDPROC glad_glIndexd = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexd(GLdouble arg0) {
    _pre_call_gl_callback("glIndexd", (GLADapiproc) glIndexd, 1, arg0);
    glIndexd(arg0);
    _post_call_gl_callback(NULL, "glIndexd", (GLADapiproc) glIndexd, 1, arg0);
    
}
PFNGLINDEXDPROC glad_debug_glIndexd = glad_debug_impl_glIndexd;
PFNGLINDEXDVPROC glad_glIndexdv = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexdv(const GLdouble * arg0) {
    _pre_call_gl_callback("glIndexdv", (GLADapiproc) glIndexdv, 1, arg0);
    glIndexdv(arg0);
    _post_call_gl_callback(NULL, "glIndexdv", (GLADapiproc) glIndexdv, 1, arg0);
    
}
PFNGLINDEXDVPROC glad_debug_glIndexdv = glad_debug_impl_glIndexdv;
PFNGLINDEXFPROC glad_glIndexf = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexf(GLfloat arg0) {
    _pre_call_gl_callback("glIndexf", (GLADapiproc) glIndexf, 1, arg0);
    glIndexf(arg0);
    _post_call_gl_callback(NULL, "glIndexf", (GLADapiproc) glIndexf, 1, arg0);
    
}
PFNGLINDEXFPROC glad_debug_glIndexf = glad_debug_impl_glIndexf;
PFNGLINDEXFVPROC glad_glIndexfv = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexfv(const GLfloat * arg0) {
    _pre_call_gl_callback("glIndexfv", (GLADapiproc) glIndexfv, 1, arg0);
    glIndexfv(arg0);
    _post_call_gl_callback(NULL, "glIndexfv", (GLADapiproc) glIndexfv, 1, arg0);
    
}
PFNGLINDEXFVPROC glad_debug_glIndexfv = glad_debug_impl_glIndexfv;
PFNGLINDEXIPROC glad_glIndexi = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexi(GLint arg0) {
    _pre_call_gl_callback("glIndexi", (GLADapiproc) glIndexi, 1, arg0);
    glIndexi(arg0);
    _post_call_gl_callback(NULL, "glIndexi", (GLADapiproc) glIndexi, 1, arg0);
    
}
PFNGLINDEXIPROC glad_debug_glIndexi = glad_debug_impl_glIndexi;
PFNGLINDEXIVPROC glad_glIndexiv = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexiv(const GLint * arg0) {
    _pre_call_gl_callback("glIndexiv", (GLADapiproc) glIndexiv, 1, arg0);
    glIndexiv(arg0);
    _post_call_gl_callback(NULL, "glIndexiv", (GLADapiproc) glIndexiv, 1, arg0);
    
}
PFNGLINDEXIVPROC glad_debug_glIndexiv = glad_debug_impl_glIndexiv;
PFNGLINDEXSPROC glad_glIndexs = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexs(GLshort arg0) {
    _pre_call_gl_callback("glIndexs", (GLADapiproc) glIndexs, 1, arg0);
    glIndexs(arg0);
    _post_call_gl_callback(NULL, "glIndexs", (GLADapiproc) glIndexs, 1, arg0);
    
}
PFNGLINDEXSPROC glad_debug_glIndexs = glad_debug_impl_glIndexs;
PFNGLINDEXSVPROC glad_glIndexsv = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexsv(const GLshort * arg0) {
    _pre_call_gl_callback("glIndexsv", (GLADapiproc) glIndexsv, 1, arg0);
    glIndexsv(arg0);
    _post_call_gl_callback(NULL, "glIndexsv", (GLADapiproc) glIndexsv, 1, arg0);
    
}
PFNGLINDEXSVPROC glad_debug_glIndexsv = glad_debug_impl_glIndexsv;
PFNGLINDEXUBPROC glad_glIndexub = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexub(GLubyte arg0) {
    _pre_call_gl_callback("glIndexub", (GLADapiproc) glIndexub, 1, arg0);
    glIndexub(arg0);
    _post_call_gl_callback(NULL, "glIndexub", (GLADapiproc) glIndexub, 1, arg0);
    
}
PFNGLINDEXUBPROC glad_debug_glIndexub = glad_debug_impl_glIndexub;
PFNGLINDEXUBVPROC glad_glIndexubv = NULL;
void GLAD_API_PTR glad_debug_impl_glIndexubv(const GLubyte * arg0) {
    _pre_call_gl_callback("glIndexubv", (GLADapiproc) glIndexubv, 1, arg0);
    glIndexubv(arg0);
    _post_call_gl_callback(NULL, "glIndexubv", (GLADapiproc) glIndexubv, 1, arg0);
    
}
PFNGLINDEXUBVPROC glad_debug_glIndexubv = glad_debug_impl_glIndexubv;
PFNGLINITNAMESPROC glad_glInitNames = NULL;
void GLAD_API_PTR glad_debug_impl_glInitNames(void) {
    _pre_call_gl_callback("glInitNames", (GLADapiproc) glInitNames, 0);
    glInitNames();
    _post_call_gl_callback(NULL, "glInitNames", (GLADapiproc) glInitNames, 0);
    
}
PFNGLINITNAMESPROC glad_debug_glInitNames = glad_debug_impl_glInitNames;
PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays = NULL;
void GLAD_API_PTR glad_debug_impl_glInterleavedArrays(GLenum arg0, GLsizei arg1, const void * arg2) {
    _pre_call_gl_callback("glInterleavedArrays", (GLADapiproc) glInterleavedArrays, 3, arg0, arg1, arg2);
    glInterleavedArrays(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glInterleavedArrays", (GLADapiproc) glInterleavedArrays, 3, arg0, arg1, arg2);
    
}
PFNGLINTERLEAVEDARRAYSPROC glad_debug_glInterleavedArrays = glad_debug_impl_glInterleavedArrays;
PFNGLINVALIDATEBUFFERDATAPROC glad_glInvalidateBufferData = NULL;
void GLAD_API_PTR glad_debug_impl_glInvalidateBufferData(GLuint arg0) {
    _pre_call_gl_callback("glInvalidateBufferData", (GLADapiproc) glInvalidateBufferData, 1, arg0);
    glInvalidateBufferData(arg0);
    _post_call_gl_callback(NULL, "glInvalidateBufferData", (GLADapiproc) glInvalidateBufferData, 1, arg0);
    
}
PFNGLINVALIDATEBUFFERDATAPROC glad_debug_glInvalidateBufferData = glad_debug_impl_glInvalidateBufferData;
PFNGLINVALIDATEBUFFERSUBDATAPROC glad_glInvalidateBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glInvalidateBufferSubData(GLuint arg0, GLintptr arg1, GLsizeiptr arg2) {
    _pre_call_gl_callback("glInvalidateBufferSubData", (GLADapiproc) glInvalidateBufferSubData, 3, arg0, arg1, arg2);
    glInvalidateBufferSubData(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glInvalidateBufferSubData", (GLADapiproc) glInvalidateBufferSubData, 3, arg0, arg1, arg2);
    
}
PFNGLINVALIDATEBUFFERSUBDATAPROC glad_debug_glInvalidateBufferSubData = glad_debug_impl_glInvalidateBufferSubData;
PFNGLINVALIDATEFRAMEBUFFERPROC glad_glInvalidateFramebuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glInvalidateFramebuffer(GLenum arg0, GLsizei arg1, const GLenum * arg2) {
    _pre_call_gl_callback("glInvalidateFramebuffer", (GLADapiproc) glInvalidateFramebuffer, 3, arg0, arg1, arg2);
    glInvalidateFramebuffer(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glInvalidateFramebuffer", (GLADapiproc) glInvalidateFramebuffer, 3, arg0, arg1, arg2);
    
}
PFNGLINVALIDATEFRAMEBUFFERPROC glad_debug_glInvalidateFramebuffer = glad_debug_impl_glInvalidateFramebuffer;
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_glInvalidateNamedFramebufferData = NULL;
void GLAD_API_PTR glad_debug_impl_glInvalidateNamedFramebufferData(GLuint arg0, GLsizei arg1, const GLenum * arg2) {
    _pre_call_gl_callback("glInvalidateNamedFramebufferData", (GLADapiproc) glInvalidateNamedFramebufferData, 3, arg0, arg1, arg2);
    glInvalidateNamedFramebufferData(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glInvalidateNamedFramebufferData", (GLADapiproc) glInvalidateNamedFramebufferData, 3, arg0, arg1, arg2);
    
}
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_debug_glInvalidateNamedFramebufferData = glad_debug_impl_glInvalidateNamedFramebufferData;
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_glInvalidateNamedFramebufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glInvalidateNamedFramebufferSubData(GLuint arg0, GLsizei arg1, const GLenum * arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6) {
    _pre_call_gl_callback("glInvalidateNamedFramebufferSubData", (GLADapiproc) glInvalidateNamedFramebufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glInvalidateNamedFramebufferSubData(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glInvalidateNamedFramebufferSubData", (GLADapiproc) glInvalidateNamedFramebufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_debug_glInvalidateNamedFramebufferSubData = glad_debug_impl_glInvalidateNamedFramebufferSubData;
PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_glInvalidateSubFramebuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glInvalidateSubFramebuffer(GLenum arg0, GLsizei arg1, const GLenum * arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6) {
    _pre_call_gl_callback("glInvalidateSubFramebuffer", (GLADapiproc) glInvalidateSubFramebuffer, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glInvalidateSubFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glInvalidateSubFramebuffer", (GLADapiproc) glInvalidateSubFramebuffer, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_debug_glInvalidateSubFramebuffer = glad_debug_impl_glInvalidateSubFramebuffer;
PFNGLINVALIDATETEXIMAGEPROC glad_glInvalidateTexImage = NULL;
void GLAD_API_PTR glad_debug_impl_glInvalidateTexImage(GLuint arg0, GLint arg1) {
    _pre_call_gl_callback("glInvalidateTexImage", (GLADapiproc) glInvalidateTexImage, 2, arg0, arg1);
    glInvalidateTexImage(arg0, arg1);
    _post_call_gl_callback(NULL, "glInvalidateTexImage", (GLADapiproc) glInvalidateTexImage, 2, arg0, arg1);
    
}
PFNGLINVALIDATETEXIMAGEPROC glad_debug_glInvalidateTexImage = glad_debug_impl_glInvalidateTexImage;
PFNGLINVALIDATETEXSUBIMAGEPROC glad_glInvalidateTexSubImage = NULL;
void GLAD_API_PTR glad_debug_impl_glInvalidateTexSubImage(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7) {
    _pre_call_gl_callback("glInvalidateTexSubImage", (GLADapiproc) glInvalidateTexSubImage, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glInvalidateTexSubImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glInvalidateTexSubImage", (GLADapiproc) glInvalidateTexSubImage, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLINVALIDATETEXSUBIMAGEPROC glad_debug_glInvalidateTexSubImage = glad_debug_impl_glInvalidateTexSubImage;
PFNGLISBUFFERPROC glad_glIsBuffer = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsBuffer(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsBuffer", (GLADapiproc) glIsBuffer, 1, arg0);
    ret = glIsBuffer(arg0);
    _post_call_gl_callback((void*) &ret, "glIsBuffer", (GLADapiproc) glIsBuffer, 1, arg0);
    return ret;
}
PFNGLISBUFFERPROC glad_debug_glIsBuffer = glad_debug_impl_glIsBuffer;
PFNGLISENABLEDPROC glad_glIsEnabled = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsEnabled(GLenum arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsEnabled", (GLADapiproc) glIsEnabled, 1, arg0);
    ret = glIsEnabled(arg0);
    _post_call_gl_callback((void*) &ret, "glIsEnabled", (GLADapiproc) glIsEnabled, 1, arg0);
    return ret;
}
PFNGLISENABLEDPROC glad_debug_glIsEnabled = glad_debug_impl_glIsEnabled;
PFNGLISENABLEDIPROC glad_glIsEnabledi = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsEnabledi(GLenum arg0, GLuint arg1) {
    GLboolean ret;
    _pre_call_gl_callback("glIsEnabledi", (GLADapiproc) glIsEnabledi, 2, arg0, arg1);
    ret = glIsEnabledi(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glIsEnabledi", (GLADapiproc) glIsEnabledi, 2, arg0, arg1);
    return ret;
}
PFNGLISENABLEDIPROC glad_debug_glIsEnabledi = glad_debug_impl_glIsEnabledi;
PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsFramebuffer(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsFramebuffer", (GLADapiproc) glIsFramebuffer, 1, arg0);
    ret = glIsFramebuffer(arg0);
    _post_call_gl_callback((void*) &ret, "glIsFramebuffer", (GLADapiproc) glIsFramebuffer, 1, arg0);
    return ret;
}
PFNGLISFRAMEBUFFERPROC glad_debug_glIsFramebuffer = glad_debug_impl_glIsFramebuffer;
PFNGLISLISTPROC glad_glIsList = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsList(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsList", (GLADapiproc) glIsList, 1, arg0);
    ret = glIsList(arg0);
    _post_call_gl_callback((void*) &ret, "glIsList", (GLADapiproc) glIsList, 1, arg0);
    return ret;
}
PFNGLISLISTPROC glad_debug_glIsList = glad_debug_impl_glIsList;
PFNGLISPROGRAMPROC glad_glIsProgram = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsProgram(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsProgram", (GLADapiproc) glIsProgram, 1, arg0);
    ret = glIsProgram(arg0);
    _post_call_gl_callback((void*) &ret, "glIsProgram", (GLADapiproc) glIsProgram, 1, arg0);
    return ret;
}
PFNGLISPROGRAMPROC glad_debug_glIsProgram = glad_debug_impl_glIsProgram;
PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsProgramPipeline(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsProgramPipeline", (GLADapiproc) glIsProgramPipeline, 1, arg0);
    ret = glIsProgramPipeline(arg0);
    _post_call_gl_callback((void*) &ret, "glIsProgramPipeline", (GLADapiproc) glIsProgramPipeline, 1, arg0);
    return ret;
}
PFNGLISPROGRAMPIPELINEPROC glad_debug_glIsProgramPipeline = glad_debug_impl_glIsProgramPipeline;
PFNGLISQUERYPROC glad_glIsQuery = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsQuery(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsQuery", (GLADapiproc) glIsQuery, 1, arg0);
    ret = glIsQuery(arg0);
    _post_call_gl_callback((void*) &ret, "glIsQuery", (GLADapiproc) glIsQuery, 1, arg0);
    return ret;
}
PFNGLISQUERYPROC glad_debug_glIsQuery = glad_debug_impl_glIsQuery;
PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsRenderbuffer(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsRenderbuffer", (GLADapiproc) glIsRenderbuffer, 1, arg0);
    ret = glIsRenderbuffer(arg0);
    _post_call_gl_callback((void*) &ret, "glIsRenderbuffer", (GLADapiproc) glIsRenderbuffer, 1, arg0);
    return ret;
}
PFNGLISRENDERBUFFERPROC glad_debug_glIsRenderbuffer = glad_debug_impl_glIsRenderbuffer;
PFNGLISSAMPLERPROC glad_glIsSampler = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsSampler(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsSampler", (GLADapiproc) glIsSampler, 1, arg0);
    ret = glIsSampler(arg0);
    _post_call_gl_callback((void*) &ret, "glIsSampler", (GLADapiproc) glIsSampler, 1, arg0);
    return ret;
}
PFNGLISSAMPLERPROC glad_debug_glIsSampler = glad_debug_impl_glIsSampler;
PFNGLISSHADERPROC glad_glIsShader = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsShader(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsShader", (GLADapiproc) glIsShader, 1, arg0);
    ret = glIsShader(arg0);
    _post_call_gl_callback((void*) &ret, "glIsShader", (GLADapiproc) glIsShader, 1, arg0);
    return ret;
}
PFNGLISSHADERPROC glad_debug_glIsShader = glad_debug_impl_glIsShader;
PFNGLISSYNCPROC glad_glIsSync = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsSync(GLsync arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsSync", (GLADapiproc) glIsSync, 1, arg0);
    ret = glIsSync(arg0);
    _post_call_gl_callback((void*) &ret, "glIsSync", (GLADapiproc) glIsSync, 1, arg0);
    return ret;
}
PFNGLISSYNCPROC glad_debug_glIsSync = glad_debug_impl_glIsSync;
PFNGLISTEXTUREPROC glad_glIsTexture = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsTexture(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsTexture", (GLADapiproc) glIsTexture, 1, arg0);
    ret = glIsTexture(arg0);
    _post_call_gl_callback((void*) &ret, "glIsTexture", (GLADapiproc) glIsTexture, 1, arg0);
    return ret;
}
PFNGLISTEXTUREPROC glad_debug_glIsTexture = glad_debug_impl_glIsTexture;
PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsTransformFeedback(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsTransformFeedback", (GLADapiproc) glIsTransformFeedback, 1, arg0);
    ret = glIsTransformFeedback(arg0);
    _post_call_gl_callback((void*) &ret, "glIsTransformFeedback", (GLADapiproc) glIsTransformFeedback, 1, arg0);
    return ret;
}
PFNGLISTRANSFORMFEEDBACKPROC glad_debug_glIsTransformFeedback = glad_debug_impl_glIsTransformFeedback;
PFNGLISVERTEXARRAYPROC glad_glIsVertexArray = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsVertexArray(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsVertexArray", (GLADapiproc) glIsVertexArray, 1, arg0);
    ret = glIsVertexArray(arg0);
    _post_call_gl_callback((void*) &ret, "glIsVertexArray", (GLADapiproc) glIsVertexArray, 1, arg0);
    return ret;
}
PFNGLISVERTEXARRAYPROC glad_debug_glIsVertexArray = glad_debug_impl_glIsVertexArray;
PFNGLLIGHTMODELFPROC glad_glLightModelf = NULL;
void GLAD_API_PTR glad_debug_impl_glLightModelf(GLenum arg0, GLfloat arg1) {
    _pre_call_gl_callback("glLightModelf", (GLADapiproc) glLightModelf, 2, arg0, arg1);
    glLightModelf(arg0, arg1);
    _post_call_gl_callback(NULL, "glLightModelf", (GLADapiproc) glLightModelf, 2, arg0, arg1);
    
}
PFNGLLIGHTMODELFPROC glad_debug_glLightModelf = glad_debug_impl_glLightModelf;
PFNGLLIGHTMODELFVPROC glad_glLightModelfv = NULL;
void GLAD_API_PTR glad_debug_impl_glLightModelfv(GLenum arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glLightModelfv", (GLADapiproc) glLightModelfv, 2, arg0, arg1);
    glLightModelfv(arg0, arg1);
    _post_call_gl_callback(NULL, "glLightModelfv", (GLADapiproc) glLightModelfv, 2, arg0, arg1);
    
}
PFNGLLIGHTMODELFVPROC glad_debug_glLightModelfv = glad_debug_impl_glLightModelfv;
PFNGLLIGHTMODELIPROC glad_glLightModeli = NULL;
void GLAD_API_PTR glad_debug_impl_glLightModeli(GLenum arg0, GLint arg1) {
    _pre_call_gl_callback("glLightModeli", (GLADapiproc) glLightModeli, 2, arg0, arg1);
    glLightModeli(arg0, arg1);
    _post_call_gl_callback(NULL, "glLightModeli", (GLADapiproc) glLightModeli, 2, arg0, arg1);
    
}
PFNGLLIGHTMODELIPROC glad_debug_glLightModeli = glad_debug_impl_glLightModeli;
PFNGLLIGHTMODELIVPROC glad_glLightModeliv = NULL;
void GLAD_API_PTR glad_debug_impl_glLightModeliv(GLenum arg0, const GLint * arg1) {
    _pre_call_gl_callback("glLightModeliv", (GLADapiproc) glLightModeliv, 2, arg0, arg1);
    glLightModeliv(arg0, arg1);
    _post_call_gl_callback(NULL, "glLightModeliv", (GLADapiproc) glLightModeliv, 2, arg0, arg1);
    
}
PFNGLLIGHTMODELIVPROC glad_debug_glLightModeliv = glad_debug_impl_glLightModeliv;
PFNGLLIGHTFPROC glad_glLightf = NULL;
void GLAD_API_PTR glad_debug_impl_glLightf(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_gl_callback("glLightf", (GLADapiproc) glLightf, 3, arg0, arg1, arg2);
    glLightf(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glLightf", (GLADapiproc) glLightf, 3, arg0, arg1, arg2);
    
}
PFNGLLIGHTFPROC glad_debug_glLightf = glad_debug_impl_glLightf;
PFNGLLIGHTFVPROC glad_glLightfv = NULL;
void GLAD_API_PTR glad_debug_impl_glLightfv(GLenum arg0, GLenum arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glLightfv", (GLADapiproc) glLightfv, 3, arg0, arg1, arg2);
    glLightfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glLightfv", (GLADapiproc) glLightfv, 3, arg0, arg1, arg2);
    
}
PFNGLLIGHTFVPROC glad_debug_glLightfv = glad_debug_impl_glLightfv;
PFNGLLIGHTIPROC glad_glLighti = NULL;
void GLAD_API_PTR glad_debug_impl_glLighti(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glLighti", (GLADapiproc) glLighti, 3, arg0, arg1, arg2);
    glLighti(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glLighti", (GLADapiproc) glLighti, 3, arg0, arg1, arg2);
    
}
PFNGLLIGHTIPROC glad_debug_glLighti = glad_debug_impl_glLighti;
PFNGLLIGHTIVPROC glad_glLightiv = NULL;
void GLAD_API_PTR glad_debug_impl_glLightiv(GLenum arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glLightiv", (GLADapiproc) glLightiv, 3, arg0, arg1, arg2);
    glLightiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glLightiv", (GLADapiproc) glLightiv, 3, arg0, arg1, arg2);
    
}
PFNGLLIGHTIVPROC glad_debug_glLightiv = glad_debug_impl_glLightiv;
PFNGLLINESTIPPLEPROC glad_glLineStipple = NULL;
void GLAD_API_PTR glad_debug_impl_glLineStipple(GLint arg0, GLushort arg1) {
    _pre_call_gl_callback("glLineStipple", (GLADapiproc) glLineStipple, 2, arg0, arg1);
    glLineStipple(arg0, arg1);
    _post_call_gl_callback(NULL, "glLineStipple", (GLADapiproc) glLineStipple, 2, arg0, arg1);
    
}
PFNGLLINESTIPPLEPROC glad_debug_glLineStipple = glad_debug_impl_glLineStipple;
PFNGLLINEWIDTHPROC glad_glLineWidth = NULL;
void GLAD_API_PTR glad_debug_impl_glLineWidth(GLfloat arg0) {
    _pre_call_gl_callback("glLineWidth", (GLADapiproc) glLineWidth, 1, arg0);
    glLineWidth(arg0);
    _post_call_gl_callback(NULL, "glLineWidth", (GLADapiproc) glLineWidth, 1, arg0);
    
}
PFNGLLINEWIDTHPROC glad_debug_glLineWidth = glad_debug_impl_glLineWidth;
PFNGLLINKPROGRAMPROC glad_glLinkProgram = NULL;
void GLAD_API_PTR glad_debug_impl_glLinkProgram(GLuint arg0) {
    _pre_call_gl_callback("glLinkProgram", (GLADapiproc) glLinkProgram, 1, arg0);
    glLinkProgram(arg0);
    _post_call_gl_callback(NULL, "glLinkProgram", (GLADapiproc) glLinkProgram, 1, arg0);
    
}
PFNGLLINKPROGRAMPROC glad_debug_glLinkProgram = glad_debug_impl_glLinkProgram;
PFNGLLISTBASEPROC glad_glListBase = NULL;
void GLAD_API_PTR glad_debug_impl_glListBase(GLuint arg0) {
    _pre_call_gl_callback("glListBase", (GLADapiproc) glListBase, 1, arg0);
    glListBase(arg0);
    _post_call_gl_callback(NULL, "glListBase", (GLADapiproc) glListBase, 1, arg0);
    
}
PFNGLLISTBASEPROC glad_debug_glListBase = glad_debug_impl_glListBase;
PFNGLLOADIDENTITYPROC glad_glLoadIdentity = NULL;
void GLAD_API_PTR glad_debug_impl_glLoadIdentity(void) {
    _pre_call_gl_callback("glLoadIdentity", (GLADapiproc) glLoadIdentity, 0);
    glLoadIdentity();
    _post_call_gl_callback(NULL, "glLoadIdentity", (GLADapiproc) glLoadIdentity, 0);
    
}
PFNGLLOADIDENTITYPROC glad_debug_glLoadIdentity = glad_debug_impl_glLoadIdentity;
PFNGLLOADMATRIXDPROC glad_glLoadMatrixd = NULL;
void GLAD_API_PTR glad_debug_impl_glLoadMatrixd(const GLdouble * arg0) {
    _pre_call_gl_callback("glLoadMatrixd", (GLADapiproc) glLoadMatrixd, 1, arg0);
    glLoadMatrixd(arg0);
    _post_call_gl_callback(NULL, "glLoadMatrixd", (GLADapiproc) glLoadMatrixd, 1, arg0);
    
}
PFNGLLOADMATRIXDPROC glad_debug_glLoadMatrixd = glad_debug_impl_glLoadMatrixd;
PFNGLLOADMATRIXFPROC glad_glLoadMatrixf = NULL;
void GLAD_API_PTR glad_debug_impl_glLoadMatrixf(const GLfloat * arg0) {
    _pre_call_gl_callback("glLoadMatrixf", (GLADapiproc) glLoadMatrixf, 1, arg0);
    glLoadMatrixf(arg0);
    _post_call_gl_callback(NULL, "glLoadMatrixf", (GLADapiproc) glLoadMatrixf, 1, arg0);
    
}
PFNGLLOADMATRIXFPROC glad_debug_glLoadMatrixf = glad_debug_impl_glLoadMatrixf;
PFNGLLOADNAMEPROC glad_glLoadName = NULL;
void GLAD_API_PTR glad_debug_impl_glLoadName(GLuint arg0) {
    _pre_call_gl_callback("glLoadName", (GLADapiproc) glLoadName, 1, arg0);
    glLoadName(arg0);
    _post_call_gl_callback(NULL, "glLoadName", (GLADapiproc) glLoadName, 1, arg0);
    
}
PFNGLLOADNAMEPROC glad_debug_glLoadName = glad_debug_impl_glLoadName;
PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd = NULL;
void GLAD_API_PTR glad_debug_impl_glLoadTransposeMatrixd(const GLdouble * arg0) {
    _pre_call_gl_callback("glLoadTransposeMatrixd", (GLADapiproc) glLoadTransposeMatrixd, 1, arg0);
    glLoadTransposeMatrixd(arg0);
    _post_call_gl_callback(NULL, "glLoadTransposeMatrixd", (GLADapiproc) glLoadTransposeMatrixd, 1, arg0);
    
}
PFNGLLOADTRANSPOSEMATRIXDPROC glad_debug_glLoadTransposeMatrixd = glad_debug_impl_glLoadTransposeMatrixd;
PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf = NULL;
void GLAD_API_PTR glad_debug_impl_glLoadTransposeMatrixf(const GLfloat * arg0) {
    _pre_call_gl_callback("glLoadTransposeMatrixf", (GLADapiproc) glLoadTransposeMatrixf, 1, arg0);
    glLoadTransposeMatrixf(arg0);
    _post_call_gl_callback(NULL, "glLoadTransposeMatrixf", (GLADapiproc) glLoadTransposeMatrixf, 1, arg0);
    
}
PFNGLLOADTRANSPOSEMATRIXFPROC glad_debug_glLoadTransposeMatrixf = glad_debug_impl_glLoadTransposeMatrixf;
PFNGLLOGICOPPROC glad_glLogicOp = NULL;
void GLAD_API_PTR glad_debug_impl_glLogicOp(GLenum arg0) {
    _pre_call_gl_callback("glLogicOp", (GLADapiproc) glLogicOp, 1, arg0);
    glLogicOp(arg0);
    _post_call_gl_callback(NULL, "glLogicOp", (GLADapiproc) glLogicOp, 1, arg0);
    
}
PFNGLLOGICOPPROC glad_debug_glLogicOp = glad_debug_impl_glLogicOp;
PFNGLMAP1DPROC glad_glMap1d = NULL;
void GLAD_API_PTR glad_debug_impl_glMap1d(GLenum arg0, GLdouble arg1, GLdouble arg2, GLint arg3, GLint arg4, const GLdouble * arg5) {
    _pre_call_gl_callback("glMap1d", (GLADapiproc) glMap1d, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glMap1d(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glMap1d", (GLADapiproc) glMap1d, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLMAP1DPROC glad_debug_glMap1d = glad_debug_impl_glMap1d;
PFNGLMAP1FPROC glad_glMap1f = NULL;
void GLAD_API_PTR glad_debug_impl_glMap1f(GLenum arg0, GLfloat arg1, GLfloat arg2, GLint arg3, GLint arg4, const GLfloat * arg5) {
    _pre_call_gl_callback("glMap1f", (GLADapiproc) glMap1f, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glMap1f(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glMap1f", (GLADapiproc) glMap1f, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLMAP1FPROC glad_debug_glMap1f = glad_debug_impl_glMap1f;
PFNGLMAP2DPROC glad_glMap2d = NULL;
void GLAD_API_PTR glad_debug_impl_glMap2d(GLenum arg0, GLdouble arg1, GLdouble arg2, GLint arg3, GLint arg4, GLdouble arg5, GLdouble arg6, GLint arg7, GLint arg8, const GLdouble * arg9) {
    _pre_call_gl_callback("glMap2d", (GLADapiproc) glMap2d, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    glMap2d(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_gl_callback(NULL, "glMap2d", (GLADapiproc) glMap2d, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
}
PFNGLMAP2DPROC glad_debug_glMap2d = glad_debug_impl_glMap2d;
PFNGLMAP2FPROC glad_glMap2f = NULL;
void GLAD_API_PTR glad_debug_impl_glMap2f(GLenum arg0, GLfloat arg1, GLfloat arg2, GLint arg3, GLint arg4, GLfloat arg5, GLfloat arg6, GLint arg7, GLint arg8, const GLfloat * arg9) {
    _pre_call_gl_callback("glMap2f", (GLADapiproc) glMap2f, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    glMap2f(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_gl_callback(NULL, "glMap2f", (GLADapiproc) glMap2f, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
}
PFNGLMAP2FPROC glad_debug_glMap2f = glad_debug_impl_glMap2f;
PFNGLMAPBUFFERPROC glad_glMapBuffer = NULL;
void * GLAD_API_PTR glad_debug_impl_glMapBuffer(GLenum arg0, GLenum arg1) {
    void * ret;
    _pre_call_gl_callback("glMapBuffer", (GLADapiproc) glMapBuffer, 2, arg0, arg1);
    ret = glMapBuffer(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glMapBuffer", (GLADapiproc) glMapBuffer, 2, arg0, arg1);
    return ret;
}
PFNGLMAPBUFFERPROC glad_debug_glMapBuffer = glad_debug_impl_glMapBuffer;
PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange = NULL;
void * GLAD_API_PTR glad_debug_impl_glMapBufferRange(GLenum arg0, GLintptr arg1, GLsizeiptr arg2, GLbitfield arg3) {
    void * ret;
    _pre_call_gl_callback("glMapBufferRange", (GLADapiproc) glMapBufferRange, 4, arg0, arg1, arg2, arg3);
    ret = glMapBufferRange(arg0, arg1, arg2, arg3);
    _post_call_gl_callback((void*) &ret, "glMapBufferRange", (GLADapiproc) glMapBufferRange, 4, arg0, arg1, arg2, arg3);
    return ret;
}
PFNGLMAPBUFFERRANGEPROC glad_debug_glMapBufferRange = glad_debug_impl_glMapBufferRange;
PFNGLMAPGRID1DPROC glad_glMapGrid1d = NULL;
void GLAD_API_PTR glad_debug_impl_glMapGrid1d(GLint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glMapGrid1d", (GLADapiproc) glMapGrid1d, 3, arg0, arg1, arg2);
    glMapGrid1d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMapGrid1d", (GLADapiproc) glMapGrid1d, 3, arg0, arg1, arg2);
    
}
PFNGLMAPGRID1DPROC glad_debug_glMapGrid1d = glad_debug_impl_glMapGrid1d;
PFNGLMAPGRID1FPROC glad_glMapGrid1f = NULL;
void GLAD_API_PTR glad_debug_impl_glMapGrid1f(GLint arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glMapGrid1f", (GLADapiproc) glMapGrid1f, 3, arg0, arg1, arg2);
    glMapGrid1f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMapGrid1f", (GLADapiproc) glMapGrid1f, 3, arg0, arg1, arg2);
    
}
PFNGLMAPGRID1FPROC glad_debug_glMapGrid1f = glad_debug_impl_glMapGrid1f;
PFNGLMAPGRID2DPROC glad_glMapGrid2d = NULL;
void GLAD_API_PTR glad_debug_impl_glMapGrid2d(GLint arg0, GLdouble arg1, GLdouble arg2, GLint arg3, GLdouble arg4, GLdouble arg5) {
    _pre_call_gl_callback("glMapGrid2d", (GLADapiproc) glMapGrid2d, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glMapGrid2d(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glMapGrid2d", (GLADapiproc) glMapGrid2d, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLMAPGRID2DPROC glad_debug_glMapGrid2d = glad_debug_impl_glMapGrid2d;
PFNGLMAPGRID2FPROC glad_glMapGrid2f = NULL;
void GLAD_API_PTR glad_debug_impl_glMapGrid2f(GLint arg0, GLfloat arg1, GLfloat arg2, GLint arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_gl_callback("glMapGrid2f", (GLADapiproc) glMapGrid2f, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glMapGrid2f(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glMapGrid2f", (GLADapiproc) glMapGrid2f, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLMAPGRID2FPROC glad_debug_glMapGrid2f = glad_debug_impl_glMapGrid2f;
PFNGLMAPNAMEDBUFFERPROC glad_glMapNamedBuffer = NULL;
void * GLAD_API_PTR glad_debug_impl_glMapNamedBuffer(GLuint arg0, GLenum arg1) {
    void * ret;
    _pre_call_gl_callback("glMapNamedBuffer", (GLADapiproc) glMapNamedBuffer, 2, arg0, arg1);
    ret = glMapNamedBuffer(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glMapNamedBuffer", (GLADapiproc) glMapNamedBuffer, 2, arg0, arg1);
    return ret;
}
PFNGLMAPNAMEDBUFFERPROC glad_debug_glMapNamedBuffer = glad_debug_impl_glMapNamedBuffer;
PFNGLMAPNAMEDBUFFERRANGEPROC glad_glMapNamedBufferRange = NULL;
void * GLAD_API_PTR glad_debug_impl_glMapNamedBufferRange(GLuint arg0, GLintptr arg1, GLsizeiptr arg2, GLbitfield arg3) {
    void * ret;
    _pre_call_gl_callback("glMapNamedBufferRange", (GLADapiproc) glMapNamedBufferRange, 4, arg0, arg1, arg2, arg3);
    ret = glMapNamedBufferRange(arg0, arg1, arg2, arg3);
    _post_call_gl_callback((void*) &ret, "glMapNamedBufferRange", (GLADapiproc) glMapNamedBufferRange, 4, arg0, arg1, arg2, arg3);
    return ret;
}
PFNGLMAPNAMEDBUFFERRANGEPROC glad_debug_glMapNamedBufferRange = glad_debug_impl_glMapNamedBufferRange;
PFNGLMATERIALFPROC glad_glMaterialf = NULL;
void GLAD_API_PTR glad_debug_impl_glMaterialf(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_gl_callback("glMaterialf", (GLADapiproc) glMaterialf, 3, arg0, arg1, arg2);
    glMaterialf(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMaterialf", (GLADapiproc) glMaterialf, 3, arg0, arg1, arg2);
    
}
PFNGLMATERIALFPROC glad_debug_glMaterialf = glad_debug_impl_glMaterialf;
PFNGLMATERIALFVPROC glad_glMaterialfv = NULL;
void GLAD_API_PTR glad_debug_impl_glMaterialfv(GLenum arg0, GLenum arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glMaterialfv", (GLADapiproc) glMaterialfv, 3, arg0, arg1, arg2);
    glMaterialfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMaterialfv", (GLADapiproc) glMaterialfv, 3, arg0, arg1, arg2);
    
}
PFNGLMATERIALFVPROC glad_debug_glMaterialfv = glad_debug_impl_glMaterialfv;
PFNGLMATERIALIPROC glad_glMateriali = NULL;
void GLAD_API_PTR glad_debug_impl_glMateriali(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glMateriali", (GLADapiproc) glMateriali, 3, arg0, arg1, arg2);
    glMateriali(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMateriali", (GLADapiproc) glMateriali, 3, arg0, arg1, arg2);
    
}
PFNGLMATERIALIPROC glad_debug_glMateriali = glad_debug_impl_glMateriali;
PFNGLMATERIALIVPROC glad_glMaterialiv = NULL;
void GLAD_API_PTR glad_debug_impl_glMaterialiv(GLenum arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glMaterialiv", (GLADapiproc) glMaterialiv, 3, arg0, arg1, arg2);
    glMaterialiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMaterialiv", (GLADapiproc) glMaterialiv, 3, arg0, arg1, arg2);
    
}
PFNGLMATERIALIVPROC glad_debug_glMaterialiv = glad_debug_impl_glMaterialiv;
PFNGLMATRIXMODEPROC glad_glMatrixMode = NULL;
void GLAD_API_PTR glad_debug_impl_glMatrixMode(GLenum arg0) {
    _pre_call_gl_callback("glMatrixMode", (GLADapiproc) glMatrixMode, 1, arg0);
    glMatrixMode(arg0);
    _post_call_gl_callback(NULL, "glMatrixMode", (GLADapiproc) glMatrixMode, 1, arg0);
    
}
PFNGLMATRIXMODEPROC glad_debug_glMatrixMode = glad_debug_impl_glMatrixMode;
PFNGLMEMORYBARRIERPROC glad_glMemoryBarrier = NULL;
void GLAD_API_PTR glad_debug_impl_glMemoryBarrier(GLbitfield arg0) {
    _pre_call_gl_callback("glMemoryBarrier", (GLADapiproc) glMemoryBarrier, 1, arg0);
    glMemoryBarrier(arg0);
    _post_call_gl_callback(NULL, "glMemoryBarrier", (GLADapiproc) glMemoryBarrier, 1, arg0);
    
}
PFNGLMEMORYBARRIERPROC glad_debug_glMemoryBarrier = glad_debug_impl_glMemoryBarrier;
PFNGLMEMORYBARRIERBYREGIONPROC glad_glMemoryBarrierByRegion = NULL;
void GLAD_API_PTR glad_debug_impl_glMemoryBarrierByRegion(GLbitfield arg0) {
    _pre_call_gl_callback("glMemoryBarrierByRegion", (GLADapiproc) glMemoryBarrierByRegion, 1, arg0);
    glMemoryBarrierByRegion(arg0);
    _post_call_gl_callback(NULL, "glMemoryBarrierByRegion", (GLADapiproc) glMemoryBarrierByRegion, 1, arg0);
    
}
PFNGLMEMORYBARRIERBYREGIONPROC glad_debug_glMemoryBarrierByRegion = glad_debug_impl_glMemoryBarrierByRegion;
PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading = NULL;
void GLAD_API_PTR glad_debug_impl_glMinSampleShading(GLfloat arg0) {
    _pre_call_gl_callback("glMinSampleShading", (GLADapiproc) glMinSampleShading, 1, arg0);
    glMinSampleShading(arg0);
    _post_call_gl_callback(NULL, "glMinSampleShading", (GLADapiproc) glMinSampleShading, 1, arg0);
    
}
PFNGLMINSAMPLESHADINGPROC glad_debug_glMinSampleShading = glad_debug_impl_glMinSampleShading;
PFNGLMULTMATRIXDPROC glad_glMultMatrixd = NULL;
void GLAD_API_PTR glad_debug_impl_glMultMatrixd(const GLdouble * arg0) {
    _pre_call_gl_callback("glMultMatrixd", (GLADapiproc) glMultMatrixd, 1, arg0);
    glMultMatrixd(arg0);
    _post_call_gl_callback(NULL, "glMultMatrixd", (GLADapiproc) glMultMatrixd, 1, arg0);
    
}
PFNGLMULTMATRIXDPROC glad_debug_glMultMatrixd = glad_debug_impl_glMultMatrixd;
PFNGLMULTMATRIXFPROC glad_glMultMatrixf = NULL;
void GLAD_API_PTR glad_debug_impl_glMultMatrixf(const GLfloat * arg0) {
    _pre_call_gl_callback("glMultMatrixf", (GLADapiproc) glMultMatrixf, 1, arg0);
    glMultMatrixf(arg0);
    _post_call_gl_callback(NULL, "glMultMatrixf", (GLADapiproc) glMultMatrixf, 1, arg0);
    
}
PFNGLMULTMATRIXFPROC glad_debug_glMultMatrixf = glad_debug_impl_glMultMatrixf;
PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd = NULL;
void GLAD_API_PTR glad_debug_impl_glMultTransposeMatrixd(const GLdouble * arg0) {
    _pre_call_gl_callback("glMultTransposeMatrixd", (GLADapiproc) glMultTransposeMatrixd, 1, arg0);
    glMultTransposeMatrixd(arg0);
    _post_call_gl_callback(NULL, "glMultTransposeMatrixd", (GLADapiproc) glMultTransposeMatrixd, 1, arg0);
    
}
PFNGLMULTTRANSPOSEMATRIXDPROC glad_debug_glMultTransposeMatrixd = glad_debug_impl_glMultTransposeMatrixd;
PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf = NULL;
void GLAD_API_PTR glad_debug_impl_glMultTransposeMatrixf(const GLfloat * arg0) {
    _pre_call_gl_callback("glMultTransposeMatrixf", (GLADapiproc) glMultTransposeMatrixf, 1, arg0);
    glMultTransposeMatrixf(arg0);
    _post_call_gl_callback(NULL, "glMultTransposeMatrixf", (GLADapiproc) glMultTransposeMatrixf, 1, arg0);
    
}
PFNGLMULTTRANSPOSEMATRIXFPROC glad_debug_glMultTransposeMatrixf = glad_debug_impl_glMultTransposeMatrixf;
PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiDrawArrays(GLenum arg0, const GLint * arg1, const GLsizei * arg2, GLsizei arg3) {
    _pre_call_gl_callback("glMultiDrawArrays", (GLADapiproc) glMultiDrawArrays, 4, arg0, arg1, arg2, arg3);
    glMultiDrawArrays(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glMultiDrawArrays", (GLADapiproc) glMultiDrawArrays, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLMULTIDRAWARRAYSPROC glad_debug_glMultiDrawArrays = glad_debug_impl_glMultiDrawArrays;
PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_glMultiDrawArraysIndirect = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiDrawArraysIndirect(GLenum arg0, const void * arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_gl_callback("glMultiDrawArraysIndirect", (GLADapiproc) glMultiDrawArraysIndirect, 4, arg0, arg1, arg2, arg3);
    glMultiDrawArraysIndirect(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glMultiDrawArraysIndirect", (GLADapiproc) glMultiDrawArraysIndirect, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_debug_glMultiDrawArraysIndirect = glad_debug_impl_glMultiDrawArraysIndirect;
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glad_glMultiDrawArraysIndirectCount = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiDrawArraysIndirectCount(GLenum arg0, const void * arg1, GLintptr arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_gl_callback("glMultiDrawArraysIndirectCount", (GLADapiproc) glMultiDrawArraysIndirectCount, 5, arg0, arg1, arg2, arg3, arg4);
    glMultiDrawArraysIndirectCount(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glMultiDrawArraysIndirectCount", (GLADapiproc) glMultiDrawArraysIndirectCount, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glad_debug_glMultiDrawArraysIndirectCount = glad_debug_impl_glMultiDrawArraysIndirectCount;
PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiDrawElements(GLenum arg0, const GLsizei * arg1, GLenum arg2, const void *const* arg3, GLsizei arg4) {
    _pre_call_gl_callback("glMultiDrawElements", (GLADapiproc) glMultiDrawElements, 5, arg0, arg1, arg2, arg3, arg4);
    glMultiDrawElements(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glMultiDrawElements", (GLADapiproc) glMultiDrawElements, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLMULTIDRAWELEMENTSPROC glad_debug_glMultiDrawElements = glad_debug_impl_glMultiDrawElements;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiDrawElementsBaseVertex(GLenum arg0, const GLsizei * arg1, GLenum arg2, const void *const* arg3, GLsizei arg4, const GLint * arg5) {
    _pre_call_gl_callback("glMultiDrawElementsBaseVertex", (GLADapiproc) glMultiDrawElementsBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glMultiDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glMultiDrawElementsBaseVertex", (GLADapiproc) glMultiDrawElementsBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_debug_glMultiDrawElementsBaseVertex = glad_debug_impl_glMultiDrawElementsBaseVertex;
PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_glMultiDrawElementsIndirect = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiDrawElementsIndirect(GLenum arg0, GLenum arg1, const void * arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_gl_callback("glMultiDrawElementsIndirect", (GLADapiproc) glMultiDrawElementsIndirect, 5, arg0, arg1, arg2, arg3, arg4);
    glMultiDrawElementsIndirect(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glMultiDrawElementsIndirect", (GLADapiproc) glMultiDrawElementsIndirect, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_debug_glMultiDrawElementsIndirect = glad_debug_impl_glMultiDrawElementsIndirect;
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glad_glMultiDrawElementsIndirectCount = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiDrawElementsIndirectCount(GLenum arg0, GLenum arg1, const void * arg2, GLintptr arg3, GLsizei arg4, GLsizei arg5) {
    _pre_call_gl_callback("glMultiDrawElementsIndirectCount", (GLADapiproc) glMultiDrawElementsIndirectCount, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glMultiDrawElementsIndirectCount(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glMultiDrawElementsIndirectCount", (GLADapiproc) glMultiDrawElementsIndirectCount, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glad_debug_glMultiDrawElementsIndirectCount = glad_debug_impl_glMultiDrawElementsIndirectCount;
PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord1d(GLenum arg0, GLdouble arg1) {
    _pre_call_gl_callback("glMultiTexCoord1d", (GLADapiproc) glMultiTexCoord1d, 2, arg0, arg1);
    glMultiTexCoord1d(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord1d", (GLADapiproc) glMultiTexCoord1d, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD1DPROC glad_debug_glMultiTexCoord1d = glad_debug_impl_glMultiTexCoord1d;
PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord1dv(GLenum arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glMultiTexCoord1dv", (GLADapiproc) glMultiTexCoord1dv, 2, arg0, arg1);
    glMultiTexCoord1dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord1dv", (GLADapiproc) glMultiTexCoord1dv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD1DVPROC glad_debug_glMultiTexCoord1dv = glad_debug_impl_glMultiTexCoord1dv;
PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord1f(GLenum arg0, GLfloat arg1) {
    _pre_call_gl_callback("glMultiTexCoord1f", (GLADapiproc) glMultiTexCoord1f, 2, arg0, arg1);
    glMultiTexCoord1f(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord1f", (GLADapiproc) glMultiTexCoord1f, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD1FPROC glad_debug_glMultiTexCoord1f = glad_debug_impl_glMultiTexCoord1f;
PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord1fv(GLenum arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glMultiTexCoord1fv", (GLADapiproc) glMultiTexCoord1fv, 2, arg0, arg1);
    glMultiTexCoord1fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord1fv", (GLADapiproc) glMultiTexCoord1fv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD1FVPROC glad_debug_glMultiTexCoord1fv = glad_debug_impl_glMultiTexCoord1fv;
PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord1i(GLenum arg0, GLint arg1) {
    _pre_call_gl_callback("glMultiTexCoord1i", (GLADapiproc) glMultiTexCoord1i, 2, arg0, arg1);
    glMultiTexCoord1i(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord1i", (GLADapiproc) glMultiTexCoord1i, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD1IPROC glad_debug_glMultiTexCoord1i = glad_debug_impl_glMultiTexCoord1i;
PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord1iv(GLenum arg0, const GLint * arg1) {
    _pre_call_gl_callback("glMultiTexCoord1iv", (GLADapiproc) glMultiTexCoord1iv, 2, arg0, arg1);
    glMultiTexCoord1iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord1iv", (GLADapiproc) glMultiTexCoord1iv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD1IVPROC glad_debug_glMultiTexCoord1iv = glad_debug_impl_glMultiTexCoord1iv;
PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord1s(GLenum arg0, GLshort arg1) {
    _pre_call_gl_callback("glMultiTexCoord1s", (GLADapiproc) glMultiTexCoord1s, 2, arg0, arg1);
    glMultiTexCoord1s(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord1s", (GLADapiproc) glMultiTexCoord1s, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD1SPROC glad_debug_glMultiTexCoord1s = glad_debug_impl_glMultiTexCoord1s;
PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord1sv(GLenum arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glMultiTexCoord1sv", (GLADapiproc) glMultiTexCoord1sv, 2, arg0, arg1);
    glMultiTexCoord1sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord1sv", (GLADapiproc) glMultiTexCoord1sv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD1SVPROC glad_debug_glMultiTexCoord1sv = glad_debug_impl_glMultiTexCoord1sv;
PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord2d(GLenum arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glMultiTexCoord2d", (GLADapiproc) glMultiTexCoord2d, 3, arg0, arg1, arg2);
    glMultiTexCoord2d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoord2d", (GLADapiproc) glMultiTexCoord2d, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORD2DPROC glad_debug_glMultiTexCoord2d = glad_debug_impl_glMultiTexCoord2d;
PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord2dv(GLenum arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glMultiTexCoord2dv", (GLADapiproc) glMultiTexCoord2dv, 2, arg0, arg1);
    glMultiTexCoord2dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord2dv", (GLADapiproc) glMultiTexCoord2dv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD2DVPROC glad_debug_glMultiTexCoord2dv = glad_debug_impl_glMultiTexCoord2dv;
PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord2f(GLenum arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glMultiTexCoord2f", (GLADapiproc) glMultiTexCoord2f, 3, arg0, arg1, arg2);
    glMultiTexCoord2f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoord2f", (GLADapiproc) glMultiTexCoord2f, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORD2FPROC glad_debug_glMultiTexCoord2f = glad_debug_impl_glMultiTexCoord2f;
PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord2fv(GLenum arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glMultiTexCoord2fv", (GLADapiproc) glMultiTexCoord2fv, 2, arg0, arg1);
    glMultiTexCoord2fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord2fv", (GLADapiproc) glMultiTexCoord2fv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD2FVPROC glad_debug_glMultiTexCoord2fv = glad_debug_impl_glMultiTexCoord2fv;
PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord2i(GLenum arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glMultiTexCoord2i", (GLADapiproc) glMultiTexCoord2i, 3, arg0, arg1, arg2);
    glMultiTexCoord2i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoord2i", (GLADapiproc) glMultiTexCoord2i, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORD2IPROC glad_debug_glMultiTexCoord2i = glad_debug_impl_glMultiTexCoord2i;
PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord2iv(GLenum arg0, const GLint * arg1) {
    _pre_call_gl_callback("glMultiTexCoord2iv", (GLADapiproc) glMultiTexCoord2iv, 2, arg0, arg1);
    glMultiTexCoord2iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord2iv", (GLADapiproc) glMultiTexCoord2iv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD2IVPROC glad_debug_glMultiTexCoord2iv = glad_debug_impl_glMultiTexCoord2iv;
PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord2s(GLenum arg0, GLshort arg1, GLshort arg2) {
    _pre_call_gl_callback("glMultiTexCoord2s", (GLADapiproc) glMultiTexCoord2s, 3, arg0, arg1, arg2);
    glMultiTexCoord2s(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoord2s", (GLADapiproc) glMultiTexCoord2s, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORD2SPROC glad_debug_glMultiTexCoord2s = glad_debug_impl_glMultiTexCoord2s;
PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord2sv(GLenum arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glMultiTexCoord2sv", (GLADapiproc) glMultiTexCoord2sv, 2, arg0, arg1);
    glMultiTexCoord2sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord2sv", (GLADapiproc) glMultiTexCoord2sv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD2SVPROC glad_debug_glMultiTexCoord2sv = glad_debug_impl_glMultiTexCoord2sv;
PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord3d(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glMultiTexCoord3d", (GLADapiproc) glMultiTexCoord3d, 4, arg0, arg1, arg2, arg3);
    glMultiTexCoord3d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glMultiTexCoord3d", (GLADapiproc) glMultiTexCoord3d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLMULTITEXCOORD3DPROC glad_debug_glMultiTexCoord3d = glad_debug_impl_glMultiTexCoord3d;
PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord3dv(GLenum arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glMultiTexCoord3dv", (GLADapiproc) glMultiTexCoord3dv, 2, arg0, arg1);
    glMultiTexCoord3dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord3dv", (GLADapiproc) glMultiTexCoord3dv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD3DVPROC glad_debug_glMultiTexCoord3dv = glad_debug_impl_glMultiTexCoord3dv;
PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord3f(GLenum arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glMultiTexCoord3f", (GLADapiproc) glMultiTexCoord3f, 4, arg0, arg1, arg2, arg3);
    glMultiTexCoord3f(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glMultiTexCoord3f", (GLADapiproc) glMultiTexCoord3f, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLMULTITEXCOORD3FPROC glad_debug_glMultiTexCoord3f = glad_debug_impl_glMultiTexCoord3f;
PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord3fv(GLenum arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glMultiTexCoord3fv", (GLADapiproc) glMultiTexCoord3fv, 2, arg0, arg1);
    glMultiTexCoord3fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord3fv", (GLADapiproc) glMultiTexCoord3fv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD3FVPROC glad_debug_glMultiTexCoord3fv = glad_debug_impl_glMultiTexCoord3fv;
PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord3i(GLenum arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glMultiTexCoord3i", (GLADapiproc) glMultiTexCoord3i, 4, arg0, arg1, arg2, arg3);
    glMultiTexCoord3i(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glMultiTexCoord3i", (GLADapiproc) glMultiTexCoord3i, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLMULTITEXCOORD3IPROC glad_debug_glMultiTexCoord3i = glad_debug_impl_glMultiTexCoord3i;
PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord3iv(GLenum arg0, const GLint * arg1) {
    _pre_call_gl_callback("glMultiTexCoord3iv", (GLADapiproc) glMultiTexCoord3iv, 2, arg0, arg1);
    glMultiTexCoord3iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord3iv", (GLADapiproc) glMultiTexCoord3iv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD3IVPROC glad_debug_glMultiTexCoord3iv = glad_debug_impl_glMultiTexCoord3iv;
PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord3s(GLenum arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_gl_callback("glMultiTexCoord3s", (GLADapiproc) glMultiTexCoord3s, 4, arg0, arg1, arg2, arg3);
    glMultiTexCoord3s(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glMultiTexCoord3s", (GLADapiproc) glMultiTexCoord3s, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLMULTITEXCOORD3SPROC glad_debug_glMultiTexCoord3s = glad_debug_impl_glMultiTexCoord3s;
PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord3sv(GLenum arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glMultiTexCoord3sv", (GLADapiproc) glMultiTexCoord3sv, 2, arg0, arg1);
    glMultiTexCoord3sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord3sv", (GLADapiproc) glMultiTexCoord3sv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD3SVPROC glad_debug_glMultiTexCoord3sv = glad_debug_impl_glMultiTexCoord3sv;
PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord4d(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_gl_callback("glMultiTexCoord4d", (GLADapiproc) glMultiTexCoord4d, 5, arg0, arg1, arg2, arg3, arg4);
    glMultiTexCoord4d(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glMultiTexCoord4d", (GLADapiproc) glMultiTexCoord4d, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLMULTITEXCOORD4DPROC glad_debug_glMultiTexCoord4d = glad_debug_impl_glMultiTexCoord4d;
PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord4dv(GLenum arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glMultiTexCoord4dv", (GLADapiproc) glMultiTexCoord4dv, 2, arg0, arg1);
    glMultiTexCoord4dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord4dv", (GLADapiproc) glMultiTexCoord4dv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD4DVPROC glad_debug_glMultiTexCoord4dv = glad_debug_impl_glMultiTexCoord4dv;
PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord4f(GLenum arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_gl_callback("glMultiTexCoord4f", (GLADapiproc) glMultiTexCoord4f, 5, arg0, arg1, arg2, arg3, arg4);
    glMultiTexCoord4f(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glMultiTexCoord4f", (GLADapiproc) glMultiTexCoord4f, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLMULTITEXCOORD4FPROC glad_debug_glMultiTexCoord4f = glad_debug_impl_glMultiTexCoord4f;
PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord4fv(GLenum arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glMultiTexCoord4fv", (GLADapiproc) glMultiTexCoord4fv, 2, arg0, arg1);
    glMultiTexCoord4fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord4fv", (GLADapiproc) glMultiTexCoord4fv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD4FVPROC glad_debug_glMultiTexCoord4fv = glad_debug_impl_glMultiTexCoord4fv;
PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord4i(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_gl_callback("glMultiTexCoord4i", (GLADapiproc) glMultiTexCoord4i, 5, arg0, arg1, arg2, arg3, arg4);
    glMultiTexCoord4i(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glMultiTexCoord4i", (GLADapiproc) glMultiTexCoord4i, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLMULTITEXCOORD4IPROC glad_debug_glMultiTexCoord4i = glad_debug_impl_glMultiTexCoord4i;
PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord4iv(GLenum arg0, const GLint * arg1) {
    _pre_call_gl_callback("glMultiTexCoord4iv", (GLADapiproc) glMultiTexCoord4iv, 2, arg0, arg1);
    glMultiTexCoord4iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord4iv", (GLADapiproc) glMultiTexCoord4iv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD4IVPROC glad_debug_glMultiTexCoord4iv = glad_debug_impl_glMultiTexCoord4iv;
PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord4s(GLenum arg0, GLshort arg1, GLshort arg2, GLshort arg3, GLshort arg4) {
    _pre_call_gl_callback("glMultiTexCoord4s", (GLADapiproc) glMultiTexCoord4s, 5, arg0, arg1, arg2, arg3, arg4);
    glMultiTexCoord4s(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glMultiTexCoord4s", (GLADapiproc) glMultiTexCoord4s, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLMULTITEXCOORD4SPROC glad_debug_glMultiTexCoord4s = glad_debug_impl_glMultiTexCoord4s;
PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoord4sv(GLenum arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glMultiTexCoord4sv", (GLADapiproc) glMultiTexCoord4sv, 2, arg0, arg1);
    glMultiTexCoord4sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glMultiTexCoord4sv", (GLADapiproc) glMultiTexCoord4sv, 2, arg0, arg1);
    
}
PFNGLMULTITEXCOORD4SVPROC glad_debug_glMultiTexCoord4sv = glad_debug_impl_glMultiTexCoord4sv;
PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoordP1ui(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_gl_callback("glMultiTexCoordP1ui", (GLADapiproc) glMultiTexCoordP1ui, 3, arg0, arg1, arg2);
    glMultiTexCoordP1ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoordP1ui", (GLADapiproc) glMultiTexCoordP1ui, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORDP1UIPROC glad_debug_glMultiTexCoordP1ui = glad_debug_impl_glMultiTexCoordP1ui;
PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoordP1uiv(GLenum arg0, GLenum arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glMultiTexCoordP1uiv", (GLADapiproc) glMultiTexCoordP1uiv, 3, arg0, arg1, arg2);
    glMultiTexCoordP1uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoordP1uiv", (GLADapiproc) glMultiTexCoordP1uiv, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORDP1UIVPROC glad_debug_glMultiTexCoordP1uiv = glad_debug_impl_glMultiTexCoordP1uiv;
PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoordP2ui(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_gl_callback("glMultiTexCoordP2ui", (GLADapiproc) glMultiTexCoordP2ui, 3, arg0, arg1, arg2);
    glMultiTexCoordP2ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoordP2ui", (GLADapiproc) glMultiTexCoordP2ui, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORDP2UIPROC glad_debug_glMultiTexCoordP2ui = glad_debug_impl_glMultiTexCoordP2ui;
PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoordP2uiv(GLenum arg0, GLenum arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glMultiTexCoordP2uiv", (GLADapiproc) glMultiTexCoordP2uiv, 3, arg0, arg1, arg2);
    glMultiTexCoordP2uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoordP2uiv", (GLADapiproc) glMultiTexCoordP2uiv, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORDP2UIVPROC glad_debug_glMultiTexCoordP2uiv = glad_debug_impl_glMultiTexCoordP2uiv;
PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoordP3ui(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_gl_callback("glMultiTexCoordP3ui", (GLADapiproc) glMultiTexCoordP3ui, 3, arg0, arg1, arg2);
    glMultiTexCoordP3ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoordP3ui", (GLADapiproc) glMultiTexCoordP3ui, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORDP3UIPROC glad_debug_glMultiTexCoordP3ui = glad_debug_impl_glMultiTexCoordP3ui;
PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoordP3uiv(GLenum arg0, GLenum arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glMultiTexCoordP3uiv", (GLADapiproc) glMultiTexCoordP3uiv, 3, arg0, arg1, arg2);
    glMultiTexCoordP3uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoordP3uiv", (GLADapiproc) glMultiTexCoordP3uiv, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORDP3UIVPROC glad_debug_glMultiTexCoordP3uiv = glad_debug_impl_glMultiTexCoordP3uiv;
PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoordP4ui(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_gl_callback("glMultiTexCoordP4ui", (GLADapiproc) glMultiTexCoordP4ui, 3, arg0, arg1, arg2);
    glMultiTexCoordP4ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoordP4ui", (GLADapiproc) glMultiTexCoordP4ui, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORDP4UIPROC glad_debug_glMultiTexCoordP4ui = glad_debug_impl_glMultiTexCoordP4ui;
PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiTexCoordP4uiv(GLenum arg0, GLenum arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glMultiTexCoordP4uiv", (GLADapiproc) glMultiTexCoordP4uiv, 3, arg0, arg1, arg2);
    glMultiTexCoordP4uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glMultiTexCoordP4uiv", (GLADapiproc) glMultiTexCoordP4uiv, 3, arg0, arg1, arg2);
    
}
PFNGLMULTITEXCOORDP4UIVPROC glad_debug_glMultiTexCoordP4uiv = glad_debug_impl_glMultiTexCoordP4uiv;
PFNGLNAMEDBUFFERDATAPROC glad_glNamedBufferData = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedBufferData(GLuint arg0, GLsizeiptr arg1, const void * arg2, GLenum arg3) {
    _pre_call_gl_callback("glNamedBufferData", (GLADapiproc) glNamedBufferData, 4, arg0, arg1, arg2, arg3);
    glNamedBufferData(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glNamedBufferData", (GLADapiproc) glNamedBufferData, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLNAMEDBUFFERDATAPROC glad_debug_glNamedBufferData = glad_debug_impl_glNamedBufferData;
PFNGLNAMEDBUFFERSTORAGEPROC glad_glNamedBufferStorage = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedBufferStorage(GLuint arg0, GLsizeiptr arg1, const void * arg2, GLbitfield arg3) {
    _pre_call_gl_callback("glNamedBufferStorage", (GLADapiproc) glNamedBufferStorage, 4, arg0, arg1, arg2, arg3);
    glNamedBufferStorage(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glNamedBufferStorage", (GLADapiproc) glNamedBufferStorage, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLNAMEDBUFFERSTORAGEPROC glad_debug_glNamedBufferStorage = glad_debug_impl_glNamedBufferStorage;
PFNGLNAMEDBUFFERSUBDATAPROC glad_glNamedBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedBufferSubData(GLuint arg0, GLintptr arg1, GLsizeiptr arg2, const void * arg3) {
    _pre_call_gl_callback("glNamedBufferSubData", (GLADapiproc) glNamedBufferSubData, 4, arg0, arg1, arg2, arg3);
    glNamedBufferSubData(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glNamedBufferSubData", (GLADapiproc) glNamedBufferSubData, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLNAMEDBUFFERSUBDATAPROC glad_debug_glNamedBufferSubData = glad_debug_impl_glNamedBufferSubData;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_glNamedFramebufferDrawBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedFramebufferDrawBuffer(GLuint arg0, GLenum arg1) {
    _pre_call_gl_callback("glNamedFramebufferDrawBuffer", (GLADapiproc) glNamedFramebufferDrawBuffer, 2, arg0, arg1);
    glNamedFramebufferDrawBuffer(arg0, arg1);
    _post_call_gl_callback(NULL, "glNamedFramebufferDrawBuffer", (GLADapiproc) glNamedFramebufferDrawBuffer, 2, arg0, arg1);
    
}
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_debug_glNamedFramebufferDrawBuffer = glad_debug_impl_glNamedFramebufferDrawBuffer;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_glNamedFramebufferDrawBuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedFramebufferDrawBuffers(GLuint arg0, GLsizei arg1, const GLenum * arg2) {
    _pre_call_gl_callback("glNamedFramebufferDrawBuffers", (GLADapiproc) glNamedFramebufferDrawBuffers, 3, arg0, arg1, arg2);
    glNamedFramebufferDrawBuffers(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glNamedFramebufferDrawBuffers", (GLADapiproc) glNamedFramebufferDrawBuffers, 3, arg0, arg1, arg2);
    
}
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_debug_glNamedFramebufferDrawBuffers = glad_debug_impl_glNamedFramebufferDrawBuffers;
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_glNamedFramebufferParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedFramebufferParameteri(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glNamedFramebufferParameteri", (GLADapiproc) glNamedFramebufferParameteri, 3, arg0, arg1, arg2);
    glNamedFramebufferParameteri(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glNamedFramebufferParameteri", (GLADapiproc) glNamedFramebufferParameteri, 3, arg0, arg1, arg2);
    
}
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_debug_glNamedFramebufferParameteri = glad_debug_impl_glNamedFramebufferParameteri;
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_glNamedFramebufferReadBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedFramebufferReadBuffer(GLuint arg0, GLenum arg1) {
    _pre_call_gl_callback("glNamedFramebufferReadBuffer", (GLADapiproc) glNamedFramebufferReadBuffer, 2, arg0, arg1);
    glNamedFramebufferReadBuffer(arg0, arg1);
    _post_call_gl_callback(NULL, "glNamedFramebufferReadBuffer", (GLADapiproc) glNamedFramebufferReadBuffer, 2, arg0, arg1);
    
}
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_debug_glNamedFramebufferReadBuffer = glad_debug_impl_glNamedFramebufferReadBuffer;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_glNamedFramebufferRenderbuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedFramebufferRenderbuffer(GLuint arg0, GLenum arg1, GLenum arg2, GLuint arg3) {
    _pre_call_gl_callback("glNamedFramebufferRenderbuffer", (GLADapiproc) glNamedFramebufferRenderbuffer, 4, arg0, arg1, arg2, arg3);
    glNamedFramebufferRenderbuffer(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glNamedFramebufferRenderbuffer", (GLADapiproc) glNamedFramebufferRenderbuffer, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_debug_glNamedFramebufferRenderbuffer = glad_debug_impl_glNamedFramebufferRenderbuffer;
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_glNamedFramebufferTexture = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedFramebufferTexture(GLuint arg0, GLenum arg1, GLuint arg2, GLint arg3) {
    _pre_call_gl_callback("glNamedFramebufferTexture", (GLADapiproc) glNamedFramebufferTexture, 4, arg0, arg1, arg2, arg3);
    glNamedFramebufferTexture(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glNamedFramebufferTexture", (GLADapiproc) glNamedFramebufferTexture, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_debug_glNamedFramebufferTexture = glad_debug_impl_glNamedFramebufferTexture;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_glNamedFramebufferTextureLayer = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedFramebufferTextureLayer(GLuint arg0, GLenum arg1, GLuint arg2, GLint arg3, GLint arg4) {
    _pre_call_gl_callback("glNamedFramebufferTextureLayer", (GLADapiproc) glNamedFramebufferTextureLayer, 5, arg0, arg1, arg2, arg3, arg4);
    glNamedFramebufferTextureLayer(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glNamedFramebufferTextureLayer", (GLADapiproc) glNamedFramebufferTextureLayer, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_debug_glNamedFramebufferTextureLayer = glad_debug_impl_glNamedFramebufferTextureLayer;
PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_glNamedRenderbufferStorage = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedRenderbufferStorage(GLuint arg0, GLenum arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_gl_callback("glNamedRenderbufferStorage", (GLADapiproc) glNamedRenderbufferStorage, 4, arg0, arg1, arg2, arg3);
    glNamedRenderbufferStorage(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glNamedRenderbufferStorage", (GLADapiproc) glNamedRenderbufferStorage, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_debug_glNamedRenderbufferStorage = glad_debug_impl_glNamedRenderbufferStorage;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glNamedRenderbufferStorageMultisample = NULL;
void GLAD_API_PTR glad_debug_impl_glNamedRenderbufferStorageMultisample(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_gl_callback("glNamedRenderbufferStorageMultisample", (GLADapiproc) glNamedRenderbufferStorageMultisample, 5, arg0, arg1, arg2, arg3, arg4);
    glNamedRenderbufferStorageMultisample(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glNamedRenderbufferStorageMultisample", (GLADapiproc) glNamedRenderbufferStorageMultisample, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_debug_glNamedRenderbufferStorageMultisample = glad_debug_impl_glNamedRenderbufferStorageMultisample;
PFNGLNEWLISTPROC glad_glNewList = NULL;
void GLAD_API_PTR glad_debug_impl_glNewList(GLuint arg0, GLenum arg1) {
    _pre_call_gl_callback("glNewList", (GLADapiproc) glNewList, 2, arg0, arg1);
    glNewList(arg0, arg1);
    _post_call_gl_callback(NULL, "glNewList", (GLADapiproc) glNewList, 2, arg0, arg1);
    
}
PFNGLNEWLISTPROC glad_debug_glNewList = glad_debug_impl_glNewList;
PFNGLNORMAL3BPROC glad_glNormal3b = NULL;
void GLAD_API_PTR glad_debug_impl_glNormal3b(GLbyte arg0, GLbyte arg1, GLbyte arg2) {
    _pre_call_gl_callback("glNormal3b", (GLADapiproc) glNormal3b, 3, arg0, arg1, arg2);
    glNormal3b(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glNormal3b", (GLADapiproc) glNormal3b, 3, arg0, arg1, arg2);
    
}
PFNGLNORMAL3BPROC glad_debug_glNormal3b = glad_debug_impl_glNormal3b;
PFNGLNORMAL3BVPROC glad_glNormal3bv = NULL;
void GLAD_API_PTR glad_debug_impl_glNormal3bv(const GLbyte * arg0) {
    _pre_call_gl_callback("glNormal3bv", (GLADapiproc) glNormal3bv, 1, arg0);
    glNormal3bv(arg0);
    _post_call_gl_callback(NULL, "glNormal3bv", (GLADapiproc) glNormal3bv, 1, arg0);
    
}
PFNGLNORMAL3BVPROC glad_debug_glNormal3bv = glad_debug_impl_glNormal3bv;
PFNGLNORMAL3DPROC glad_glNormal3d = NULL;
void GLAD_API_PTR glad_debug_impl_glNormal3d(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glNormal3d", (GLADapiproc) glNormal3d, 3, arg0, arg1, arg2);
    glNormal3d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glNormal3d", (GLADapiproc) glNormal3d, 3, arg0, arg1, arg2);
    
}
PFNGLNORMAL3DPROC glad_debug_glNormal3d = glad_debug_impl_glNormal3d;
PFNGLNORMAL3DVPROC glad_glNormal3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glNormal3dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glNormal3dv", (GLADapiproc) glNormal3dv, 1, arg0);
    glNormal3dv(arg0);
    _post_call_gl_callback(NULL, "glNormal3dv", (GLADapiproc) glNormal3dv, 1, arg0);
    
}
PFNGLNORMAL3DVPROC glad_debug_glNormal3dv = glad_debug_impl_glNormal3dv;
PFNGLNORMAL3FPROC glad_glNormal3f = NULL;
void GLAD_API_PTR glad_debug_impl_glNormal3f(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glNormal3f", (GLADapiproc) glNormal3f, 3, arg0, arg1, arg2);
    glNormal3f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glNormal3f", (GLADapiproc) glNormal3f, 3, arg0, arg1, arg2);
    
}
PFNGLNORMAL3FPROC glad_debug_glNormal3f = glad_debug_impl_glNormal3f;
PFNGLNORMAL3FVPROC glad_glNormal3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glNormal3fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glNormal3fv", (GLADapiproc) glNormal3fv, 1, arg0);
    glNormal3fv(arg0);
    _post_call_gl_callback(NULL, "glNormal3fv", (GLADapiproc) glNormal3fv, 1, arg0);
    
}
PFNGLNORMAL3FVPROC glad_debug_glNormal3fv = glad_debug_impl_glNormal3fv;
PFNGLNORMAL3IPROC glad_glNormal3i = NULL;
void GLAD_API_PTR glad_debug_impl_glNormal3i(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glNormal3i", (GLADapiproc) glNormal3i, 3, arg0, arg1, arg2);
    glNormal3i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glNormal3i", (GLADapiproc) glNormal3i, 3, arg0, arg1, arg2);
    
}
PFNGLNORMAL3IPROC glad_debug_glNormal3i = glad_debug_impl_glNormal3i;
PFNGLNORMAL3IVPROC glad_glNormal3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glNormal3iv(const GLint * arg0) {
    _pre_call_gl_callback("glNormal3iv", (GLADapiproc) glNormal3iv, 1, arg0);
    glNormal3iv(arg0);
    _post_call_gl_callback(NULL, "glNormal3iv", (GLADapiproc) glNormal3iv, 1, arg0);
    
}
PFNGLNORMAL3IVPROC glad_debug_glNormal3iv = glad_debug_impl_glNormal3iv;
PFNGLNORMAL3SPROC glad_glNormal3s = NULL;
void GLAD_API_PTR glad_debug_impl_glNormal3s(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_gl_callback("glNormal3s", (GLADapiproc) glNormal3s, 3, arg0, arg1, arg2);
    glNormal3s(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glNormal3s", (GLADapiproc) glNormal3s, 3, arg0, arg1, arg2);
    
}
PFNGLNORMAL3SPROC glad_debug_glNormal3s = glad_debug_impl_glNormal3s;
PFNGLNORMAL3SVPROC glad_glNormal3sv = NULL;
void GLAD_API_PTR glad_debug_impl_glNormal3sv(const GLshort * arg0) {
    _pre_call_gl_callback("glNormal3sv", (GLADapiproc) glNormal3sv, 1, arg0);
    glNormal3sv(arg0);
    _post_call_gl_callback(NULL, "glNormal3sv", (GLADapiproc) glNormal3sv, 1, arg0);
    
}
PFNGLNORMAL3SVPROC glad_debug_glNormal3sv = glad_debug_impl_glNormal3sv;
PFNGLNORMALP3UIPROC glad_glNormalP3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glNormalP3ui(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glNormalP3ui", (GLADapiproc) glNormalP3ui, 2, arg0, arg1);
    glNormalP3ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glNormalP3ui", (GLADapiproc) glNormalP3ui, 2, arg0, arg1);
    
}
PFNGLNORMALP3UIPROC glad_debug_glNormalP3ui = glad_debug_impl_glNormalP3ui;
PFNGLNORMALP3UIVPROC glad_glNormalP3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glNormalP3uiv(GLenum arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glNormalP3uiv", (GLADapiproc) glNormalP3uiv, 2, arg0, arg1);
    glNormalP3uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glNormalP3uiv", (GLADapiproc) glNormalP3uiv, 2, arg0, arg1);
    
}
PFNGLNORMALP3UIVPROC glad_debug_glNormalP3uiv = glad_debug_impl_glNormalP3uiv;
PFNGLNORMALPOINTERPROC glad_glNormalPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glNormalPointer(GLenum arg0, GLsizei arg1, const void * arg2) {
    _pre_call_gl_callback("glNormalPointer", (GLADapiproc) glNormalPointer, 3, arg0, arg1, arg2);
    glNormalPointer(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glNormalPointer", (GLADapiproc) glNormalPointer, 3, arg0, arg1, arg2);
    
}
PFNGLNORMALPOINTERPROC glad_debug_glNormalPointer = glad_debug_impl_glNormalPointer;
PFNGLOBJECTLABELPROC glad_glObjectLabel = NULL;
void GLAD_API_PTR glad_debug_impl_glObjectLabel(GLenum arg0, GLuint arg1, GLsizei arg2, const GLchar * arg3) {
    _pre_call_gl_callback("glObjectLabel", (GLADapiproc) glObjectLabel, 4, arg0, arg1, arg2, arg3);
    glObjectLabel(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glObjectLabel", (GLADapiproc) glObjectLabel, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLOBJECTLABELPROC glad_debug_glObjectLabel = glad_debug_impl_glObjectLabel;
PFNGLOBJECTPTRLABELPROC glad_glObjectPtrLabel = NULL;
void GLAD_API_PTR glad_debug_impl_glObjectPtrLabel(const void * arg0, GLsizei arg1, const GLchar * arg2) {
    _pre_call_gl_callback("glObjectPtrLabel", (GLADapiproc) glObjectPtrLabel, 3, arg0, arg1, arg2);
    glObjectPtrLabel(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glObjectPtrLabel", (GLADapiproc) glObjectPtrLabel, 3, arg0, arg1, arg2);
    
}
PFNGLOBJECTPTRLABELPROC glad_debug_glObjectPtrLabel = glad_debug_impl_glObjectPtrLabel;
PFNGLORTHOPROC glad_glOrtho = NULL;
void GLAD_API_PTR glad_debug_impl_glOrtho(GLdouble arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5) {
    _pre_call_gl_callback("glOrtho", (GLADapiproc) glOrtho, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glOrtho(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glOrtho", (GLADapiproc) glOrtho, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLORTHOPROC glad_debug_glOrtho = glad_debug_impl_glOrtho;
PFNGLPASSTHROUGHPROC glad_glPassThrough = NULL;
void GLAD_API_PTR glad_debug_impl_glPassThrough(GLfloat arg0) {
    _pre_call_gl_callback("glPassThrough", (GLADapiproc) glPassThrough, 1, arg0);
    glPassThrough(arg0);
    _post_call_gl_callback(NULL, "glPassThrough", (GLADapiproc) glPassThrough, 1, arg0);
    
}
PFNGLPASSTHROUGHPROC glad_debug_glPassThrough = glad_debug_impl_glPassThrough;
PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glPatchParameterfv(GLenum arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glPatchParameterfv", (GLADapiproc) glPatchParameterfv, 2, arg0, arg1);
    glPatchParameterfv(arg0, arg1);
    _post_call_gl_callback(NULL, "glPatchParameterfv", (GLADapiproc) glPatchParameterfv, 2, arg0, arg1);
    
}
PFNGLPATCHPARAMETERFVPROC glad_debug_glPatchParameterfv = glad_debug_impl_glPatchParameterfv;
PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glPatchParameteri(GLenum arg0, GLint arg1) {
    _pre_call_gl_callback("glPatchParameteri", (GLADapiproc) glPatchParameteri, 2, arg0, arg1);
    glPatchParameteri(arg0, arg1);
    _post_call_gl_callback(NULL, "glPatchParameteri", (GLADapiproc) glPatchParameteri, 2, arg0, arg1);
    
}
PFNGLPATCHPARAMETERIPROC glad_debug_glPatchParameteri = glad_debug_impl_glPatchParameteri;
PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glPauseTransformFeedback(void) {
    _pre_call_gl_callback("glPauseTransformFeedback", (GLADapiproc) glPauseTransformFeedback, 0);
    glPauseTransformFeedback();
    _post_call_gl_callback(NULL, "glPauseTransformFeedback", (GLADapiproc) glPauseTransformFeedback, 0);
    
}
PFNGLPAUSETRANSFORMFEEDBACKPROC glad_debug_glPauseTransformFeedback = glad_debug_impl_glPauseTransformFeedback;
PFNGLPIXELMAPFVPROC glad_glPixelMapfv = NULL;
void GLAD_API_PTR glad_debug_impl_glPixelMapfv(GLenum arg0, GLsizei arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glPixelMapfv", (GLADapiproc) glPixelMapfv, 3, arg0, arg1, arg2);
    glPixelMapfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glPixelMapfv", (GLADapiproc) glPixelMapfv, 3, arg0, arg1, arg2);
    
}
PFNGLPIXELMAPFVPROC glad_debug_glPixelMapfv = glad_debug_impl_glPixelMapfv;
PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glPixelMapuiv(GLenum arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glPixelMapuiv", (GLADapiproc) glPixelMapuiv, 3, arg0, arg1, arg2);
    glPixelMapuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glPixelMapuiv", (GLADapiproc) glPixelMapuiv, 3, arg0, arg1, arg2);
    
}
PFNGLPIXELMAPUIVPROC glad_debug_glPixelMapuiv = glad_debug_impl_glPixelMapuiv;
PFNGLPIXELMAPUSVPROC glad_glPixelMapusv = NULL;
void GLAD_API_PTR glad_debug_impl_glPixelMapusv(GLenum arg0, GLsizei arg1, const GLushort * arg2) {
    _pre_call_gl_callback("glPixelMapusv", (GLADapiproc) glPixelMapusv, 3, arg0, arg1, arg2);
    glPixelMapusv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glPixelMapusv", (GLADapiproc) glPixelMapusv, 3, arg0, arg1, arg2);
    
}
PFNGLPIXELMAPUSVPROC glad_debug_glPixelMapusv = glad_debug_impl_glPixelMapusv;
PFNGLPIXELSTOREFPROC glad_glPixelStoref = NULL;
void GLAD_API_PTR glad_debug_impl_glPixelStoref(GLenum arg0, GLfloat arg1) {
    _pre_call_gl_callback("glPixelStoref", (GLADapiproc) glPixelStoref, 2, arg0, arg1);
    glPixelStoref(arg0, arg1);
    _post_call_gl_callback(NULL, "glPixelStoref", (GLADapiproc) glPixelStoref, 2, arg0, arg1);
    
}
PFNGLPIXELSTOREFPROC glad_debug_glPixelStoref = glad_debug_impl_glPixelStoref;
PFNGLPIXELSTOREIPROC glad_glPixelStorei = NULL;
void GLAD_API_PTR glad_debug_impl_glPixelStorei(GLenum arg0, GLint arg1) {
    _pre_call_gl_callback("glPixelStorei", (GLADapiproc) glPixelStorei, 2, arg0, arg1);
    glPixelStorei(arg0, arg1);
    _post_call_gl_callback(NULL, "glPixelStorei", (GLADapiproc) glPixelStorei, 2, arg0, arg1);
    
}
PFNGLPIXELSTOREIPROC glad_debug_glPixelStorei = glad_debug_impl_glPixelStorei;
PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf = NULL;
void GLAD_API_PTR glad_debug_impl_glPixelTransferf(GLenum arg0, GLfloat arg1) {
    _pre_call_gl_callback("glPixelTransferf", (GLADapiproc) glPixelTransferf, 2, arg0, arg1);
    glPixelTransferf(arg0, arg1);
    _post_call_gl_callback(NULL, "glPixelTransferf", (GLADapiproc) glPixelTransferf, 2, arg0, arg1);
    
}
PFNGLPIXELTRANSFERFPROC glad_debug_glPixelTransferf = glad_debug_impl_glPixelTransferf;
PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi = NULL;
void GLAD_API_PTR glad_debug_impl_glPixelTransferi(GLenum arg0, GLint arg1) {
    _pre_call_gl_callback("glPixelTransferi", (GLADapiproc) glPixelTransferi, 2, arg0, arg1);
    glPixelTransferi(arg0, arg1);
    _post_call_gl_callback(NULL, "glPixelTransferi", (GLADapiproc) glPixelTransferi, 2, arg0, arg1);
    
}
PFNGLPIXELTRANSFERIPROC glad_debug_glPixelTransferi = glad_debug_impl_glPixelTransferi;
PFNGLPIXELZOOMPROC glad_glPixelZoom = NULL;
void GLAD_API_PTR glad_debug_impl_glPixelZoom(GLfloat arg0, GLfloat arg1) {
    _pre_call_gl_callback("glPixelZoom", (GLADapiproc) glPixelZoom, 2, arg0, arg1);
    glPixelZoom(arg0, arg1);
    _post_call_gl_callback(NULL, "glPixelZoom", (GLADapiproc) glPixelZoom, 2, arg0, arg1);
    
}
PFNGLPIXELZOOMPROC glad_debug_glPixelZoom = glad_debug_impl_glPixelZoom;
PFNGLPOINTPARAMETERFPROC glad_glPointParameterf = NULL;
void GLAD_API_PTR glad_debug_impl_glPointParameterf(GLenum arg0, GLfloat arg1) {
    _pre_call_gl_callback("glPointParameterf", (GLADapiproc) glPointParameterf, 2, arg0, arg1);
    glPointParameterf(arg0, arg1);
    _post_call_gl_callback(NULL, "glPointParameterf", (GLADapiproc) glPointParameterf, 2, arg0, arg1);
    
}
PFNGLPOINTPARAMETERFPROC glad_debug_glPointParameterf = glad_debug_impl_glPointParameterf;
PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glPointParameterfv(GLenum arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glPointParameterfv", (GLADapiproc) glPointParameterfv, 2, arg0, arg1);
    glPointParameterfv(arg0, arg1);
    _post_call_gl_callback(NULL, "glPointParameterfv", (GLADapiproc) glPointParameterfv, 2, arg0, arg1);
    
}
PFNGLPOINTPARAMETERFVPROC glad_debug_glPointParameterfv = glad_debug_impl_glPointParameterfv;
PFNGLPOINTPARAMETERIPROC glad_glPointParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glPointParameteri(GLenum arg0, GLint arg1) {
    _pre_call_gl_callback("glPointParameteri", (GLADapiproc) glPointParameteri, 2, arg0, arg1);
    glPointParameteri(arg0, arg1);
    _post_call_gl_callback(NULL, "glPointParameteri", (GLADapiproc) glPointParameteri, 2, arg0, arg1);
    
}
PFNGLPOINTPARAMETERIPROC glad_debug_glPointParameteri = glad_debug_impl_glPointParameteri;
PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glPointParameteriv(GLenum arg0, const GLint * arg1) {
    _pre_call_gl_callback("glPointParameteriv", (GLADapiproc) glPointParameteriv, 2, arg0, arg1);
    glPointParameteriv(arg0, arg1);
    _post_call_gl_callback(NULL, "glPointParameteriv", (GLADapiproc) glPointParameteriv, 2, arg0, arg1);
    
}
PFNGLPOINTPARAMETERIVPROC glad_debug_glPointParameteriv = glad_debug_impl_glPointParameteriv;
PFNGLPOINTSIZEPROC glad_glPointSize = NULL;
void GLAD_API_PTR glad_debug_impl_glPointSize(GLfloat arg0) {
    _pre_call_gl_callback("glPointSize", (GLADapiproc) glPointSize, 1, arg0);
    glPointSize(arg0);
    _post_call_gl_callback(NULL, "glPointSize", (GLADapiproc) glPointSize, 1, arg0);
    
}
PFNGLPOINTSIZEPROC glad_debug_glPointSize = glad_debug_impl_glPointSize;
PFNGLPOLYGONMODEPROC glad_glPolygonMode = NULL;
void GLAD_API_PTR glad_debug_impl_glPolygonMode(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glPolygonMode", (GLADapiproc) glPolygonMode, 2, arg0, arg1);
    glPolygonMode(arg0, arg1);
    _post_call_gl_callback(NULL, "glPolygonMode", (GLADapiproc) glPolygonMode, 2, arg0, arg1);
    
}
PFNGLPOLYGONMODEPROC glad_debug_glPolygonMode = glad_debug_impl_glPolygonMode;
PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset = NULL;
void GLAD_API_PTR glad_debug_impl_glPolygonOffset(GLfloat arg0, GLfloat arg1) {
    _pre_call_gl_callback("glPolygonOffset", (GLADapiproc) glPolygonOffset, 2, arg0, arg1);
    glPolygonOffset(arg0, arg1);
    _post_call_gl_callback(NULL, "glPolygonOffset", (GLADapiproc) glPolygonOffset, 2, arg0, arg1);
    
}
PFNGLPOLYGONOFFSETPROC glad_debug_glPolygonOffset = glad_debug_impl_glPolygonOffset;
PFNGLPOLYGONOFFSETCLAMPPROC glad_glPolygonOffsetClamp = NULL;
void GLAD_API_PTR glad_debug_impl_glPolygonOffsetClamp(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glPolygonOffsetClamp", (GLADapiproc) glPolygonOffsetClamp, 3, arg0, arg1, arg2);
    glPolygonOffsetClamp(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glPolygonOffsetClamp", (GLADapiproc) glPolygonOffsetClamp, 3, arg0, arg1, arg2);
    
}
PFNGLPOLYGONOFFSETCLAMPPROC glad_debug_glPolygonOffsetClamp = glad_debug_impl_glPolygonOffsetClamp;
PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple = NULL;
void GLAD_API_PTR glad_debug_impl_glPolygonStipple(const GLubyte * arg0) {
    _pre_call_gl_callback("glPolygonStipple", (GLADapiproc) glPolygonStipple, 1, arg0);
    glPolygonStipple(arg0);
    _post_call_gl_callback(NULL, "glPolygonStipple", (GLADapiproc) glPolygonStipple, 1, arg0);
    
}
PFNGLPOLYGONSTIPPLEPROC glad_debug_glPolygonStipple = glad_debug_impl_glPolygonStipple;
PFNGLPOPATTRIBPROC glad_glPopAttrib = NULL;
void GLAD_API_PTR glad_debug_impl_glPopAttrib(void) {
    _pre_call_gl_callback("glPopAttrib", (GLADapiproc) glPopAttrib, 0);
    glPopAttrib();
    _post_call_gl_callback(NULL, "glPopAttrib", (GLADapiproc) glPopAttrib, 0);
    
}
PFNGLPOPATTRIBPROC glad_debug_glPopAttrib = glad_debug_impl_glPopAttrib;
PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib = NULL;
void GLAD_API_PTR glad_debug_impl_glPopClientAttrib(void) {
    _pre_call_gl_callback("glPopClientAttrib", (GLADapiproc) glPopClientAttrib, 0);
    glPopClientAttrib();
    _post_call_gl_callback(NULL, "glPopClientAttrib", (GLADapiproc) glPopClientAttrib, 0);
    
}
PFNGLPOPCLIENTATTRIBPROC glad_debug_glPopClientAttrib = glad_debug_impl_glPopClientAttrib;
PFNGLPOPDEBUGGROUPPROC glad_glPopDebugGroup = NULL;
void GLAD_API_PTR glad_debug_impl_glPopDebugGroup(void) {
    _pre_call_gl_callback("glPopDebugGroup", (GLADapiproc) glPopDebugGroup, 0);
    glPopDebugGroup();
    _post_call_gl_callback(NULL, "glPopDebugGroup", (GLADapiproc) glPopDebugGroup, 0);
    
}
PFNGLPOPDEBUGGROUPPROC glad_debug_glPopDebugGroup = glad_debug_impl_glPopDebugGroup;
PFNGLPOPMATRIXPROC glad_glPopMatrix = NULL;
void GLAD_API_PTR glad_debug_impl_glPopMatrix(void) {
    _pre_call_gl_callback("glPopMatrix", (GLADapiproc) glPopMatrix, 0);
    glPopMatrix();
    _post_call_gl_callback(NULL, "glPopMatrix", (GLADapiproc) glPopMatrix, 0);
    
}
PFNGLPOPMATRIXPROC glad_debug_glPopMatrix = glad_debug_impl_glPopMatrix;
PFNGLPOPNAMEPROC glad_glPopName = NULL;
void GLAD_API_PTR glad_debug_impl_glPopName(void) {
    _pre_call_gl_callback("glPopName", (GLADapiproc) glPopName, 0);
    glPopName();
    _post_call_gl_callback(NULL, "glPopName", (GLADapiproc) glPopName, 0);
    
}
PFNGLPOPNAMEPROC glad_debug_glPopName = glad_debug_impl_glPopName;
PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex = NULL;
void GLAD_API_PTR glad_debug_impl_glPrimitiveRestartIndex(GLuint arg0) {
    _pre_call_gl_callback("glPrimitiveRestartIndex", (GLADapiproc) glPrimitiveRestartIndex, 1, arg0);
    glPrimitiveRestartIndex(arg0);
    _post_call_gl_callback(NULL, "glPrimitiveRestartIndex", (GLADapiproc) glPrimitiveRestartIndex, 1, arg0);
    
}
PFNGLPRIMITIVERESTARTINDEXPROC glad_debug_glPrimitiveRestartIndex = glad_debug_impl_glPrimitiveRestartIndex;
PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures = NULL;
void GLAD_API_PTR glad_debug_impl_glPrioritizeTextures(GLsizei arg0, const GLuint * arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glPrioritizeTextures", (GLADapiproc) glPrioritizeTextures, 3, arg0, arg1, arg2);
    glPrioritizeTextures(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glPrioritizeTextures", (GLADapiproc) glPrioritizeTextures, 3, arg0, arg1, arg2);
    
}
PFNGLPRIORITIZETEXTURESPROC glad_debug_glPrioritizeTextures = glad_debug_impl_glPrioritizeTextures;
PFNGLPROGRAMBINARYPROC glad_glProgramBinary = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramBinary(GLuint arg0, GLenum arg1, const void * arg2, GLsizei arg3) {
    _pre_call_gl_callback("glProgramBinary", (GLADapiproc) glProgramBinary, 4, arg0, arg1, arg2, arg3);
    glProgramBinary(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramBinary", (GLADapiproc) glProgramBinary, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMBINARYPROC glad_debug_glProgramBinary = glad_debug_impl_glProgramBinary;
PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramParameteri(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glProgramParameteri", (GLADapiproc) glProgramParameteri, 3, arg0, arg1, arg2);
    glProgramParameteri(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glProgramParameteri", (GLADapiproc) glProgramParameteri, 3, arg0, arg1, arg2);
    
}
PFNGLPROGRAMPARAMETERIPROC glad_debug_glProgramParameteri = glad_debug_impl_glProgramParameteri;
PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1d(GLuint arg0, GLint arg1, GLdouble arg2) {
    _pre_call_gl_callback("glProgramUniform1d", (GLADapiproc) glProgramUniform1d, 3, arg0, arg1, arg2);
    glProgramUniform1d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glProgramUniform1d", (GLADapiproc) glProgramUniform1d, 3, arg0, arg1, arg2);
    
}
PFNGLPROGRAMUNIFORM1DPROC glad_debug_glProgramUniform1d = glad_debug_impl_glProgramUniform1d;
PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glProgramUniform1dv", (GLADapiproc) glProgramUniform1dv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform1dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform1dv", (GLADapiproc) glProgramUniform1dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM1DVPROC glad_debug_glProgramUniform1dv = glad_debug_impl_glProgramUniform1dv;
PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1f(GLuint arg0, GLint arg1, GLfloat arg2) {
    _pre_call_gl_callback("glProgramUniform1f", (GLADapiproc) glProgramUniform1f, 3, arg0, arg1, arg2);
    glProgramUniform1f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glProgramUniform1f", (GLADapiproc) glProgramUniform1f, 3, arg0, arg1, arg2);
    
}
PFNGLPROGRAMUNIFORM1FPROC glad_debug_glProgramUniform1f = glad_debug_impl_glProgramUniform1f;
PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glProgramUniform1fv", (GLADapiproc) glProgramUniform1fv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform1fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform1fv", (GLADapiproc) glProgramUniform1fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM1FVPROC glad_debug_glProgramUniform1fv = glad_debug_impl_glProgramUniform1fv;
PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1i(GLuint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glProgramUniform1i", (GLADapiproc) glProgramUniform1i, 3, arg0, arg1, arg2);
    glProgramUniform1i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glProgramUniform1i", (GLADapiproc) glProgramUniform1i, 3, arg0, arg1, arg2);
    
}
PFNGLPROGRAMUNIFORM1IPROC glad_debug_glProgramUniform1i = glad_debug_impl_glProgramUniform1i;
PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint * arg3) {
    _pre_call_gl_callback("glProgramUniform1iv", (GLADapiproc) glProgramUniform1iv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform1iv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform1iv", (GLADapiproc) glProgramUniform1iv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM1IVPROC glad_debug_glProgramUniform1iv = glad_debug_impl_glProgramUniform1iv;
PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1ui(GLuint arg0, GLint arg1, GLuint arg2) {
    _pre_call_gl_callback("glProgramUniform1ui", (GLADapiproc) glProgramUniform1ui, 3, arg0, arg1, arg2);
    glProgramUniform1ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glProgramUniform1ui", (GLADapiproc) glProgramUniform1ui, 3, arg0, arg1, arg2);
    
}
PFNGLPROGRAMUNIFORM1UIPROC glad_debug_glProgramUniform1ui = glad_debug_impl_glProgramUniform1ui;
PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glProgramUniform1uiv", (GLADapiproc) glProgramUniform1uiv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform1uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform1uiv", (GLADapiproc) glProgramUniform1uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM1UIVPROC glad_debug_glProgramUniform1uiv = glad_debug_impl_glProgramUniform1uiv;
PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2d(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glProgramUniform2d", (GLADapiproc) glProgramUniform2d, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2d", (GLADapiproc) glProgramUniform2d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2DPROC glad_debug_glProgramUniform2d = glad_debug_impl_glProgramUniform2d;
PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glProgramUniform2dv", (GLADapiproc) glProgramUniform2dv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2dv", (GLADapiproc) glProgramUniform2dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2DVPROC glad_debug_glProgramUniform2dv = glad_debug_impl_glProgramUniform2dv;
PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2f(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glProgramUniform2f", (GLADapiproc) glProgramUniform2f, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2f(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2f", (GLADapiproc) glProgramUniform2f, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2FPROC glad_debug_glProgramUniform2f = glad_debug_impl_glProgramUniform2f;
PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glProgramUniform2fv", (GLADapiproc) glProgramUniform2fv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2fv", (GLADapiproc) glProgramUniform2fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2FVPROC glad_debug_glProgramUniform2fv = glad_debug_impl_glProgramUniform2fv;
PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glProgramUniform2i", (GLADapiproc) glProgramUniform2i, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2i(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2i", (GLADapiproc) glProgramUniform2i, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2IPROC glad_debug_glProgramUniform2i = glad_debug_impl_glProgramUniform2i;
PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint * arg3) {
    _pre_call_gl_callback("glProgramUniform2iv", (GLADapiproc) glProgramUniform2iv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2iv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2iv", (GLADapiproc) glProgramUniform2iv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2IVPROC glad_debug_glProgramUniform2iv = glad_debug_impl_glProgramUniform2iv;
PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2ui(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_gl_callback("glProgramUniform2ui", (GLADapiproc) glProgramUniform2ui, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2ui", (GLADapiproc) glProgramUniform2ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2UIPROC glad_debug_glProgramUniform2ui = glad_debug_impl_glProgramUniform2ui;
PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glProgramUniform2uiv", (GLADapiproc) glProgramUniform2uiv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2uiv", (GLADapiproc) glProgramUniform2uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2UIVPROC glad_debug_glProgramUniform2uiv = glad_debug_impl_glProgramUniform2uiv;
PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3d(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_gl_callback("glProgramUniform3d", (GLADapiproc) glProgramUniform3d, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniform3d(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniform3d", (GLADapiproc) glProgramUniform3d, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORM3DPROC glad_debug_glProgramUniform3d = glad_debug_impl_glProgramUniform3d;
PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glProgramUniform3dv", (GLADapiproc) glProgramUniform3dv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform3dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform3dv", (GLADapiproc) glProgramUniform3dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM3DVPROC glad_debug_glProgramUniform3dv = glad_debug_impl_glProgramUniform3dv;
PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3f(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_gl_callback("glProgramUniform3f", (GLADapiproc) glProgramUniform3f, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniform3f(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniform3f", (GLADapiproc) glProgramUniform3f, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORM3FPROC glad_debug_glProgramUniform3f = glad_debug_impl_glProgramUniform3f;
PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glProgramUniform3fv", (GLADapiproc) glProgramUniform3fv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform3fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform3fv", (GLADapiproc) glProgramUniform3fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM3FVPROC glad_debug_glProgramUniform3fv = glad_debug_impl_glProgramUniform3fv;
PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_gl_callback("glProgramUniform3i", (GLADapiproc) glProgramUniform3i, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniform3i(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniform3i", (GLADapiproc) glProgramUniform3i, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORM3IPROC glad_debug_glProgramUniform3i = glad_debug_impl_glProgramUniform3i;
PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint * arg3) {
    _pre_call_gl_callback("glProgramUniform3iv", (GLADapiproc) glProgramUniform3iv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform3iv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform3iv", (GLADapiproc) glProgramUniform3iv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM3IVPROC glad_debug_glProgramUniform3iv = glad_debug_impl_glProgramUniform3iv;
PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3ui(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_gl_callback("glProgramUniform3ui", (GLADapiproc) glProgramUniform3ui, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniform3ui(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniform3ui", (GLADapiproc) glProgramUniform3ui, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORM3UIPROC glad_debug_glProgramUniform3ui = glad_debug_impl_glProgramUniform3ui;
PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glProgramUniform3uiv", (GLADapiproc) glProgramUniform3uiv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform3uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform3uiv", (GLADapiproc) glProgramUniform3uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM3UIVPROC glad_debug_glProgramUniform3uiv = glad_debug_impl_glProgramUniform3uiv;
PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4d(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5) {
    _pre_call_gl_callback("glProgramUniform4d", (GLADapiproc) glProgramUniform4d, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glProgramUniform4d(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glProgramUniform4d", (GLADapiproc) glProgramUniform4d, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLPROGRAMUNIFORM4DPROC glad_debug_glProgramUniform4d = glad_debug_impl_glProgramUniform4d;
PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glProgramUniform4dv", (GLADapiproc) glProgramUniform4dv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform4dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform4dv", (GLADapiproc) glProgramUniform4dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM4DVPROC glad_debug_glProgramUniform4dv = glad_debug_impl_glProgramUniform4dv;
PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4f(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_gl_callback("glProgramUniform4f", (GLADapiproc) glProgramUniform4f, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glProgramUniform4f(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glProgramUniform4f", (GLADapiproc) glProgramUniform4f, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLPROGRAMUNIFORM4FPROC glad_debug_glProgramUniform4f = glad_debug_impl_glProgramUniform4f;
PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glProgramUniform4fv", (GLADapiproc) glProgramUniform4fv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform4fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform4fv", (GLADapiproc) glProgramUniform4fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM4FVPROC glad_debug_glProgramUniform4fv = glad_debug_impl_glProgramUniform4fv;
PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5) {
    _pre_call_gl_callback("glProgramUniform4i", (GLADapiproc) glProgramUniform4i, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glProgramUniform4i(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glProgramUniform4i", (GLADapiproc) glProgramUniform4i, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLPROGRAMUNIFORM4IPROC glad_debug_glProgramUniform4i = glad_debug_impl_glProgramUniform4i;
PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint * arg3) {
    _pre_call_gl_callback("glProgramUniform4iv", (GLADapiproc) glProgramUniform4iv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform4iv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform4iv", (GLADapiproc) glProgramUniform4iv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM4IVPROC glad_debug_glProgramUniform4iv = glad_debug_impl_glProgramUniform4iv;
PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4ui(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5) {
    _pre_call_gl_callback("glProgramUniform4ui", (GLADapiproc) glProgramUniform4ui, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glProgramUniform4ui(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glProgramUniform4ui", (GLADapiproc) glProgramUniform4ui, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLPROGRAMUNIFORM4UIPROC glad_debug_glProgramUniform4ui = glad_debug_impl_glProgramUniform4ui;
PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glProgramUniform4uiv", (GLADapiproc) glProgramUniform4uiv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform4uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform4uiv", (GLADapiproc) glProgramUniform4uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM4UIVPROC glad_debug_glProgramUniform4uiv = glad_debug_impl_glProgramUniform4uiv;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2dv", (GLADapiproc) glProgramUniformMatrix2dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2dv", (GLADapiproc) glProgramUniformMatrix2dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_debug_glProgramUniformMatrix2dv = glad_debug_impl_glProgramUniformMatrix2dv;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2fv", (GLADapiproc) glProgramUniformMatrix2fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2fv", (GLADapiproc) glProgramUniformMatrix2fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_debug_glProgramUniformMatrix2fv = glad_debug_impl_glProgramUniformMatrix2fv;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2x3dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2x3dv", (GLADapiproc) glProgramUniformMatrix2x3dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2x3dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2x3dv", (GLADapiproc) glProgramUniformMatrix2x3dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_debug_glProgramUniformMatrix2x3dv = glad_debug_impl_glProgramUniformMatrix2x3dv;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2x3fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2x3fv", (GLADapiproc) glProgramUniformMatrix2x3fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2x3fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2x3fv", (GLADapiproc) glProgramUniformMatrix2x3fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_debug_glProgramUniformMatrix2x3fv = glad_debug_impl_glProgramUniformMatrix2x3fv;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2x4dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2x4dv", (GLADapiproc) glProgramUniformMatrix2x4dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2x4dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2x4dv", (GLADapiproc) glProgramUniformMatrix2x4dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_debug_glProgramUniformMatrix2x4dv = glad_debug_impl_glProgramUniformMatrix2x4dv;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2x4fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2x4fv", (GLADapiproc) glProgramUniformMatrix2x4fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2x4fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2x4fv", (GLADapiproc) glProgramUniformMatrix2x4fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_debug_glProgramUniformMatrix2x4fv = glad_debug_impl_glProgramUniformMatrix2x4fv;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3dv", (GLADapiproc) glProgramUniformMatrix3dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3dv", (GLADapiproc) glProgramUniformMatrix3dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_debug_glProgramUniformMatrix3dv = glad_debug_impl_glProgramUniformMatrix3dv;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3fv", (GLADapiproc) glProgramUniformMatrix3fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3fv", (GLADapiproc) glProgramUniformMatrix3fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_debug_glProgramUniformMatrix3fv = glad_debug_impl_glProgramUniformMatrix3fv;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3x2dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3x2dv", (GLADapiproc) glProgramUniformMatrix3x2dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3x2dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3x2dv", (GLADapiproc) glProgramUniformMatrix3x2dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_debug_glProgramUniformMatrix3x2dv = glad_debug_impl_glProgramUniformMatrix3x2dv;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3x2fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3x2fv", (GLADapiproc) glProgramUniformMatrix3x2fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3x2fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3x2fv", (GLADapiproc) glProgramUniformMatrix3x2fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_debug_glProgramUniformMatrix3x2fv = glad_debug_impl_glProgramUniformMatrix3x2fv;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3x4dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3x4dv", (GLADapiproc) glProgramUniformMatrix3x4dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3x4dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3x4dv", (GLADapiproc) glProgramUniformMatrix3x4dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_debug_glProgramUniformMatrix3x4dv = glad_debug_impl_glProgramUniformMatrix3x4dv;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3x4fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3x4fv", (GLADapiproc) glProgramUniformMatrix3x4fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3x4fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3x4fv", (GLADapiproc) glProgramUniformMatrix3x4fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_debug_glProgramUniformMatrix3x4fv = glad_debug_impl_glProgramUniformMatrix3x4fv;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4dv", (GLADapiproc) glProgramUniformMatrix4dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4dv", (GLADapiproc) glProgramUniformMatrix4dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_debug_glProgramUniformMatrix4dv = glad_debug_impl_glProgramUniformMatrix4dv;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4fv", (GLADapiproc) glProgramUniformMatrix4fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4fv", (GLADapiproc) glProgramUniformMatrix4fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_debug_glProgramUniformMatrix4fv = glad_debug_impl_glProgramUniformMatrix4fv;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4x2dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4x2dv", (GLADapiproc) glProgramUniformMatrix4x2dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4x2dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4x2dv", (GLADapiproc) glProgramUniformMatrix4x2dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_debug_glProgramUniformMatrix4x2dv = glad_debug_impl_glProgramUniformMatrix4x2dv;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4x2fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4x2fv", (GLADapiproc) glProgramUniformMatrix4x2fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4x2fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4x2fv", (GLADapiproc) glProgramUniformMatrix4x2fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_debug_glProgramUniformMatrix4x2fv = glad_debug_impl_glProgramUniformMatrix4x2fv;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4x3dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4x3dv", (GLADapiproc) glProgramUniformMatrix4x3dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4x3dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4x3dv", (GLADapiproc) glProgramUniformMatrix4x3dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_debug_glProgramUniformMatrix4x3dv = glad_debug_impl_glProgramUniformMatrix4x3dv;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4x3fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4x3fv", (GLADapiproc) glProgramUniformMatrix4x3fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4x3fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4x3fv", (GLADapiproc) glProgramUniformMatrix4x3fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_debug_glProgramUniformMatrix4x3fv = glad_debug_impl_glProgramUniformMatrix4x3fv;
PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex = NULL;
void GLAD_API_PTR glad_debug_impl_glProvokingVertex(GLenum arg0) {
    _pre_call_gl_callback("glProvokingVertex", (GLADapiproc) glProvokingVertex, 1, arg0);
    glProvokingVertex(arg0);
    _post_call_gl_callback(NULL, "glProvokingVertex", (GLADapiproc) glProvokingVertex, 1, arg0);
    
}
PFNGLPROVOKINGVERTEXPROC glad_debug_glProvokingVertex = glad_debug_impl_glProvokingVertex;
PFNGLPUSHATTRIBPROC glad_glPushAttrib = NULL;
void GLAD_API_PTR glad_debug_impl_glPushAttrib(GLbitfield arg0) {
    _pre_call_gl_callback("glPushAttrib", (GLADapiproc) glPushAttrib, 1, arg0);
    glPushAttrib(arg0);
    _post_call_gl_callback(NULL, "glPushAttrib", (GLADapiproc) glPushAttrib, 1, arg0);
    
}
PFNGLPUSHATTRIBPROC glad_debug_glPushAttrib = glad_debug_impl_glPushAttrib;
PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib = NULL;
void GLAD_API_PTR glad_debug_impl_glPushClientAttrib(GLbitfield arg0) {
    _pre_call_gl_callback("glPushClientAttrib", (GLADapiproc) glPushClientAttrib, 1, arg0);
    glPushClientAttrib(arg0);
    _post_call_gl_callback(NULL, "glPushClientAttrib", (GLADapiproc) glPushClientAttrib, 1, arg0);
    
}
PFNGLPUSHCLIENTATTRIBPROC glad_debug_glPushClientAttrib = glad_debug_impl_glPushClientAttrib;
PFNGLPUSHDEBUGGROUPPROC glad_glPushDebugGroup = NULL;
void GLAD_API_PTR glad_debug_impl_glPushDebugGroup(GLenum arg0, GLuint arg1, GLsizei arg2, const GLchar * arg3) {
    _pre_call_gl_callback("glPushDebugGroup", (GLADapiproc) glPushDebugGroup, 4, arg0, arg1, arg2, arg3);
    glPushDebugGroup(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glPushDebugGroup", (GLADapiproc) glPushDebugGroup, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPUSHDEBUGGROUPPROC glad_debug_glPushDebugGroup = glad_debug_impl_glPushDebugGroup;
PFNGLPUSHMATRIXPROC glad_glPushMatrix = NULL;
void GLAD_API_PTR glad_debug_impl_glPushMatrix(void) {
    _pre_call_gl_callback("glPushMatrix", (GLADapiproc) glPushMatrix, 0);
    glPushMatrix();
    _post_call_gl_callback(NULL, "glPushMatrix", (GLADapiproc) glPushMatrix, 0);
    
}
PFNGLPUSHMATRIXPROC glad_debug_glPushMatrix = glad_debug_impl_glPushMatrix;
PFNGLPUSHNAMEPROC glad_glPushName = NULL;
void GLAD_API_PTR glad_debug_impl_glPushName(GLuint arg0) {
    _pre_call_gl_callback("glPushName", (GLADapiproc) glPushName, 1, arg0);
    glPushName(arg0);
    _post_call_gl_callback(NULL, "glPushName", (GLADapiproc) glPushName, 1, arg0);
    
}
PFNGLPUSHNAMEPROC glad_debug_glPushName = glad_debug_impl_glPushName;
PFNGLQUERYCOUNTERPROC glad_glQueryCounter = NULL;
void GLAD_API_PTR glad_debug_impl_glQueryCounter(GLuint arg0, GLenum arg1) {
    _pre_call_gl_callback("glQueryCounter", (GLADapiproc) glQueryCounter, 2, arg0, arg1);
    glQueryCounter(arg0, arg1);
    _post_call_gl_callback(NULL, "glQueryCounter", (GLADapiproc) glQueryCounter, 2, arg0, arg1);
    
}
PFNGLQUERYCOUNTERPROC glad_debug_glQueryCounter = glad_debug_impl_glQueryCounter;
PFNGLRASTERPOS2DPROC glad_glRasterPos2d = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos2d(GLdouble arg0, GLdouble arg1) {
    _pre_call_gl_callback("glRasterPos2d", (GLADapiproc) glRasterPos2d, 2, arg0, arg1);
    glRasterPos2d(arg0, arg1);
    _post_call_gl_callback(NULL, "glRasterPos2d", (GLADapiproc) glRasterPos2d, 2, arg0, arg1);
    
}
PFNGLRASTERPOS2DPROC glad_debug_glRasterPos2d = glad_debug_impl_glRasterPos2d;
PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos2dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glRasterPos2dv", (GLADapiproc) glRasterPos2dv, 1, arg0);
    glRasterPos2dv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos2dv", (GLADapiproc) glRasterPos2dv, 1, arg0);
    
}
PFNGLRASTERPOS2DVPROC glad_debug_glRasterPos2dv = glad_debug_impl_glRasterPos2dv;
PFNGLRASTERPOS2FPROC glad_glRasterPos2f = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos2f(GLfloat arg0, GLfloat arg1) {
    _pre_call_gl_callback("glRasterPos2f", (GLADapiproc) glRasterPos2f, 2, arg0, arg1);
    glRasterPos2f(arg0, arg1);
    _post_call_gl_callback(NULL, "glRasterPos2f", (GLADapiproc) glRasterPos2f, 2, arg0, arg1);
    
}
PFNGLRASTERPOS2FPROC glad_debug_glRasterPos2f = glad_debug_impl_glRasterPos2f;
PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos2fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glRasterPos2fv", (GLADapiproc) glRasterPos2fv, 1, arg0);
    glRasterPos2fv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos2fv", (GLADapiproc) glRasterPos2fv, 1, arg0);
    
}
PFNGLRASTERPOS2FVPROC glad_debug_glRasterPos2fv = glad_debug_impl_glRasterPos2fv;
PFNGLRASTERPOS2IPROC glad_glRasterPos2i = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos2i(GLint arg0, GLint arg1) {
    _pre_call_gl_callback("glRasterPos2i", (GLADapiproc) glRasterPos2i, 2, arg0, arg1);
    glRasterPos2i(arg0, arg1);
    _post_call_gl_callback(NULL, "glRasterPos2i", (GLADapiproc) glRasterPos2i, 2, arg0, arg1);
    
}
PFNGLRASTERPOS2IPROC glad_debug_glRasterPos2i = glad_debug_impl_glRasterPos2i;
PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos2iv(const GLint * arg0) {
    _pre_call_gl_callback("glRasterPos2iv", (GLADapiproc) glRasterPos2iv, 1, arg0);
    glRasterPos2iv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos2iv", (GLADapiproc) glRasterPos2iv, 1, arg0);
    
}
PFNGLRASTERPOS2IVPROC glad_debug_glRasterPos2iv = glad_debug_impl_glRasterPos2iv;
PFNGLRASTERPOS2SPROC glad_glRasterPos2s = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos2s(GLshort arg0, GLshort arg1) {
    _pre_call_gl_callback("glRasterPos2s", (GLADapiproc) glRasterPos2s, 2, arg0, arg1);
    glRasterPos2s(arg0, arg1);
    _post_call_gl_callback(NULL, "glRasterPos2s", (GLADapiproc) glRasterPos2s, 2, arg0, arg1);
    
}
PFNGLRASTERPOS2SPROC glad_debug_glRasterPos2s = glad_debug_impl_glRasterPos2s;
PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos2sv(const GLshort * arg0) {
    _pre_call_gl_callback("glRasterPos2sv", (GLADapiproc) glRasterPos2sv, 1, arg0);
    glRasterPos2sv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos2sv", (GLADapiproc) glRasterPos2sv, 1, arg0);
    
}
PFNGLRASTERPOS2SVPROC glad_debug_glRasterPos2sv = glad_debug_impl_glRasterPos2sv;
PFNGLRASTERPOS3DPROC glad_glRasterPos3d = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos3d(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glRasterPos3d", (GLADapiproc) glRasterPos3d, 3, arg0, arg1, arg2);
    glRasterPos3d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glRasterPos3d", (GLADapiproc) glRasterPos3d, 3, arg0, arg1, arg2);
    
}
PFNGLRASTERPOS3DPROC glad_debug_glRasterPos3d = glad_debug_impl_glRasterPos3d;
PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos3dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glRasterPos3dv", (GLADapiproc) glRasterPos3dv, 1, arg0);
    glRasterPos3dv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos3dv", (GLADapiproc) glRasterPos3dv, 1, arg0);
    
}
PFNGLRASTERPOS3DVPROC glad_debug_glRasterPos3dv = glad_debug_impl_glRasterPos3dv;
PFNGLRASTERPOS3FPROC glad_glRasterPos3f = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos3f(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glRasterPos3f", (GLADapiproc) glRasterPos3f, 3, arg0, arg1, arg2);
    glRasterPos3f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glRasterPos3f", (GLADapiproc) glRasterPos3f, 3, arg0, arg1, arg2);
    
}
PFNGLRASTERPOS3FPROC glad_debug_glRasterPos3f = glad_debug_impl_glRasterPos3f;
PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos3fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glRasterPos3fv", (GLADapiproc) glRasterPos3fv, 1, arg0);
    glRasterPos3fv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos3fv", (GLADapiproc) glRasterPos3fv, 1, arg0);
    
}
PFNGLRASTERPOS3FVPROC glad_debug_glRasterPos3fv = glad_debug_impl_glRasterPos3fv;
PFNGLRASTERPOS3IPROC glad_glRasterPos3i = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos3i(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glRasterPos3i", (GLADapiproc) glRasterPos3i, 3, arg0, arg1, arg2);
    glRasterPos3i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glRasterPos3i", (GLADapiproc) glRasterPos3i, 3, arg0, arg1, arg2);
    
}
PFNGLRASTERPOS3IPROC glad_debug_glRasterPos3i = glad_debug_impl_glRasterPos3i;
PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos3iv(const GLint * arg0) {
    _pre_call_gl_callback("glRasterPos3iv", (GLADapiproc) glRasterPos3iv, 1, arg0);
    glRasterPos3iv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos3iv", (GLADapiproc) glRasterPos3iv, 1, arg0);
    
}
PFNGLRASTERPOS3IVPROC glad_debug_glRasterPos3iv = glad_debug_impl_glRasterPos3iv;
PFNGLRASTERPOS3SPROC glad_glRasterPos3s = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos3s(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_gl_callback("glRasterPos3s", (GLADapiproc) glRasterPos3s, 3, arg0, arg1, arg2);
    glRasterPos3s(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glRasterPos3s", (GLADapiproc) glRasterPos3s, 3, arg0, arg1, arg2);
    
}
PFNGLRASTERPOS3SPROC glad_debug_glRasterPos3s = glad_debug_impl_glRasterPos3s;
PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos3sv(const GLshort * arg0) {
    _pre_call_gl_callback("glRasterPos3sv", (GLADapiproc) glRasterPos3sv, 1, arg0);
    glRasterPos3sv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos3sv", (GLADapiproc) glRasterPos3sv, 1, arg0);
    
}
PFNGLRASTERPOS3SVPROC glad_debug_glRasterPos3sv = glad_debug_impl_glRasterPos3sv;
PFNGLRASTERPOS4DPROC glad_glRasterPos4d = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos4d(GLdouble arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glRasterPos4d", (GLADapiproc) glRasterPos4d, 4, arg0, arg1, arg2, arg3);
    glRasterPos4d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRasterPos4d", (GLADapiproc) glRasterPos4d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLRASTERPOS4DPROC glad_debug_glRasterPos4d = glad_debug_impl_glRasterPos4d;
PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos4dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glRasterPos4dv", (GLADapiproc) glRasterPos4dv, 1, arg0);
    glRasterPos4dv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos4dv", (GLADapiproc) glRasterPos4dv, 1, arg0);
    
}
PFNGLRASTERPOS4DVPROC glad_debug_glRasterPos4dv = glad_debug_impl_glRasterPos4dv;
PFNGLRASTERPOS4FPROC glad_glRasterPos4f = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos4f(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glRasterPos4f", (GLADapiproc) glRasterPos4f, 4, arg0, arg1, arg2, arg3);
    glRasterPos4f(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRasterPos4f", (GLADapiproc) glRasterPos4f, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLRASTERPOS4FPROC glad_debug_glRasterPos4f = glad_debug_impl_glRasterPos4f;
PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos4fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glRasterPos4fv", (GLADapiproc) glRasterPos4fv, 1, arg0);
    glRasterPos4fv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos4fv", (GLADapiproc) glRasterPos4fv, 1, arg0);
    
}
PFNGLRASTERPOS4FVPROC glad_debug_glRasterPos4fv = glad_debug_impl_glRasterPos4fv;
PFNGLRASTERPOS4IPROC glad_glRasterPos4i = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos4i(GLint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glRasterPos4i", (GLADapiproc) glRasterPos4i, 4, arg0, arg1, arg2, arg3);
    glRasterPos4i(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRasterPos4i", (GLADapiproc) glRasterPos4i, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLRASTERPOS4IPROC glad_debug_glRasterPos4i = glad_debug_impl_glRasterPos4i;
PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos4iv(const GLint * arg0) {
    _pre_call_gl_callback("glRasterPos4iv", (GLADapiproc) glRasterPos4iv, 1, arg0);
    glRasterPos4iv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos4iv", (GLADapiproc) glRasterPos4iv, 1, arg0);
    
}
PFNGLRASTERPOS4IVPROC glad_debug_glRasterPos4iv = glad_debug_impl_glRasterPos4iv;
PFNGLRASTERPOS4SPROC glad_glRasterPos4s = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos4s(GLshort arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_gl_callback("glRasterPos4s", (GLADapiproc) glRasterPos4s, 4, arg0, arg1, arg2, arg3);
    glRasterPos4s(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRasterPos4s", (GLADapiproc) glRasterPos4s, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLRASTERPOS4SPROC glad_debug_glRasterPos4s = glad_debug_impl_glRasterPos4s;
PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv = NULL;
void GLAD_API_PTR glad_debug_impl_glRasterPos4sv(const GLshort * arg0) {
    _pre_call_gl_callback("glRasterPos4sv", (GLADapiproc) glRasterPos4sv, 1, arg0);
    glRasterPos4sv(arg0);
    _post_call_gl_callback(NULL, "glRasterPos4sv", (GLADapiproc) glRasterPos4sv, 1, arg0);
    
}
PFNGLRASTERPOS4SVPROC glad_debug_glRasterPos4sv = glad_debug_impl_glRasterPos4sv;
PFNGLREADBUFFERPROC glad_glReadBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glReadBuffer(GLenum arg0) {
    _pre_call_gl_callback("glReadBuffer", (GLADapiproc) glReadBuffer, 1, arg0);
    glReadBuffer(arg0);
    _post_call_gl_callback(NULL, "glReadBuffer", (GLADapiproc) glReadBuffer, 1, arg0);
    
}
PFNGLREADBUFFERPROC glad_debug_glReadBuffer = glad_debug_impl_glReadBuffer;
PFNGLREADPIXELSPROC glad_glReadPixels = NULL;
void GLAD_API_PTR glad_debug_impl_glReadPixels(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, void * arg6) {
    _pre_call_gl_callback("glReadPixels", (GLADapiproc) glReadPixels, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glReadPixels", (GLADapiproc) glReadPixels, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLREADPIXELSPROC glad_debug_glReadPixels = glad_debug_impl_glReadPixels;
PFNGLREADNPIXELSPROC glad_glReadnPixels = NULL;
void GLAD_API_PTR glad_debug_impl_glReadnPixels(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, GLsizei arg6, void * arg7) {
    _pre_call_gl_callback("glReadnPixels", (GLADapiproc) glReadnPixels, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glReadnPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glReadnPixels", (GLADapiproc) glReadnPixels, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLREADNPIXELSPROC glad_debug_glReadnPixels = glad_debug_impl_glReadnPixels;
PFNGLRECTDPROC glad_glRectd = NULL;
void GLAD_API_PTR glad_debug_impl_glRectd(GLdouble arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glRectd", (GLADapiproc) glRectd, 4, arg0, arg1, arg2, arg3);
    glRectd(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRectd", (GLADapiproc) glRectd, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLRECTDPROC glad_debug_glRectd = glad_debug_impl_glRectd;
PFNGLRECTDVPROC glad_glRectdv = NULL;
void GLAD_API_PTR glad_debug_impl_glRectdv(const GLdouble * arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glRectdv", (GLADapiproc) glRectdv, 2, arg0, arg1);
    glRectdv(arg0, arg1);
    _post_call_gl_callback(NULL, "glRectdv", (GLADapiproc) glRectdv, 2, arg0, arg1);
    
}
PFNGLRECTDVPROC glad_debug_glRectdv = glad_debug_impl_glRectdv;
PFNGLRECTFPROC glad_glRectf = NULL;
void GLAD_API_PTR glad_debug_impl_glRectf(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glRectf", (GLADapiproc) glRectf, 4, arg0, arg1, arg2, arg3);
    glRectf(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRectf", (GLADapiproc) glRectf, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLRECTFPROC glad_debug_glRectf = glad_debug_impl_glRectf;
PFNGLRECTFVPROC glad_glRectfv = NULL;
void GLAD_API_PTR glad_debug_impl_glRectfv(const GLfloat * arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glRectfv", (GLADapiproc) glRectfv, 2, arg0, arg1);
    glRectfv(arg0, arg1);
    _post_call_gl_callback(NULL, "glRectfv", (GLADapiproc) glRectfv, 2, arg0, arg1);
    
}
PFNGLRECTFVPROC glad_debug_glRectfv = glad_debug_impl_glRectfv;
PFNGLRECTIPROC glad_glRecti = NULL;
void GLAD_API_PTR glad_debug_impl_glRecti(GLint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glRecti", (GLADapiproc) glRecti, 4, arg0, arg1, arg2, arg3);
    glRecti(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRecti", (GLADapiproc) glRecti, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLRECTIPROC glad_debug_glRecti = glad_debug_impl_glRecti;
PFNGLRECTIVPROC glad_glRectiv = NULL;
void GLAD_API_PTR glad_debug_impl_glRectiv(const GLint * arg0, const GLint * arg1) {
    _pre_call_gl_callback("glRectiv", (GLADapiproc) glRectiv, 2, arg0, arg1);
    glRectiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glRectiv", (GLADapiproc) glRectiv, 2, arg0, arg1);
    
}
PFNGLRECTIVPROC glad_debug_glRectiv = glad_debug_impl_glRectiv;
PFNGLRECTSPROC glad_glRects = NULL;
void GLAD_API_PTR glad_debug_impl_glRects(GLshort arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_gl_callback("glRects", (GLADapiproc) glRects, 4, arg0, arg1, arg2, arg3);
    glRects(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRects", (GLADapiproc) glRects, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLRECTSPROC glad_debug_glRects = glad_debug_impl_glRects;
PFNGLRECTSVPROC glad_glRectsv = NULL;
void GLAD_API_PTR glad_debug_impl_glRectsv(const GLshort * arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glRectsv", (GLADapiproc) glRectsv, 2, arg0, arg1);
    glRectsv(arg0, arg1);
    _post_call_gl_callback(NULL, "glRectsv", (GLADapiproc) glRectsv, 2, arg0, arg1);
    
}
PFNGLRECTSVPROC glad_debug_glRectsv = glad_debug_impl_glRectsv;
PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler = NULL;
void GLAD_API_PTR glad_debug_impl_glReleaseShaderCompiler(void) {
    _pre_call_gl_callback("glReleaseShaderCompiler", (GLADapiproc) glReleaseShaderCompiler, 0);
    glReleaseShaderCompiler();
    _post_call_gl_callback(NULL, "glReleaseShaderCompiler", (GLADapiproc) glReleaseShaderCompiler, 0);
    
}
PFNGLRELEASESHADERCOMPILERPROC glad_debug_glReleaseShaderCompiler = glad_debug_impl_glReleaseShaderCompiler;
PFNGLRENDERMODEPROC glad_glRenderMode = NULL;
GLint GLAD_API_PTR glad_debug_impl_glRenderMode(GLenum arg0) {
    GLint ret;
    _pre_call_gl_callback("glRenderMode", (GLADapiproc) glRenderMode, 1, arg0);
    ret = glRenderMode(arg0);
    _post_call_gl_callback((void*) &ret, "glRenderMode", (GLADapiproc) glRenderMode, 1, arg0);
    return ret;
}
PFNGLRENDERMODEPROC glad_debug_glRenderMode = glad_debug_impl_glRenderMode;
PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage = NULL;
void GLAD_API_PTR glad_debug_impl_glRenderbufferStorage(GLenum arg0, GLenum arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_gl_callback("glRenderbufferStorage", (GLADapiproc) glRenderbufferStorage, 4, arg0, arg1, arg2, arg3);
    glRenderbufferStorage(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRenderbufferStorage", (GLADapiproc) glRenderbufferStorage, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLRENDERBUFFERSTORAGEPROC glad_debug_glRenderbufferStorage = glad_debug_impl_glRenderbufferStorage;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample = NULL;
void GLAD_API_PTR glad_debug_impl_glRenderbufferStorageMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_gl_callback("glRenderbufferStorageMultisample", (GLADapiproc) glRenderbufferStorageMultisample, 5, arg0, arg1, arg2, arg3, arg4);
    glRenderbufferStorageMultisample(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glRenderbufferStorageMultisample", (GLADapiproc) glRenderbufferStorageMultisample, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_debug_glRenderbufferStorageMultisample = glad_debug_impl_glRenderbufferStorageMultisample;
PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glResumeTransformFeedback(void) {
    _pre_call_gl_callback("glResumeTransformFeedback", (GLADapiproc) glResumeTransformFeedback, 0);
    glResumeTransformFeedback();
    _post_call_gl_callback(NULL, "glResumeTransformFeedback", (GLADapiproc) glResumeTransformFeedback, 0);
    
}
PFNGLRESUMETRANSFORMFEEDBACKPROC glad_debug_glResumeTransformFeedback = glad_debug_impl_glResumeTransformFeedback;
PFNGLROTATEDPROC glad_glRotated = NULL;
void GLAD_API_PTR glad_debug_impl_glRotated(GLdouble arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glRotated", (GLADapiproc) glRotated, 4, arg0, arg1, arg2, arg3);
    glRotated(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRotated", (GLADapiproc) glRotated, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLROTATEDPROC glad_debug_glRotated = glad_debug_impl_glRotated;
PFNGLROTATEFPROC glad_glRotatef = NULL;
void GLAD_API_PTR glad_debug_impl_glRotatef(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glRotatef", (GLADapiproc) glRotatef, 4, arg0, arg1, arg2, arg3);
    glRotatef(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRotatef", (GLADapiproc) glRotatef, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLROTATEFPROC glad_debug_glRotatef = glad_debug_impl_glRotatef;
PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage = NULL;
void GLAD_API_PTR glad_debug_impl_glSampleCoverage(GLfloat arg0, GLboolean arg1) {
    _pre_call_gl_callback("glSampleCoverage", (GLADapiproc) glSampleCoverage, 2, arg0, arg1);
    glSampleCoverage(arg0, arg1);
    _post_call_gl_callback(NULL, "glSampleCoverage", (GLADapiproc) glSampleCoverage, 2, arg0, arg1);
    
}
PFNGLSAMPLECOVERAGEPROC glad_debug_glSampleCoverage = glad_debug_impl_glSampleCoverage;
PFNGLSAMPLEMASKIPROC glad_glSampleMaski = NULL;
void GLAD_API_PTR glad_debug_impl_glSampleMaski(GLuint arg0, GLbitfield arg1) {
    _pre_call_gl_callback("glSampleMaski", (GLADapiproc) glSampleMaski, 2, arg0, arg1);
    glSampleMaski(arg0, arg1);
    _post_call_gl_callback(NULL, "glSampleMaski", (GLADapiproc) glSampleMaski, 2, arg0, arg1);
    
}
PFNGLSAMPLEMASKIPROC glad_debug_glSampleMaski = glad_debug_impl_glSampleMaski;
PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameterIiv(GLuint arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glSamplerParameterIiv", (GLADapiproc) glSamplerParameterIiv, 3, arg0, arg1, arg2);
    glSamplerParameterIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameterIiv", (GLADapiproc) glSamplerParameterIiv, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERIIVPROC glad_debug_glSamplerParameterIiv = glad_debug_impl_glSamplerParameterIiv;
PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameterIuiv(GLuint arg0, GLenum arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glSamplerParameterIuiv", (GLADapiproc) glSamplerParameterIuiv, 3, arg0, arg1, arg2);
    glSamplerParameterIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameterIuiv", (GLADapiproc) glSamplerParameterIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERIUIVPROC glad_debug_glSamplerParameterIuiv = glad_debug_impl_glSamplerParameterIuiv;
PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameterf(GLuint arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_gl_callback("glSamplerParameterf", (GLADapiproc) glSamplerParameterf, 3, arg0, arg1, arg2);
    glSamplerParameterf(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameterf", (GLADapiproc) glSamplerParameterf, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERFPROC glad_debug_glSamplerParameterf = glad_debug_impl_glSamplerParameterf;
PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameterfv(GLuint arg0, GLenum arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glSamplerParameterfv", (GLADapiproc) glSamplerParameterfv, 3, arg0, arg1, arg2);
    glSamplerParameterfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameterfv", (GLADapiproc) glSamplerParameterfv, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERFVPROC glad_debug_glSamplerParameterfv = glad_debug_impl_glSamplerParameterfv;
PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameteri(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glSamplerParameteri", (GLADapiproc) glSamplerParameteri, 3, arg0, arg1, arg2);
    glSamplerParameteri(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameteri", (GLADapiproc) glSamplerParameteri, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERIPROC glad_debug_glSamplerParameteri = glad_debug_impl_glSamplerParameteri;
PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameteriv(GLuint arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glSamplerParameteriv", (GLADapiproc) glSamplerParameteriv, 3, arg0, arg1, arg2);
    glSamplerParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameteriv", (GLADapiproc) glSamplerParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERIVPROC glad_debug_glSamplerParameteriv = glad_debug_impl_glSamplerParameteriv;
PFNGLSCALEDPROC glad_glScaled = NULL;
void GLAD_API_PTR glad_debug_impl_glScaled(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glScaled", (GLADapiproc) glScaled, 3, arg0, arg1, arg2);
    glScaled(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glScaled", (GLADapiproc) glScaled, 3, arg0, arg1, arg2);
    
}
PFNGLSCALEDPROC glad_debug_glScaled = glad_debug_impl_glScaled;
PFNGLSCALEFPROC glad_glScalef = NULL;
void GLAD_API_PTR glad_debug_impl_glScalef(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glScalef", (GLADapiproc) glScalef, 3, arg0, arg1, arg2);
    glScalef(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glScalef", (GLADapiproc) glScalef, 3, arg0, arg1, arg2);
    
}
PFNGLSCALEFPROC glad_debug_glScalef = glad_debug_impl_glScalef;
PFNGLSCISSORPROC glad_glScissor = NULL;
void GLAD_API_PTR glad_debug_impl_glScissor(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_gl_callback("glScissor", (GLADapiproc) glScissor, 4, arg0, arg1, arg2, arg3);
    glScissor(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glScissor", (GLADapiproc) glScissor, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLSCISSORPROC glad_debug_glScissor = glad_debug_impl_glScissor;
PFNGLSCISSORARRAYVPROC glad_glScissorArrayv = NULL;
void GLAD_API_PTR glad_debug_impl_glScissorArrayv(GLuint arg0, GLsizei arg1, const GLint * arg2) {
    _pre_call_gl_callback("glScissorArrayv", (GLADapiproc) glScissorArrayv, 3, arg0, arg1, arg2);
    glScissorArrayv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glScissorArrayv", (GLADapiproc) glScissorArrayv, 3, arg0, arg1, arg2);
    
}
PFNGLSCISSORARRAYVPROC glad_debug_glScissorArrayv = glad_debug_impl_glScissorArrayv;
PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed = NULL;
void GLAD_API_PTR glad_debug_impl_glScissorIndexed(GLuint arg0, GLint arg1, GLint arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_gl_callback("glScissorIndexed", (GLADapiproc) glScissorIndexed, 5, arg0, arg1, arg2, arg3, arg4);
    glScissorIndexed(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glScissorIndexed", (GLADapiproc) glScissorIndexed, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLSCISSORINDEXEDPROC glad_debug_glScissorIndexed = glad_debug_impl_glScissorIndexed;
PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv = NULL;
void GLAD_API_PTR glad_debug_impl_glScissorIndexedv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glScissorIndexedv", (GLADapiproc) glScissorIndexedv, 2, arg0, arg1);
    glScissorIndexedv(arg0, arg1);
    _post_call_gl_callback(NULL, "glScissorIndexedv", (GLADapiproc) glScissorIndexedv, 2, arg0, arg1);
    
}
PFNGLSCISSORINDEXEDVPROC glad_debug_glScissorIndexedv = glad_debug_impl_glScissorIndexedv;
PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3b(GLbyte arg0, GLbyte arg1, GLbyte arg2) {
    _pre_call_gl_callback("glSecondaryColor3b", (GLADapiproc) glSecondaryColor3b, 3, arg0, arg1, arg2);
    glSecondaryColor3b(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSecondaryColor3b", (GLADapiproc) glSecondaryColor3b, 3, arg0, arg1, arg2);
    
}
PFNGLSECONDARYCOLOR3BPROC glad_debug_glSecondaryColor3b = glad_debug_impl_glSecondaryColor3b;
PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3bv(const GLbyte * arg0) {
    _pre_call_gl_callback("glSecondaryColor3bv", (GLADapiproc) glSecondaryColor3bv, 1, arg0);
    glSecondaryColor3bv(arg0);
    _post_call_gl_callback(NULL, "glSecondaryColor3bv", (GLADapiproc) glSecondaryColor3bv, 1, arg0);
    
}
PFNGLSECONDARYCOLOR3BVPROC glad_debug_glSecondaryColor3bv = glad_debug_impl_glSecondaryColor3bv;
PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3d(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glSecondaryColor3d", (GLADapiproc) glSecondaryColor3d, 3, arg0, arg1, arg2);
    glSecondaryColor3d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSecondaryColor3d", (GLADapiproc) glSecondaryColor3d, 3, arg0, arg1, arg2);
    
}
PFNGLSECONDARYCOLOR3DPROC glad_debug_glSecondaryColor3d = glad_debug_impl_glSecondaryColor3d;
PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glSecondaryColor3dv", (GLADapiproc) glSecondaryColor3dv, 1, arg0);
    glSecondaryColor3dv(arg0);
    _post_call_gl_callback(NULL, "glSecondaryColor3dv", (GLADapiproc) glSecondaryColor3dv, 1, arg0);
    
}
PFNGLSECONDARYCOLOR3DVPROC glad_debug_glSecondaryColor3dv = glad_debug_impl_glSecondaryColor3dv;
PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3f(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glSecondaryColor3f", (GLADapiproc) glSecondaryColor3f, 3, arg0, arg1, arg2);
    glSecondaryColor3f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSecondaryColor3f", (GLADapiproc) glSecondaryColor3f, 3, arg0, arg1, arg2);
    
}
PFNGLSECONDARYCOLOR3FPROC glad_debug_glSecondaryColor3f = glad_debug_impl_glSecondaryColor3f;
PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glSecondaryColor3fv", (GLADapiproc) glSecondaryColor3fv, 1, arg0);
    glSecondaryColor3fv(arg0);
    _post_call_gl_callback(NULL, "glSecondaryColor3fv", (GLADapiproc) glSecondaryColor3fv, 1, arg0);
    
}
PFNGLSECONDARYCOLOR3FVPROC glad_debug_glSecondaryColor3fv = glad_debug_impl_glSecondaryColor3fv;
PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3i(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glSecondaryColor3i", (GLADapiproc) glSecondaryColor3i, 3, arg0, arg1, arg2);
    glSecondaryColor3i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSecondaryColor3i", (GLADapiproc) glSecondaryColor3i, 3, arg0, arg1, arg2);
    
}
PFNGLSECONDARYCOLOR3IPROC glad_debug_glSecondaryColor3i = glad_debug_impl_glSecondaryColor3i;
PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3iv(const GLint * arg0) {
    _pre_call_gl_callback("glSecondaryColor3iv", (GLADapiproc) glSecondaryColor3iv, 1, arg0);
    glSecondaryColor3iv(arg0);
    _post_call_gl_callback(NULL, "glSecondaryColor3iv", (GLADapiproc) glSecondaryColor3iv, 1, arg0);
    
}
PFNGLSECONDARYCOLOR3IVPROC glad_debug_glSecondaryColor3iv = glad_debug_impl_glSecondaryColor3iv;
PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3s(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_gl_callback("glSecondaryColor3s", (GLADapiproc) glSecondaryColor3s, 3, arg0, arg1, arg2);
    glSecondaryColor3s(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSecondaryColor3s", (GLADapiproc) glSecondaryColor3s, 3, arg0, arg1, arg2);
    
}
PFNGLSECONDARYCOLOR3SPROC glad_debug_glSecondaryColor3s = glad_debug_impl_glSecondaryColor3s;
PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3sv(const GLshort * arg0) {
    _pre_call_gl_callback("glSecondaryColor3sv", (GLADapiproc) glSecondaryColor3sv, 1, arg0);
    glSecondaryColor3sv(arg0);
    _post_call_gl_callback(NULL, "glSecondaryColor3sv", (GLADapiproc) glSecondaryColor3sv, 1, arg0);
    
}
PFNGLSECONDARYCOLOR3SVPROC glad_debug_glSecondaryColor3sv = glad_debug_impl_glSecondaryColor3sv;
PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3ub(GLubyte arg0, GLubyte arg1, GLubyte arg2) {
    _pre_call_gl_callback("glSecondaryColor3ub", (GLADapiproc) glSecondaryColor3ub, 3, arg0, arg1, arg2);
    glSecondaryColor3ub(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSecondaryColor3ub", (GLADapiproc) glSecondaryColor3ub, 3, arg0, arg1, arg2);
    
}
PFNGLSECONDARYCOLOR3UBPROC glad_debug_glSecondaryColor3ub = glad_debug_impl_glSecondaryColor3ub;
PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3ubv(const GLubyte * arg0) {
    _pre_call_gl_callback("glSecondaryColor3ubv", (GLADapiproc) glSecondaryColor3ubv, 1, arg0);
    glSecondaryColor3ubv(arg0);
    _post_call_gl_callback(NULL, "glSecondaryColor3ubv", (GLADapiproc) glSecondaryColor3ubv, 1, arg0);
    
}
PFNGLSECONDARYCOLOR3UBVPROC glad_debug_glSecondaryColor3ubv = glad_debug_impl_glSecondaryColor3ubv;
PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3ui(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glSecondaryColor3ui", (GLADapiproc) glSecondaryColor3ui, 3, arg0, arg1, arg2);
    glSecondaryColor3ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSecondaryColor3ui", (GLADapiproc) glSecondaryColor3ui, 3, arg0, arg1, arg2);
    
}
PFNGLSECONDARYCOLOR3UIPROC glad_debug_glSecondaryColor3ui = glad_debug_impl_glSecondaryColor3ui;
PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3uiv(const GLuint * arg0) {
    _pre_call_gl_callback("glSecondaryColor3uiv", (GLADapiproc) glSecondaryColor3uiv, 1, arg0);
    glSecondaryColor3uiv(arg0);
    _post_call_gl_callback(NULL, "glSecondaryColor3uiv", (GLADapiproc) glSecondaryColor3uiv, 1, arg0);
    
}
PFNGLSECONDARYCOLOR3UIVPROC glad_debug_glSecondaryColor3uiv = glad_debug_impl_glSecondaryColor3uiv;
PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3us(GLushort arg0, GLushort arg1, GLushort arg2) {
    _pre_call_gl_callback("glSecondaryColor3us", (GLADapiproc) glSecondaryColor3us, 3, arg0, arg1, arg2);
    glSecondaryColor3us(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSecondaryColor3us", (GLADapiproc) glSecondaryColor3us, 3, arg0, arg1, arg2);
    
}
PFNGLSECONDARYCOLOR3USPROC glad_debug_glSecondaryColor3us = glad_debug_impl_glSecondaryColor3us;
PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColor3usv(const GLushort * arg0) {
    _pre_call_gl_callback("glSecondaryColor3usv", (GLADapiproc) glSecondaryColor3usv, 1, arg0);
    glSecondaryColor3usv(arg0);
    _post_call_gl_callback(NULL, "glSecondaryColor3usv", (GLADapiproc) glSecondaryColor3usv, 1, arg0);
    
}
PFNGLSECONDARYCOLOR3USVPROC glad_debug_glSecondaryColor3usv = glad_debug_impl_glSecondaryColor3usv;
PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColorP3ui(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glSecondaryColorP3ui", (GLADapiproc) glSecondaryColorP3ui, 2, arg0, arg1);
    glSecondaryColorP3ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glSecondaryColorP3ui", (GLADapiproc) glSecondaryColorP3ui, 2, arg0, arg1);
    
}
PFNGLSECONDARYCOLORP3UIPROC glad_debug_glSecondaryColorP3ui = glad_debug_impl_glSecondaryColorP3ui;
PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColorP3uiv(GLenum arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glSecondaryColorP3uiv", (GLADapiproc) glSecondaryColorP3uiv, 2, arg0, arg1);
    glSecondaryColorP3uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glSecondaryColorP3uiv", (GLADapiproc) glSecondaryColorP3uiv, 2, arg0, arg1);
    
}
PFNGLSECONDARYCOLORP3UIVPROC glad_debug_glSecondaryColorP3uiv = glad_debug_impl_glSecondaryColorP3uiv;
PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glSecondaryColorPointer(GLint arg0, GLenum arg1, GLsizei arg2, const void * arg3) {
    _pre_call_gl_callback("glSecondaryColorPointer", (GLADapiproc) glSecondaryColorPointer, 4, arg0, arg1, arg2, arg3);
    glSecondaryColorPointer(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glSecondaryColorPointer", (GLADapiproc) glSecondaryColorPointer, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLSECONDARYCOLORPOINTERPROC glad_debug_glSecondaryColorPointer = glad_debug_impl_glSecondaryColorPointer;
PFNGLSELECTBUFFERPROC glad_glSelectBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glSelectBuffer(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glSelectBuffer", (GLADapiproc) glSelectBuffer, 2, arg0, arg1);
    glSelectBuffer(arg0, arg1);
    _post_call_gl_callback(NULL, "glSelectBuffer", (GLADapiproc) glSelectBuffer, 2, arg0, arg1);
    
}
PFNGLSELECTBUFFERPROC glad_debug_glSelectBuffer = glad_debug_impl_glSelectBuffer;
PFNGLSHADEMODELPROC glad_glShadeModel = NULL;
void GLAD_API_PTR glad_debug_impl_glShadeModel(GLenum arg0) {
    _pre_call_gl_callback("glShadeModel", (GLADapiproc) glShadeModel, 1, arg0);
    glShadeModel(arg0);
    _post_call_gl_callback(NULL, "glShadeModel", (GLADapiproc) glShadeModel, 1, arg0);
    
}
PFNGLSHADEMODELPROC glad_debug_glShadeModel = glad_debug_impl_glShadeModel;
PFNGLSHADERBINARYPROC glad_glShaderBinary = NULL;
void GLAD_API_PTR glad_debug_impl_glShaderBinary(GLsizei arg0, const GLuint * arg1, GLenum arg2, const void * arg3, GLsizei arg4) {
    _pre_call_gl_callback("glShaderBinary", (GLADapiproc) glShaderBinary, 5, arg0, arg1, arg2, arg3, arg4);
    glShaderBinary(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glShaderBinary", (GLADapiproc) glShaderBinary, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLSHADERBINARYPROC glad_debug_glShaderBinary = glad_debug_impl_glShaderBinary;
PFNGLSHADERSOURCEPROC glad_glShaderSource = NULL;
void GLAD_API_PTR glad_debug_impl_glShaderSource(GLuint arg0, GLsizei arg1, const GLchar *const* arg2, const GLint * arg3) {
    _pre_call_gl_callback("glShaderSource", (GLADapiproc) glShaderSource, 4, arg0, arg1, arg2, arg3);
    glShaderSource(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glShaderSource", (GLADapiproc) glShaderSource, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLSHADERSOURCEPROC glad_debug_glShaderSource = glad_debug_impl_glShaderSource;
PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_glShaderStorageBlockBinding = NULL;
void GLAD_API_PTR glad_debug_impl_glShaderStorageBlockBinding(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glShaderStorageBlockBinding", (GLADapiproc) glShaderStorageBlockBinding, 3, arg0, arg1, arg2);
    glShaderStorageBlockBinding(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glShaderStorageBlockBinding", (GLADapiproc) glShaderStorageBlockBinding, 3, arg0, arg1, arg2);
    
}
PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_debug_glShaderStorageBlockBinding = glad_debug_impl_glShaderStorageBlockBinding;
PFNGLSPECIALIZESHADERPROC glad_glSpecializeShader = NULL;
void GLAD_API_PTR glad_debug_impl_glSpecializeShader(GLuint arg0, const GLchar * arg1, GLuint arg2, const GLuint * arg3, const GLuint * arg4) {
    _pre_call_gl_callback("glSpecializeShader", (GLADapiproc) glSpecializeShader, 5, arg0, arg1, arg2, arg3, arg4);
    glSpecializeShader(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glSpecializeShader", (GLADapiproc) glSpecializeShader, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLSPECIALIZESHADERPROC glad_debug_glSpecializeShader = glad_debug_impl_glSpecializeShader;
PFNGLSTENCILFUNCPROC glad_glStencilFunc = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilFunc(GLenum arg0, GLint arg1, GLuint arg2) {
    _pre_call_gl_callback("glStencilFunc", (GLADapiproc) glStencilFunc, 3, arg0, arg1, arg2);
    glStencilFunc(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glStencilFunc", (GLADapiproc) glStencilFunc, 3, arg0, arg1, arg2);
    
}
PFNGLSTENCILFUNCPROC glad_debug_glStencilFunc = glad_debug_impl_glStencilFunc;
PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilFuncSeparate(GLenum arg0, GLenum arg1, GLint arg2, GLuint arg3) {
    _pre_call_gl_callback("glStencilFuncSeparate", (GLADapiproc) glStencilFuncSeparate, 4, arg0, arg1, arg2, arg3);
    glStencilFuncSeparate(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glStencilFuncSeparate", (GLADapiproc) glStencilFuncSeparate, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLSTENCILFUNCSEPARATEPROC glad_debug_glStencilFuncSeparate = glad_debug_impl_glStencilFuncSeparate;
PFNGLSTENCILMASKPROC glad_glStencilMask = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilMask(GLuint arg0) {
    _pre_call_gl_callback("glStencilMask", (GLADapiproc) glStencilMask, 1, arg0);
    glStencilMask(arg0);
    _post_call_gl_callback(NULL, "glStencilMask", (GLADapiproc) glStencilMask, 1, arg0);
    
}
PFNGLSTENCILMASKPROC glad_debug_glStencilMask = glad_debug_impl_glStencilMask;
PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilMaskSeparate(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glStencilMaskSeparate", (GLADapiproc) glStencilMaskSeparate, 2, arg0, arg1);
    glStencilMaskSeparate(arg0, arg1);
    _post_call_gl_callback(NULL, "glStencilMaskSeparate", (GLADapiproc) glStencilMaskSeparate, 2, arg0, arg1);
    
}
PFNGLSTENCILMASKSEPARATEPROC glad_debug_glStencilMaskSeparate = glad_debug_impl_glStencilMaskSeparate;
PFNGLSTENCILOPPROC glad_glStencilOp = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilOp(GLenum arg0, GLenum arg1, GLenum arg2) {
    _pre_call_gl_callback("glStencilOp", (GLADapiproc) glStencilOp, 3, arg0, arg1, arg2);
    glStencilOp(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glStencilOp", (GLADapiproc) glStencilOp, 3, arg0, arg1, arg2);
    
}
PFNGLSTENCILOPPROC glad_debug_glStencilOp = glad_debug_impl_glStencilOp;
PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilOpSeparate(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3) {
    _pre_call_gl_callback("glStencilOpSeparate", (GLADapiproc) glStencilOpSeparate, 4, arg0, arg1, arg2, arg3);
    glStencilOpSeparate(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glStencilOpSeparate", (GLADapiproc) glStencilOpSeparate, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLSTENCILOPSEPARATEPROC glad_debug_glStencilOpSeparate = glad_debug_impl_glStencilOpSeparate;
PFNGLTEXBUFFERPROC glad_glTexBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glTexBuffer(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_gl_callback("glTexBuffer", (GLADapiproc) glTexBuffer, 3, arg0, arg1, arg2);
    glTexBuffer(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexBuffer", (GLADapiproc) glTexBuffer, 3, arg0, arg1, arg2);
    
}
PFNGLTEXBUFFERPROC glad_debug_glTexBuffer = glad_debug_impl_glTexBuffer;
PFNGLTEXBUFFERRANGEPROC glad_glTexBufferRange = NULL;
void GLAD_API_PTR glad_debug_impl_glTexBufferRange(GLenum arg0, GLenum arg1, GLuint arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_gl_callback("glTexBufferRange", (GLADapiproc) glTexBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
    glTexBufferRange(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glTexBufferRange", (GLADapiproc) glTexBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLTEXBUFFERRANGEPROC glad_debug_glTexBufferRange = glad_debug_impl_glTexBufferRange;
PFNGLTEXCOORD1DPROC glad_glTexCoord1d = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord1d(GLdouble arg0) {
    _pre_call_gl_callback("glTexCoord1d", (GLADapiproc) glTexCoord1d, 1, arg0);
    glTexCoord1d(arg0);
    _post_call_gl_callback(NULL, "glTexCoord1d", (GLADapiproc) glTexCoord1d, 1, arg0);
    
}
PFNGLTEXCOORD1DPROC glad_debug_glTexCoord1d = glad_debug_impl_glTexCoord1d;
PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord1dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glTexCoord1dv", (GLADapiproc) glTexCoord1dv, 1, arg0);
    glTexCoord1dv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord1dv", (GLADapiproc) glTexCoord1dv, 1, arg0);
    
}
PFNGLTEXCOORD1DVPROC glad_debug_glTexCoord1dv = glad_debug_impl_glTexCoord1dv;
PFNGLTEXCOORD1FPROC glad_glTexCoord1f = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord1f(GLfloat arg0) {
    _pre_call_gl_callback("glTexCoord1f", (GLADapiproc) glTexCoord1f, 1, arg0);
    glTexCoord1f(arg0);
    _post_call_gl_callback(NULL, "glTexCoord1f", (GLADapiproc) glTexCoord1f, 1, arg0);
    
}
PFNGLTEXCOORD1FPROC glad_debug_glTexCoord1f = glad_debug_impl_glTexCoord1f;
PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord1fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glTexCoord1fv", (GLADapiproc) glTexCoord1fv, 1, arg0);
    glTexCoord1fv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord1fv", (GLADapiproc) glTexCoord1fv, 1, arg0);
    
}
PFNGLTEXCOORD1FVPROC glad_debug_glTexCoord1fv = glad_debug_impl_glTexCoord1fv;
PFNGLTEXCOORD1IPROC glad_glTexCoord1i = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord1i(GLint arg0) {
    _pre_call_gl_callback("glTexCoord1i", (GLADapiproc) glTexCoord1i, 1, arg0);
    glTexCoord1i(arg0);
    _post_call_gl_callback(NULL, "glTexCoord1i", (GLADapiproc) glTexCoord1i, 1, arg0);
    
}
PFNGLTEXCOORD1IPROC glad_debug_glTexCoord1i = glad_debug_impl_glTexCoord1i;
PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord1iv(const GLint * arg0) {
    _pre_call_gl_callback("glTexCoord1iv", (GLADapiproc) glTexCoord1iv, 1, arg0);
    glTexCoord1iv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord1iv", (GLADapiproc) glTexCoord1iv, 1, arg0);
    
}
PFNGLTEXCOORD1IVPROC glad_debug_glTexCoord1iv = glad_debug_impl_glTexCoord1iv;
PFNGLTEXCOORD1SPROC glad_glTexCoord1s = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord1s(GLshort arg0) {
    _pre_call_gl_callback("glTexCoord1s", (GLADapiproc) glTexCoord1s, 1, arg0);
    glTexCoord1s(arg0);
    _post_call_gl_callback(NULL, "glTexCoord1s", (GLADapiproc) glTexCoord1s, 1, arg0);
    
}
PFNGLTEXCOORD1SPROC glad_debug_glTexCoord1s = glad_debug_impl_glTexCoord1s;
PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord1sv(const GLshort * arg0) {
    _pre_call_gl_callback("glTexCoord1sv", (GLADapiproc) glTexCoord1sv, 1, arg0);
    glTexCoord1sv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord1sv", (GLADapiproc) glTexCoord1sv, 1, arg0);
    
}
PFNGLTEXCOORD1SVPROC glad_debug_glTexCoord1sv = glad_debug_impl_glTexCoord1sv;
PFNGLTEXCOORD2DPROC glad_glTexCoord2d = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord2d(GLdouble arg0, GLdouble arg1) {
    _pre_call_gl_callback("glTexCoord2d", (GLADapiproc) glTexCoord2d, 2, arg0, arg1);
    glTexCoord2d(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoord2d", (GLADapiproc) glTexCoord2d, 2, arg0, arg1);
    
}
PFNGLTEXCOORD2DPROC glad_debug_glTexCoord2d = glad_debug_impl_glTexCoord2d;
PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord2dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glTexCoord2dv", (GLADapiproc) glTexCoord2dv, 1, arg0);
    glTexCoord2dv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord2dv", (GLADapiproc) glTexCoord2dv, 1, arg0);
    
}
PFNGLTEXCOORD2DVPROC glad_debug_glTexCoord2dv = glad_debug_impl_glTexCoord2dv;
PFNGLTEXCOORD2FPROC glad_glTexCoord2f = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord2f(GLfloat arg0, GLfloat arg1) {
    _pre_call_gl_callback("glTexCoord2f", (GLADapiproc) glTexCoord2f, 2, arg0, arg1);
    glTexCoord2f(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoord2f", (GLADapiproc) glTexCoord2f, 2, arg0, arg1);
    
}
PFNGLTEXCOORD2FPROC glad_debug_glTexCoord2f = glad_debug_impl_glTexCoord2f;
PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord2fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glTexCoord2fv", (GLADapiproc) glTexCoord2fv, 1, arg0);
    glTexCoord2fv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord2fv", (GLADapiproc) glTexCoord2fv, 1, arg0);
    
}
PFNGLTEXCOORD2FVPROC glad_debug_glTexCoord2fv = glad_debug_impl_glTexCoord2fv;
PFNGLTEXCOORD2IPROC glad_glTexCoord2i = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord2i(GLint arg0, GLint arg1) {
    _pre_call_gl_callback("glTexCoord2i", (GLADapiproc) glTexCoord2i, 2, arg0, arg1);
    glTexCoord2i(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoord2i", (GLADapiproc) glTexCoord2i, 2, arg0, arg1);
    
}
PFNGLTEXCOORD2IPROC glad_debug_glTexCoord2i = glad_debug_impl_glTexCoord2i;
PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord2iv(const GLint * arg0) {
    _pre_call_gl_callback("glTexCoord2iv", (GLADapiproc) glTexCoord2iv, 1, arg0);
    glTexCoord2iv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord2iv", (GLADapiproc) glTexCoord2iv, 1, arg0);
    
}
PFNGLTEXCOORD2IVPROC glad_debug_glTexCoord2iv = glad_debug_impl_glTexCoord2iv;
PFNGLTEXCOORD2SPROC glad_glTexCoord2s = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord2s(GLshort arg0, GLshort arg1) {
    _pre_call_gl_callback("glTexCoord2s", (GLADapiproc) glTexCoord2s, 2, arg0, arg1);
    glTexCoord2s(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoord2s", (GLADapiproc) glTexCoord2s, 2, arg0, arg1);
    
}
PFNGLTEXCOORD2SPROC glad_debug_glTexCoord2s = glad_debug_impl_glTexCoord2s;
PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord2sv(const GLshort * arg0) {
    _pre_call_gl_callback("glTexCoord2sv", (GLADapiproc) glTexCoord2sv, 1, arg0);
    glTexCoord2sv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord2sv", (GLADapiproc) glTexCoord2sv, 1, arg0);
    
}
PFNGLTEXCOORD2SVPROC glad_debug_glTexCoord2sv = glad_debug_impl_glTexCoord2sv;
PFNGLTEXCOORD3DPROC glad_glTexCoord3d = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord3d(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glTexCoord3d", (GLADapiproc) glTexCoord3d, 3, arg0, arg1, arg2);
    glTexCoord3d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexCoord3d", (GLADapiproc) glTexCoord3d, 3, arg0, arg1, arg2);
    
}
PFNGLTEXCOORD3DPROC glad_debug_glTexCoord3d = glad_debug_impl_glTexCoord3d;
PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord3dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glTexCoord3dv", (GLADapiproc) glTexCoord3dv, 1, arg0);
    glTexCoord3dv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord3dv", (GLADapiproc) glTexCoord3dv, 1, arg0);
    
}
PFNGLTEXCOORD3DVPROC glad_debug_glTexCoord3dv = glad_debug_impl_glTexCoord3dv;
PFNGLTEXCOORD3FPROC glad_glTexCoord3f = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord3f(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glTexCoord3f", (GLADapiproc) glTexCoord3f, 3, arg0, arg1, arg2);
    glTexCoord3f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexCoord3f", (GLADapiproc) glTexCoord3f, 3, arg0, arg1, arg2);
    
}
PFNGLTEXCOORD3FPROC glad_debug_glTexCoord3f = glad_debug_impl_glTexCoord3f;
PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord3fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glTexCoord3fv", (GLADapiproc) glTexCoord3fv, 1, arg0);
    glTexCoord3fv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord3fv", (GLADapiproc) glTexCoord3fv, 1, arg0);
    
}
PFNGLTEXCOORD3FVPROC glad_debug_glTexCoord3fv = glad_debug_impl_glTexCoord3fv;
PFNGLTEXCOORD3IPROC glad_glTexCoord3i = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord3i(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glTexCoord3i", (GLADapiproc) glTexCoord3i, 3, arg0, arg1, arg2);
    glTexCoord3i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexCoord3i", (GLADapiproc) glTexCoord3i, 3, arg0, arg1, arg2);
    
}
PFNGLTEXCOORD3IPROC glad_debug_glTexCoord3i = glad_debug_impl_glTexCoord3i;
PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord3iv(const GLint * arg0) {
    _pre_call_gl_callback("glTexCoord3iv", (GLADapiproc) glTexCoord3iv, 1, arg0);
    glTexCoord3iv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord3iv", (GLADapiproc) glTexCoord3iv, 1, arg0);
    
}
PFNGLTEXCOORD3IVPROC glad_debug_glTexCoord3iv = glad_debug_impl_glTexCoord3iv;
PFNGLTEXCOORD3SPROC glad_glTexCoord3s = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord3s(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_gl_callback("glTexCoord3s", (GLADapiproc) glTexCoord3s, 3, arg0, arg1, arg2);
    glTexCoord3s(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexCoord3s", (GLADapiproc) glTexCoord3s, 3, arg0, arg1, arg2);
    
}
PFNGLTEXCOORD3SPROC glad_debug_glTexCoord3s = glad_debug_impl_glTexCoord3s;
PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord3sv(const GLshort * arg0) {
    _pre_call_gl_callback("glTexCoord3sv", (GLADapiproc) glTexCoord3sv, 1, arg0);
    glTexCoord3sv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord3sv", (GLADapiproc) glTexCoord3sv, 1, arg0);
    
}
PFNGLTEXCOORD3SVPROC glad_debug_glTexCoord3sv = glad_debug_impl_glTexCoord3sv;
PFNGLTEXCOORD4DPROC glad_glTexCoord4d = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord4d(GLdouble arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glTexCoord4d", (GLADapiproc) glTexCoord4d, 4, arg0, arg1, arg2, arg3);
    glTexCoord4d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glTexCoord4d", (GLADapiproc) glTexCoord4d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLTEXCOORD4DPROC glad_debug_glTexCoord4d = glad_debug_impl_glTexCoord4d;
PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord4dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glTexCoord4dv", (GLADapiproc) glTexCoord4dv, 1, arg0);
    glTexCoord4dv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord4dv", (GLADapiproc) glTexCoord4dv, 1, arg0);
    
}
PFNGLTEXCOORD4DVPROC glad_debug_glTexCoord4dv = glad_debug_impl_glTexCoord4dv;
PFNGLTEXCOORD4FPROC glad_glTexCoord4f = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord4f(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glTexCoord4f", (GLADapiproc) glTexCoord4f, 4, arg0, arg1, arg2, arg3);
    glTexCoord4f(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glTexCoord4f", (GLADapiproc) glTexCoord4f, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLTEXCOORD4FPROC glad_debug_glTexCoord4f = glad_debug_impl_glTexCoord4f;
PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord4fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glTexCoord4fv", (GLADapiproc) glTexCoord4fv, 1, arg0);
    glTexCoord4fv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord4fv", (GLADapiproc) glTexCoord4fv, 1, arg0);
    
}
PFNGLTEXCOORD4FVPROC glad_debug_glTexCoord4fv = glad_debug_impl_glTexCoord4fv;
PFNGLTEXCOORD4IPROC glad_glTexCoord4i = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord4i(GLint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glTexCoord4i", (GLADapiproc) glTexCoord4i, 4, arg0, arg1, arg2, arg3);
    glTexCoord4i(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glTexCoord4i", (GLADapiproc) glTexCoord4i, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLTEXCOORD4IPROC glad_debug_glTexCoord4i = glad_debug_impl_glTexCoord4i;
PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord4iv(const GLint * arg0) {
    _pre_call_gl_callback("glTexCoord4iv", (GLADapiproc) glTexCoord4iv, 1, arg0);
    glTexCoord4iv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord4iv", (GLADapiproc) glTexCoord4iv, 1, arg0);
    
}
PFNGLTEXCOORD4IVPROC glad_debug_glTexCoord4iv = glad_debug_impl_glTexCoord4iv;
PFNGLTEXCOORD4SPROC glad_glTexCoord4s = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord4s(GLshort arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_gl_callback("glTexCoord4s", (GLADapiproc) glTexCoord4s, 4, arg0, arg1, arg2, arg3);
    glTexCoord4s(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glTexCoord4s", (GLADapiproc) glTexCoord4s, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLTEXCOORD4SPROC glad_debug_glTexCoord4s = glad_debug_impl_glTexCoord4s;
PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoord4sv(const GLshort * arg0) {
    _pre_call_gl_callback("glTexCoord4sv", (GLADapiproc) glTexCoord4sv, 1, arg0);
    glTexCoord4sv(arg0);
    _post_call_gl_callback(NULL, "glTexCoord4sv", (GLADapiproc) glTexCoord4sv, 1, arg0);
    
}
PFNGLTEXCOORD4SVPROC glad_debug_glTexCoord4sv = glad_debug_impl_glTexCoord4sv;
PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoordP1ui(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glTexCoordP1ui", (GLADapiproc) glTexCoordP1ui, 2, arg0, arg1);
    glTexCoordP1ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoordP1ui", (GLADapiproc) glTexCoordP1ui, 2, arg0, arg1);
    
}
PFNGLTEXCOORDP1UIPROC glad_debug_glTexCoordP1ui = glad_debug_impl_glTexCoordP1ui;
PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoordP1uiv(GLenum arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glTexCoordP1uiv", (GLADapiproc) glTexCoordP1uiv, 2, arg0, arg1);
    glTexCoordP1uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoordP1uiv", (GLADapiproc) glTexCoordP1uiv, 2, arg0, arg1);
    
}
PFNGLTEXCOORDP1UIVPROC glad_debug_glTexCoordP1uiv = glad_debug_impl_glTexCoordP1uiv;
PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoordP2ui(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glTexCoordP2ui", (GLADapiproc) glTexCoordP2ui, 2, arg0, arg1);
    glTexCoordP2ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoordP2ui", (GLADapiproc) glTexCoordP2ui, 2, arg0, arg1);
    
}
PFNGLTEXCOORDP2UIPROC glad_debug_glTexCoordP2ui = glad_debug_impl_glTexCoordP2ui;
PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoordP2uiv(GLenum arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glTexCoordP2uiv", (GLADapiproc) glTexCoordP2uiv, 2, arg0, arg1);
    glTexCoordP2uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoordP2uiv", (GLADapiproc) glTexCoordP2uiv, 2, arg0, arg1);
    
}
PFNGLTEXCOORDP2UIVPROC glad_debug_glTexCoordP2uiv = glad_debug_impl_glTexCoordP2uiv;
PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoordP3ui(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glTexCoordP3ui", (GLADapiproc) glTexCoordP3ui, 2, arg0, arg1);
    glTexCoordP3ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoordP3ui", (GLADapiproc) glTexCoordP3ui, 2, arg0, arg1);
    
}
PFNGLTEXCOORDP3UIPROC glad_debug_glTexCoordP3ui = glad_debug_impl_glTexCoordP3ui;
PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoordP3uiv(GLenum arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glTexCoordP3uiv", (GLADapiproc) glTexCoordP3uiv, 2, arg0, arg1);
    glTexCoordP3uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoordP3uiv", (GLADapiproc) glTexCoordP3uiv, 2, arg0, arg1);
    
}
PFNGLTEXCOORDP3UIVPROC glad_debug_glTexCoordP3uiv = glad_debug_impl_glTexCoordP3uiv;
PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoordP4ui(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glTexCoordP4ui", (GLADapiproc) glTexCoordP4ui, 2, arg0, arg1);
    glTexCoordP4ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoordP4ui", (GLADapiproc) glTexCoordP4ui, 2, arg0, arg1);
    
}
PFNGLTEXCOORDP4UIPROC glad_debug_glTexCoordP4ui = glad_debug_impl_glTexCoordP4ui;
PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoordP4uiv(GLenum arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glTexCoordP4uiv", (GLADapiproc) glTexCoordP4uiv, 2, arg0, arg1);
    glTexCoordP4uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glTexCoordP4uiv", (GLADapiproc) glTexCoordP4uiv, 2, arg0, arg1);
    
}
PFNGLTEXCOORDP4UIVPROC glad_debug_glTexCoordP4uiv = glad_debug_impl_glTexCoordP4uiv;
PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glTexCoordPointer(GLint arg0, GLenum arg1, GLsizei arg2, const void * arg3) {
    _pre_call_gl_callback("glTexCoordPointer", (GLADapiproc) glTexCoordPointer, 4, arg0, arg1, arg2, arg3);
    glTexCoordPointer(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glTexCoordPointer", (GLADapiproc) glTexCoordPointer, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLTEXCOORDPOINTERPROC glad_debug_glTexCoordPointer = glad_debug_impl_glTexCoordPointer;
PFNGLTEXENVFPROC glad_glTexEnvf = NULL;
void GLAD_API_PTR glad_debug_impl_glTexEnvf(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_gl_callback("glTexEnvf", (GLADapiproc) glTexEnvf, 3, arg0, arg1, arg2);
    glTexEnvf(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexEnvf", (GLADapiproc) glTexEnvf, 3, arg0, arg1, arg2);
    
}
PFNGLTEXENVFPROC glad_debug_glTexEnvf = glad_debug_impl_glTexEnvf;
PFNGLTEXENVFVPROC glad_glTexEnvfv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexEnvfv(GLenum arg0, GLenum arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glTexEnvfv", (GLADapiproc) glTexEnvfv, 3, arg0, arg1, arg2);
    glTexEnvfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexEnvfv", (GLADapiproc) glTexEnvfv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXENVFVPROC glad_debug_glTexEnvfv = glad_debug_impl_glTexEnvfv;
PFNGLTEXENVIPROC glad_glTexEnvi = NULL;
void GLAD_API_PTR glad_debug_impl_glTexEnvi(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glTexEnvi", (GLADapiproc) glTexEnvi, 3, arg0, arg1, arg2);
    glTexEnvi(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexEnvi", (GLADapiproc) glTexEnvi, 3, arg0, arg1, arg2);
    
}
PFNGLTEXENVIPROC glad_debug_glTexEnvi = glad_debug_impl_glTexEnvi;
PFNGLTEXENVIVPROC glad_glTexEnviv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexEnviv(GLenum arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glTexEnviv", (GLADapiproc) glTexEnviv, 3, arg0, arg1, arg2);
    glTexEnviv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexEnviv", (GLADapiproc) glTexEnviv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXENVIVPROC glad_debug_glTexEnviv = glad_debug_impl_glTexEnviv;
PFNGLTEXGENDPROC glad_glTexGend = NULL;
void GLAD_API_PTR glad_debug_impl_glTexGend(GLenum arg0, GLenum arg1, GLdouble arg2) {
    _pre_call_gl_callback("glTexGend", (GLADapiproc) glTexGend, 3, arg0, arg1, arg2);
    glTexGend(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexGend", (GLADapiproc) glTexGend, 3, arg0, arg1, arg2);
    
}
PFNGLTEXGENDPROC glad_debug_glTexGend = glad_debug_impl_glTexGend;
PFNGLTEXGENDVPROC glad_glTexGendv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexGendv(GLenum arg0, GLenum arg1, const GLdouble * arg2) {
    _pre_call_gl_callback("glTexGendv", (GLADapiproc) glTexGendv, 3, arg0, arg1, arg2);
    glTexGendv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexGendv", (GLADapiproc) glTexGendv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXGENDVPROC glad_debug_glTexGendv = glad_debug_impl_glTexGendv;
PFNGLTEXGENFPROC glad_glTexGenf = NULL;
void GLAD_API_PTR glad_debug_impl_glTexGenf(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_gl_callback("glTexGenf", (GLADapiproc) glTexGenf, 3, arg0, arg1, arg2);
    glTexGenf(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexGenf", (GLADapiproc) glTexGenf, 3, arg0, arg1, arg2);
    
}
PFNGLTEXGENFPROC glad_debug_glTexGenf = glad_debug_impl_glTexGenf;
PFNGLTEXGENFVPROC glad_glTexGenfv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexGenfv(GLenum arg0, GLenum arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glTexGenfv", (GLADapiproc) glTexGenfv, 3, arg0, arg1, arg2);
    glTexGenfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexGenfv", (GLADapiproc) glTexGenfv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXGENFVPROC glad_debug_glTexGenfv = glad_debug_impl_glTexGenfv;
PFNGLTEXGENIPROC glad_glTexGeni = NULL;
void GLAD_API_PTR glad_debug_impl_glTexGeni(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glTexGeni", (GLADapiproc) glTexGeni, 3, arg0, arg1, arg2);
    glTexGeni(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexGeni", (GLADapiproc) glTexGeni, 3, arg0, arg1, arg2);
    
}
PFNGLTEXGENIPROC glad_debug_glTexGeni = glad_debug_impl_glTexGeni;
PFNGLTEXGENIVPROC glad_glTexGeniv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexGeniv(GLenum arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glTexGeniv", (GLADapiproc) glTexGeniv, 3, arg0, arg1, arg2);
    glTexGeniv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexGeniv", (GLADapiproc) glTexGeniv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXGENIVPROC glad_debug_glTexGeniv = glad_debug_impl_glTexGeniv;
PFNGLTEXIMAGE1DPROC glad_glTexImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexImage1D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLint arg4, GLenum arg5, GLenum arg6, const void * arg7) {
    _pre_call_gl_callback("glTexImage1D", (GLADapiproc) glTexImage1D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glTexImage1D", (GLADapiproc) glTexImage1D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLTEXIMAGE1DPROC glad_debug_glTexImage1D = glad_debug_impl_glTexImage1D;
PFNGLTEXIMAGE2DPROC glad_glTexImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexImage2D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLsizei arg4, GLint arg5, GLenum arg6, GLenum arg7, const void * arg8) {
    _pre_call_gl_callback("glTexImage2D", (GLADapiproc) glTexImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glTexImage2D", (GLADapiproc) glTexImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLTEXIMAGE2DPROC glad_debug_glTexImage2D = glad_debug_impl_glTexImage2D;
PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample = NULL;
void GLAD_API_PTR glad_debug_impl_glTexImage2DMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLboolean arg5) {
    _pre_call_gl_callback("glTexImage2DMultisample", (GLADapiproc) glTexImage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glTexImage2DMultisample(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glTexImage2DMultisample", (GLADapiproc) glTexImage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_debug_glTexImage2DMultisample = glad_debug_impl_glTexImage2DMultisample;
PFNGLTEXIMAGE3DPROC glad_glTexImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexImage3D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLenum arg7, GLenum arg8, const void * arg9) {
    _pre_call_gl_callback("glTexImage3D", (GLADapiproc) glTexImage3D, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_gl_callback(NULL, "glTexImage3D", (GLADapiproc) glTexImage3D, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
}
PFNGLTEXIMAGE3DPROC glad_debug_glTexImage3D = glad_debug_impl_glTexImage3D;
PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample = NULL;
void GLAD_API_PTR glad_debug_impl_glTexImage3DMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLboolean arg6) {
    _pre_call_gl_callback("glTexImage3DMultisample", (GLADapiproc) glTexImage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glTexImage3DMultisample(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glTexImage3DMultisample", (GLADapiproc) glTexImage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_debug_glTexImage3DMultisample = glad_debug_impl_glTexImage3DMultisample;
PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameterIiv(GLenum arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glTexParameterIiv", (GLADapiproc) glTexParameterIiv, 3, arg0, arg1, arg2);
    glTexParameterIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameterIiv", (GLADapiproc) glTexParameterIiv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERIIVPROC glad_debug_glTexParameterIiv = glad_debug_impl_glTexParameterIiv;
PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameterIuiv(GLenum arg0, GLenum arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glTexParameterIuiv", (GLADapiproc) glTexParameterIuiv, 3, arg0, arg1, arg2);
    glTexParameterIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameterIuiv", (GLADapiproc) glTexParameterIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERIUIVPROC glad_debug_glTexParameterIuiv = glad_debug_impl_glTexParameterIuiv;
PFNGLTEXPARAMETERFPROC glad_glTexParameterf = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameterf(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_gl_callback("glTexParameterf", (GLADapiproc) glTexParameterf, 3, arg0, arg1, arg2);
    glTexParameterf(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameterf", (GLADapiproc) glTexParameterf, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERFPROC glad_debug_glTexParameterf = glad_debug_impl_glTexParameterf;
PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameterfv(GLenum arg0, GLenum arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glTexParameterfv", (GLADapiproc) glTexParameterfv, 3, arg0, arg1, arg2);
    glTexParameterfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameterfv", (GLADapiproc) glTexParameterfv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERFVPROC glad_debug_glTexParameterfv = glad_debug_impl_glTexParameterfv;
PFNGLTEXPARAMETERIPROC glad_glTexParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameteri(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glTexParameteri", (GLADapiproc) glTexParameteri, 3, arg0, arg1, arg2);
    glTexParameteri(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameteri", (GLADapiproc) glTexParameteri, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERIPROC glad_debug_glTexParameteri = glad_debug_impl_glTexParameteri;
PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameteriv(GLenum arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glTexParameteriv", (GLADapiproc) glTexParameteriv, 3, arg0, arg1, arg2);
    glTexParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameteriv", (GLADapiproc) glTexParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERIVPROC glad_debug_glTexParameteriv = glad_debug_impl_glTexParameteriv;
PFNGLTEXSTORAGE1DPROC glad_glTexStorage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexStorage1D(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3) {
    _pre_call_gl_callback("glTexStorage1D", (GLADapiproc) glTexStorage1D, 4, arg0, arg1, arg2, arg3);
    glTexStorage1D(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glTexStorage1D", (GLADapiproc) glTexStorage1D, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLTEXSTORAGE1DPROC glad_debug_glTexStorage1D = glad_debug_impl_glTexStorage1D;
PFNGLTEXSTORAGE2DPROC glad_glTexStorage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexStorage2D(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_gl_callback("glTexStorage2D", (GLADapiproc) glTexStorage2D, 5, arg0, arg1, arg2, arg3, arg4);
    glTexStorage2D(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glTexStorage2D", (GLADapiproc) glTexStorage2D, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLTEXSTORAGE2DPROC glad_debug_glTexStorage2D = glad_debug_impl_glTexStorage2D;
PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_glTexStorage2DMultisample = NULL;
void GLAD_API_PTR glad_debug_impl_glTexStorage2DMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLboolean arg5) {
    _pre_call_gl_callback("glTexStorage2DMultisample", (GLADapiproc) glTexStorage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glTexStorage2DMultisample(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glTexStorage2DMultisample", (GLADapiproc) glTexStorage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_debug_glTexStorage2DMultisample = glad_debug_impl_glTexStorage2DMultisample;
PFNGLTEXSTORAGE3DPROC glad_glTexStorage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexStorage3D(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5) {
    _pre_call_gl_callback("glTexStorage3D", (GLADapiproc) glTexStorage3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glTexStorage3D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glTexStorage3D", (GLADapiproc) glTexStorage3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLTEXSTORAGE3DPROC glad_debug_glTexStorage3D = glad_debug_impl_glTexStorage3D;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_glTexStorage3DMultisample = NULL;
void GLAD_API_PTR glad_debug_impl_glTexStorage3DMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLboolean arg6) {
    _pre_call_gl_callback("glTexStorage3DMultisample", (GLADapiproc) glTexStorage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glTexStorage3DMultisample(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glTexStorage3DMultisample", (GLADapiproc) glTexStorage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_debug_glTexStorage3DMultisample = glad_debug_impl_glTexStorage3DMultisample;
PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexSubImage1D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLenum arg5, const void * arg6) {
    _pre_call_gl_callback("glTexSubImage1D", (GLADapiproc) glTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glTexSubImage1D", (GLADapiproc) glTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLTEXSUBIMAGE1DPROC glad_debug_glTexSubImage1D = glad_debug_impl_glTexSubImage1D;
PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexSubImage2D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLenum arg7, const void * arg8) {
    _pre_call_gl_callback("glTexSubImage2D", (GLADapiproc) glTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glTexSubImage2D", (GLADapiproc) glTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLTEXSUBIMAGE2DPROC glad_debug_glTexSubImage2D = glad_debug_impl_glTexSubImage2D;
PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexSubImage3D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLenum arg9, const void * arg10) {
    _pre_call_gl_callback("glTexSubImage3D", (GLADapiproc) glTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_gl_callback(NULL, "glTexSubImage3D", (GLADapiproc) glTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
}
PFNGLTEXSUBIMAGE3DPROC glad_debug_glTexSubImage3D = glad_debug_impl_glTexSubImage3D;
PFNGLTEXTUREBARRIERPROC glad_glTextureBarrier = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureBarrier(void) {
    _pre_call_gl_callback("glTextureBarrier", (GLADapiproc) glTextureBarrier, 0);
    glTextureBarrier();
    _post_call_gl_callback(NULL, "glTextureBarrier", (GLADapiproc) glTextureBarrier, 0);
    
}
PFNGLTEXTUREBARRIERPROC glad_debug_glTextureBarrier = glad_debug_impl_glTextureBarrier;
PFNGLTEXTUREBUFFERPROC glad_glTextureBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureBuffer(GLuint arg0, GLenum arg1, GLuint arg2) {
    _pre_call_gl_callback("glTextureBuffer", (GLADapiproc) glTextureBuffer, 3, arg0, arg1, arg2);
    glTextureBuffer(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTextureBuffer", (GLADapiproc) glTextureBuffer, 3, arg0, arg1, arg2);
    
}
PFNGLTEXTUREBUFFERPROC glad_debug_glTextureBuffer = glad_debug_impl_glTextureBuffer;
PFNGLTEXTUREBUFFERRANGEPROC glad_glTextureBufferRange = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureBufferRange(GLuint arg0, GLenum arg1, GLuint arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_gl_callback("glTextureBufferRange", (GLADapiproc) glTextureBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
    glTextureBufferRange(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glTextureBufferRange", (GLADapiproc) glTextureBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLTEXTUREBUFFERRANGEPROC glad_debug_glTextureBufferRange = glad_debug_impl_glTextureBufferRange;
PFNGLTEXTUREPARAMETERIIVPROC glad_glTextureParameterIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureParameterIiv(GLuint arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glTextureParameterIiv", (GLADapiproc) glTextureParameterIiv, 3, arg0, arg1, arg2);
    glTextureParameterIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTextureParameterIiv", (GLADapiproc) glTextureParameterIiv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXTUREPARAMETERIIVPROC glad_debug_glTextureParameterIiv = glad_debug_impl_glTextureParameterIiv;
PFNGLTEXTUREPARAMETERIUIVPROC glad_glTextureParameterIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureParameterIuiv(GLuint arg0, GLenum arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glTextureParameterIuiv", (GLADapiproc) glTextureParameterIuiv, 3, arg0, arg1, arg2);
    glTextureParameterIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTextureParameterIuiv", (GLADapiproc) glTextureParameterIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXTUREPARAMETERIUIVPROC glad_debug_glTextureParameterIuiv = glad_debug_impl_glTextureParameterIuiv;
PFNGLTEXTUREPARAMETERFPROC glad_glTextureParameterf = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureParameterf(GLuint arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_gl_callback("glTextureParameterf", (GLADapiproc) glTextureParameterf, 3, arg0, arg1, arg2);
    glTextureParameterf(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTextureParameterf", (GLADapiproc) glTextureParameterf, 3, arg0, arg1, arg2);
    
}
PFNGLTEXTUREPARAMETERFPROC glad_debug_glTextureParameterf = glad_debug_impl_glTextureParameterf;
PFNGLTEXTUREPARAMETERFVPROC glad_glTextureParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureParameterfv(GLuint arg0, GLenum arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glTextureParameterfv", (GLADapiproc) glTextureParameterfv, 3, arg0, arg1, arg2);
    glTextureParameterfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTextureParameterfv", (GLADapiproc) glTextureParameterfv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXTUREPARAMETERFVPROC glad_debug_glTextureParameterfv = glad_debug_impl_glTextureParameterfv;
PFNGLTEXTUREPARAMETERIPROC glad_glTextureParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureParameteri(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glTextureParameteri", (GLADapiproc) glTextureParameteri, 3, arg0, arg1, arg2);
    glTextureParameteri(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTextureParameteri", (GLADapiproc) glTextureParameteri, 3, arg0, arg1, arg2);
    
}
PFNGLTEXTUREPARAMETERIPROC glad_debug_glTextureParameteri = glad_debug_impl_glTextureParameteri;
PFNGLTEXTUREPARAMETERIVPROC glad_glTextureParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureParameteriv(GLuint arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glTextureParameteriv", (GLADapiproc) glTextureParameteriv, 3, arg0, arg1, arg2);
    glTextureParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTextureParameteriv", (GLADapiproc) glTextureParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXTUREPARAMETERIVPROC glad_debug_glTextureParameteriv = glad_debug_impl_glTextureParameteriv;
PFNGLTEXTURESTORAGE1DPROC glad_glTextureStorage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureStorage1D(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3) {
    _pre_call_gl_callback("glTextureStorage1D", (GLADapiproc) glTextureStorage1D, 4, arg0, arg1, arg2, arg3);
    glTextureStorage1D(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glTextureStorage1D", (GLADapiproc) glTextureStorage1D, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLTEXTURESTORAGE1DPROC glad_debug_glTextureStorage1D = glad_debug_impl_glTextureStorage1D;
PFNGLTEXTURESTORAGE2DPROC glad_glTextureStorage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureStorage2D(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_gl_callback("glTextureStorage2D", (GLADapiproc) glTextureStorage2D, 5, arg0, arg1, arg2, arg3, arg4);
    glTextureStorage2D(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glTextureStorage2D", (GLADapiproc) glTextureStorage2D, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLTEXTURESTORAGE2DPROC glad_debug_glTextureStorage2D = glad_debug_impl_glTextureStorage2D;
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_glTextureStorage2DMultisample = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureStorage2DMultisample(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLboolean arg5) {
    _pre_call_gl_callback("glTextureStorage2DMultisample", (GLADapiproc) glTextureStorage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glTextureStorage2DMultisample(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glTextureStorage2DMultisample", (GLADapiproc) glTextureStorage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_debug_glTextureStorage2DMultisample = glad_debug_impl_glTextureStorage2DMultisample;
PFNGLTEXTURESTORAGE3DPROC glad_glTextureStorage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureStorage3D(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5) {
    _pre_call_gl_callback("glTextureStorage3D", (GLADapiproc) glTextureStorage3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glTextureStorage3D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glTextureStorage3D", (GLADapiproc) glTextureStorage3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLTEXTURESTORAGE3DPROC glad_debug_glTextureStorage3D = glad_debug_impl_glTextureStorage3D;
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_glTextureStorage3DMultisample = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureStorage3DMultisample(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLboolean arg6) {
    _pre_call_gl_callback("glTextureStorage3DMultisample", (GLADapiproc) glTextureStorage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glTextureStorage3DMultisample(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glTextureStorage3DMultisample", (GLADapiproc) glTextureStorage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_debug_glTextureStorage3DMultisample = glad_debug_impl_glTextureStorage3DMultisample;
PFNGLTEXTURESUBIMAGE1DPROC glad_glTextureSubImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureSubImage1D(GLuint arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLenum arg5, const void * arg6) {
    _pre_call_gl_callback("glTextureSubImage1D", (GLADapiproc) glTextureSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glTextureSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glTextureSubImage1D", (GLADapiproc) glTextureSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLTEXTURESUBIMAGE1DPROC glad_debug_glTextureSubImage1D = glad_debug_impl_glTextureSubImage1D;
PFNGLTEXTURESUBIMAGE2DPROC glad_glTextureSubImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureSubImage2D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLenum arg7, const void * arg8) {
    _pre_call_gl_callback("glTextureSubImage2D", (GLADapiproc) glTextureSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glTextureSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glTextureSubImage2D", (GLADapiproc) glTextureSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLTEXTURESUBIMAGE2DPROC glad_debug_glTextureSubImage2D = glad_debug_impl_glTextureSubImage2D;
PFNGLTEXTURESUBIMAGE3DPROC glad_glTextureSubImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureSubImage3D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLenum arg9, const void * arg10) {
    _pre_call_gl_callback("glTextureSubImage3D", (GLADapiproc) glTextureSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    glTextureSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_gl_callback(NULL, "glTextureSubImage3D", (GLADapiproc) glTextureSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
}
PFNGLTEXTURESUBIMAGE3DPROC glad_debug_glTextureSubImage3D = glad_debug_impl_glTextureSubImage3D;
PFNGLTEXTUREVIEWPROC glad_glTextureView = NULL;
void GLAD_API_PTR glad_debug_impl_glTextureView(GLuint arg0, GLenum arg1, GLuint arg2, GLenum arg3, GLuint arg4, GLuint arg5, GLuint arg6, GLuint arg7) {
    _pre_call_gl_callback("glTextureView", (GLADapiproc) glTextureView, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glTextureView(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glTextureView", (GLADapiproc) glTextureView, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLTEXTUREVIEWPROC glad_debug_glTextureView = glad_debug_impl_glTextureView;
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_glTransformFeedbackBufferBase = NULL;
void GLAD_API_PTR glad_debug_impl_glTransformFeedbackBufferBase(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glTransformFeedbackBufferBase", (GLADapiproc) glTransformFeedbackBufferBase, 3, arg0, arg1, arg2);
    glTransformFeedbackBufferBase(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTransformFeedbackBufferBase", (GLADapiproc) glTransformFeedbackBufferBase, 3, arg0, arg1, arg2);
    
}
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_debug_glTransformFeedbackBufferBase = glad_debug_impl_glTransformFeedbackBufferBase;
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_glTransformFeedbackBufferRange = NULL;
void GLAD_API_PTR glad_debug_impl_glTransformFeedbackBufferRange(GLuint arg0, GLuint arg1, GLuint arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_gl_callback("glTransformFeedbackBufferRange", (GLADapiproc) glTransformFeedbackBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
    glTransformFeedbackBufferRange(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glTransformFeedbackBufferRange", (GLADapiproc) glTransformFeedbackBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_debug_glTransformFeedbackBufferRange = glad_debug_impl_glTransformFeedbackBufferRange;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings = NULL;
void GLAD_API_PTR glad_debug_impl_glTransformFeedbackVaryings(GLuint arg0, GLsizei arg1, const GLchar *const* arg2, GLenum arg3) {
    _pre_call_gl_callback("glTransformFeedbackVaryings", (GLADapiproc) glTransformFeedbackVaryings, 4, arg0, arg1, arg2, arg3);
    glTransformFeedbackVaryings(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glTransformFeedbackVaryings", (GLADapiproc) glTransformFeedbackVaryings, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_debug_glTransformFeedbackVaryings = glad_debug_impl_glTransformFeedbackVaryings;
PFNGLTRANSLATEDPROC glad_glTranslated = NULL;
void GLAD_API_PTR glad_debug_impl_glTranslated(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glTranslated", (GLADapiproc) glTranslated, 3, arg0, arg1, arg2);
    glTranslated(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTranslated", (GLADapiproc) glTranslated, 3, arg0, arg1, arg2);
    
}
PFNGLTRANSLATEDPROC glad_debug_glTranslated = glad_debug_impl_glTranslated;
PFNGLTRANSLATEFPROC glad_glTranslatef = NULL;
void GLAD_API_PTR glad_debug_impl_glTranslatef(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glTranslatef", (GLADapiproc) glTranslatef, 3, arg0, arg1, arg2);
    glTranslatef(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTranslatef", (GLADapiproc) glTranslatef, 3, arg0, arg1, arg2);
    
}
PFNGLTRANSLATEFPROC glad_debug_glTranslatef = glad_debug_impl_glTranslatef;
PFNGLUNIFORM1DPROC glad_glUniform1d = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1d(GLint arg0, GLdouble arg1) {
    _pre_call_gl_callback("glUniform1d", (GLADapiproc) glUniform1d, 2, arg0, arg1);
    glUniform1d(arg0, arg1);
    _post_call_gl_callback(NULL, "glUniform1d", (GLADapiproc) glUniform1d, 2, arg0, arg1);
    
}
PFNGLUNIFORM1DPROC glad_debug_glUniform1d = glad_debug_impl_glUniform1d;
PFNGLUNIFORM1DVPROC glad_glUniform1dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1dv(GLint arg0, GLsizei arg1, const GLdouble * arg2) {
    _pre_call_gl_callback("glUniform1dv", (GLADapiproc) glUniform1dv, 3, arg0, arg1, arg2);
    glUniform1dv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform1dv", (GLADapiproc) glUniform1dv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM1DVPROC glad_debug_glUniform1dv = glad_debug_impl_glUniform1dv;
PFNGLUNIFORM1FPROC glad_glUniform1f = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1f(GLint arg0, GLfloat arg1) {
    _pre_call_gl_callback("glUniform1f", (GLADapiproc) glUniform1f, 2, arg0, arg1);
    glUniform1f(arg0, arg1);
    _post_call_gl_callback(NULL, "glUniform1f", (GLADapiproc) glUniform1f, 2, arg0, arg1);
    
}
PFNGLUNIFORM1FPROC glad_debug_glUniform1f = glad_debug_impl_glUniform1f;
PFNGLUNIFORM1FVPROC glad_glUniform1fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1fv(GLint arg0, GLsizei arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glUniform1fv", (GLADapiproc) glUniform1fv, 3, arg0, arg1, arg2);
    glUniform1fv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform1fv", (GLADapiproc) glUniform1fv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM1FVPROC glad_debug_glUniform1fv = glad_debug_impl_glUniform1fv;
PFNGLUNIFORM1IPROC glad_glUniform1i = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1i(GLint arg0, GLint arg1) {
    _pre_call_gl_callback("glUniform1i", (GLADapiproc) glUniform1i, 2, arg0, arg1);
    glUniform1i(arg0, arg1);
    _post_call_gl_callback(NULL, "glUniform1i", (GLADapiproc) glUniform1i, 2, arg0, arg1);
    
}
PFNGLUNIFORM1IPROC glad_debug_glUniform1i = glad_debug_impl_glUniform1i;
PFNGLUNIFORM1IVPROC glad_glUniform1iv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1iv(GLint arg0, GLsizei arg1, const GLint * arg2) {
    _pre_call_gl_callback("glUniform1iv", (GLADapiproc) glUniform1iv, 3, arg0, arg1, arg2);
    glUniform1iv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform1iv", (GLADapiproc) glUniform1iv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM1IVPROC glad_debug_glUniform1iv = glad_debug_impl_glUniform1iv;
PFNGLUNIFORM1UIPROC glad_glUniform1ui = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1ui(GLint arg0, GLuint arg1) {
    _pre_call_gl_callback("glUniform1ui", (GLADapiproc) glUniform1ui, 2, arg0, arg1);
    glUniform1ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glUniform1ui", (GLADapiproc) glUniform1ui, 2, arg0, arg1);
    
}
PFNGLUNIFORM1UIPROC glad_debug_glUniform1ui = glad_debug_impl_glUniform1ui;
PFNGLUNIFORM1UIVPROC glad_glUniform1uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1uiv(GLint arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glUniform1uiv", (GLADapiproc) glUniform1uiv, 3, arg0, arg1, arg2);
    glUniform1uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform1uiv", (GLADapiproc) glUniform1uiv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM1UIVPROC glad_debug_glUniform1uiv = glad_debug_impl_glUniform1uiv;
PFNGLUNIFORM2DPROC glad_glUniform2d = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2d(GLint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glUniform2d", (GLADapiproc) glUniform2d, 3, arg0, arg1, arg2);
    glUniform2d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2d", (GLADapiproc) glUniform2d, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2DPROC glad_debug_glUniform2d = glad_debug_impl_glUniform2d;
PFNGLUNIFORM2DVPROC glad_glUniform2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2dv(GLint arg0, GLsizei arg1, const GLdouble * arg2) {
    _pre_call_gl_callback("glUniform2dv", (GLADapiproc) glUniform2dv, 3, arg0, arg1, arg2);
    glUniform2dv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2dv", (GLADapiproc) glUniform2dv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2DVPROC glad_debug_glUniform2dv = glad_debug_impl_glUniform2dv;
PFNGLUNIFORM2FPROC glad_glUniform2f = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2f(GLint arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glUniform2f", (GLADapiproc) glUniform2f, 3, arg0, arg1, arg2);
    glUniform2f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2f", (GLADapiproc) glUniform2f, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2FPROC glad_debug_glUniform2f = glad_debug_impl_glUniform2f;
PFNGLUNIFORM2FVPROC glad_glUniform2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2fv(GLint arg0, GLsizei arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glUniform2fv", (GLADapiproc) glUniform2fv, 3, arg0, arg1, arg2);
    glUniform2fv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2fv", (GLADapiproc) glUniform2fv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2FVPROC glad_debug_glUniform2fv = glad_debug_impl_glUniform2fv;
PFNGLUNIFORM2IPROC glad_glUniform2i = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2i(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glUniform2i", (GLADapiproc) glUniform2i, 3, arg0, arg1, arg2);
    glUniform2i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2i", (GLADapiproc) glUniform2i, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2IPROC glad_debug_glUniform2i = glad_debug_impl_glUniform2i;
PFNGLUNIFORM2IVPROC glad_glUniform2iv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2iv(GLint arg0, GLsizei arg1, const GLint * arg2) {
    _pre_call_gl_callback("glUniform2iv", (GLADapiproc) glUniform2iv, 3, arg0, arg1, arg2);
    glUniform2iv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2iv", (GLADapiproc) glUniform2iv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2IVPROC glad_debug_glUniform2iv = glad_debug_impl_glUniform2iv;
PFNGLUNIFORM2UIPROC glad_glUniform2ui = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2ui(GLint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glUniform2ui", (GLADapiproc) glUniform2ui, 3, arg0, arg1, arg2);
    glUniform2ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2ui", (GLADapiproc) glUniform2ui, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2UIPROC glad_debug_glUniform2ui = glad_debug_impl_glUniform2ui;
PFNGLUNIFORM2UIVPROC glad_glUniform2uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2uiv(GLint arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glUniform2uiv", (GLADapiproc) glUniform2uiv, 3, arg0, arg1, arg2);
    glUniform2uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2uiv", (GLADapiproc) glUniform2uiv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2UIVPROC glad_debug_glUniform2uiv = glad_debug_impl_glUniform2uiv;
PFNGLUNIFORM3DPROC glad_glUniform3d = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3d(GLint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glUniform3d", (GLADapiproc) glUniform3d, 4, arg0, arg1, arg2, arg3);
    glUniform3d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniform3d", (GLADapiproc) glUniform3d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORM3DPROC glad_debug_glUniform3d = glad_debug_impl_glUniform3d;
PFNGLUNIFORM3DVPROC glad_glUniform3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3dv(GLint arg0, GLsizei arg1, const GLdouble * arg2) {
    _pre_call_gl_callback("glUniform3dv", (GLADapiproc) glUniform3dv, 3, arg0, arg1, arg2);
    glUniform3dv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform3dv", (GLADapiproc) glUniform3dv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM3DVPROC glad_debug_glUniform3dv = glad_debug_impl_glUniform3dv;
PFNGLUNIFORM3FPROC glad_glUniform3f = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3f(GLint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glUniform3f", (GLADapiproc) glUniform3f, 4, arg0, arg1, arg2, arg3);
    glUniform3f(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniform3f", (GLADapiproc) glUniform3f, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORM3FPROC glad_debug_glUniform3f = glad_debug_impl_glUniform3f;
PFNGLUNIFORM3FVPROC glad_glUniform3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3fv(GLint arg0, GLsizei arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glUniform3fv", (GLADapiproc) glUniform3fv, 3, arg0, arg1, arg2);
    glUniform3fv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform3fv", (GLADapiproc) glUniform3fv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM3FVPROC glad_debug_glUniform3fv = glad_debug_impl_glUniform3fv;
PFNGLUNIFORM3IPROC glad_glUniform3i = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3i(GLint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glUniform3i", (GLADapiproc) glUniform3i, 4, arg0, arg1, arg2, arg3);
    glUniform3i(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniform3i", (GLADapiproc) glUniform3i, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORM3IPROC glad_debug_glUniform3i = glad_debug_impl_glUniform3i;
PFNGLUNIFORM3IVPROC glad_glUniform3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3iv(GLint arg0, GLsizei arg1, const GLint * arg2) {
    _pre_call_gl_callback("glUniform3iv", (GLADapiproc) glUniform3iv, 3, arg0, arg1, arg2);
    glUniform3iv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform3iv", (GLADapiproc) glUniform3iv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM3IVPROC glad_debug_glUniform3iv = glad_debug_impl_glUniform3iv;
PFNGLUNIFORM3UIPROC glad_glUniform3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3ui(GLint arg0, GLuint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_gl_callback("glUniform3ui", (GLADapiproc) glUniform3ui, 4, arg0, arg1, arg2, arg3);
    glUniform3ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniform3ui", (GLADapiproc) glUniform3ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORM3UIPROC glad_debug_glUniform3ui = glad_debug_impl_glUniform3ui;
PFNGLUNIFORM3UIVPROC glad_glUniform3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3uiv(GLint arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glUniform3uiv", (GLADapiproc) glUniform3uiv, 3, arg0, arg1, arg2);
    glUniform3uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform3uiv", (GLADapiproc) glUniform3uiv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM3UIVPROC glad_debug_glUniform3uiv = glad_debug_impl_glUniform3uiv;
PFNGLUNIFORM4DPROC glad_glUniform4d = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4d(GLint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_gl_callback("glUniform4d", (GLADapiproc) glUniform4d, 5, arg0, arg1, arg2, arg3, arg4);
    glUniform4d(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glUniform4d", (GLADapiproc) glUniform4d, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLUNIFORM4DPROC glad_debug_glUniform4d = glad_debug_impl_glUniform4d;
PFNGLUNIFORM4DVPROC glad_glUniform4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4dv(GLint arg0, GLsizei arg1, const GLdouble * arg2) {
    _pre_call_gl_callback("glUniform4dv", (GLADapiproc) glUniform4dv, 3, arg0, arg1, arg2);
    glUniform4dv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform4dv", (GLADapiproc) glUniform4dv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM4DVPROC glad_debug_glUniform4dv = glad_debug_impl_glUniform4dv;
PFNGLUNIFORM4FPROC glad_glUniform4f = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4f(GLint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_gl_callback("glUniform4f", (GLADapiproc) glUniform4f, 5, arg0, arg1, arg2, arg3, arg4);
    glUniform4f(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glUniform4f", (GLADapiproc) glUniform4f, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLUNIFORM4FPROC glad_debug_glUniform4f = glad_debug_impl_glUniform4f;
PFNGLUNIFORM4FVPROC glad_glUniform4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4fv(GLint arg0, GLsizei arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glUniform4fv", (GLADapiproc) glUniform4fv, 3, arg0, arg1, arg2);
    glUniform4fv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform4fv", (GLADapiproc) glUniform4fv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM4FVPROC glad_debug_glUniform4fv = glad_debug_impl_glUniform4fv;
PFNGLUNIFORM4IPROC glad_glUniform4i = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4i(GLint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_gl_callback("glUniform4i", (GLADapiproc) glUniform4i, 5, arg0, arg1, arg2, arg3, arg4);
    glUniform4i(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glUniform4i", (GLADapiproc) glUniform4i, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLUNIFORM4IPROC glad_debug_glUniform4i = glad_debug_impl_glUniform4i;
PFNGLUNIFORM4IVPROC glad_glUniform4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4iv(GLint arg0, GLsizei arg1, const GLint * arg2) {
    _pre_call_gl_callback("glUniform4iv", (GLADapiproc) glUniform4iv, 3, arg0, arg1, arg2);
    glUniform4iv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform4iv", (GLADapiproc) glUniform4iv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM4IVPROC glad_debug_glUniform4iv = glad_debug_impl_glUniform4iv;
PFNGLUNIFORM4UIPROC glad_glUniform4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4ui(GLint arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_gl_callback("glUniform4ui", (GLADapiproc) glUniform4ui, 5, arg0, arg1, arg2, arg3, arg4);
    glUniform4ui(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glUniform4ui", (GLADapiproc) glUniform4ui, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLUNIFORM4UIPROC glad_debug_glUniform4ui = glad_debug_impl_glUniform4ui;
PFNGLUNIFORM4UIVPROC glad_glUniform4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4uiv(GLint arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glUniform4uiv", (GLADapiproc) glUniform4uiv, 3, arg0, arg1, arg2);
    glUniform4uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform4uiv", (GLADapiproc) glUniform4uiv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM4UIVPROC glad_debug_glUniform4uiv = glad_debug_impl_glUniform4uiv;
PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformBlockBinding(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glUniformBlockBinding", (GLADapiproc) glUniformBlockBinding, 3, arg0, arg1, arg2);
    glUniformBlockBinding(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniformBlockBinding", (GLADapiproc) glUniformBlockBinding, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORMBLOCKBINDINGPROC glad_debug_glUniformBlockBinding = glad_debug_impl_glUniformBlockBinding;
PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix2dv", (GLADapiproc) glUniformMatrix2dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2dv", (GLADapiproc) glUniformMatrix2dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2DVPROC glad_debug_glUniformMatrix2dv = glad_debug_impl_glUniformMatrix2dv;
PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix2fv", (GLADapiproc) glUniformMatrix2fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2fv", (GLADapiproc) glUniformMatrix2fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2FVPROC glad_debug_glUniformMatrix2fv = glad_debug_impl_glUniformMatrix2fv;
PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2x3dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix2x3dv", (GLADapiproc) glUniformMatrix2x3dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2x3dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2x3dv", (GLADapiproc) glUniformMatrix2x3dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2X3DVPROC glad_debug_glUniformMatrix2x3dv = glad_debug_impl_glUniformMatrix2x3dv;
PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2x3fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix2x3fv", (GLADapiproc) glUniformMatrix2x3fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2x3fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2x3fv", (GLADapiproc) glUniformMatrix2x3fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2X3FVPROC glad_debug_glUniformMatrix2x3fv = glad_debug_impl_glUniformMatrix2x3fv;
PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2x4dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix2x4dv", (GLADapiproc) glUniformMatrix2x4dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2x4dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2x4dv", (GLADapiproc) glUniformMatrix2x4dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2X4DVPROC glad_debug_glUniformMatrix2x4dv = glad_debug_impl_glUniformMatrix2x4dv;
PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2x4fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix2x4fv", (GLADapiproc) glUniformMatrix2x4fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2x4fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2x4fv", (GLADapiproc) glUniformMatrix2x4fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2X4FVPROC glad_debug_glUniformMatrix2x4fv = glad_debug_impl_glUniformMatrix2x4fv;
PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix3dv", (GLADapiproc) glUniformMatrix3dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3dv", (GLADapiproc) glUniformMatrix3dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3DVPROC glad_debug_glUniformMatrix3dv = glad_debug_impl_glUniformMatrix3dv;
PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix3fv", (GLADapiproc) glUniformMatrix3fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3fv", (GLADapiproc) glUniformMatrix3fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3FVPROC glad_debug_glUniformMatrix3fv = glad_debug_impl_glUniformMatrix3fv;
PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3x2dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix3x2dv", (GLADapiproc) glUniformMatrix3x2dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3x2dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3x2dv", (GLADapiproc) glUniformMatrix3x2dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3X2DVPROC glad_debug_glUniformMatrix3x2dv = glad_debug_impl_glUniformMatrix3x2dv;
PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3x2fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix3x2fv", (GLADapiproc) glUniformMatrix3x2fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3x2fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3x2fv", (GLADapiproc) glUniformMatrix3x2fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3X2FVPROC glad_debug_glUniformMatrix3x2fv = glad_debug_impl_glUniformMatrix3x2fv;
PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3x4dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix3x4dv", (GLADapiproc) glUniformMatrix3x4dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3x4dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3x4dv", (GLADapiproc) glUniformMatrix3x4dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3X4DVPROC glad_debug_glUniformMatrix3x4dv = glad_debug_impl_glUniformMatrix3x4dv;
PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3x4fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix3x4fv", (GLADapiproc) glUniformMatrix3x4fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3x4fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3x4fv", (GLADapiproc) glUniformMatrix3x4fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3X4FVPROC glad_debug_glUniformMatrix3x4fv = glad_debug_impl_glUniformMatrix3x4fv;
PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix4dv", (GLADapiproc) glUniformMatrix4dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4dv", (GLADapiproc) glUniformMatrix4dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4DVPROC glad_debug_glUniformMatrix4dv = glad_debug_impl_glUniformMatrix4dv;
PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix4fv", (GLADapiproc) glUniformMatrix4fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4fv", (GLADapiproc) glUniformMatrix4fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4FVPROC glad_debug_glUniformMatrix4fv = glad_debug_impl_glUniformMatrix4fv;
PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4x2dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix4x2dv", (GLADapiproc) glUniformMatrix4x2dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4x2dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4x2dv", (GLADapiproc) glUniformMatrix4x2dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4X2DVPROC glad_debug_glUniformMatrix4x2dv = glad_debug_impl_glUniformMatrix4x2dv;
PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4x2fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix4x2fv", (GLADapiproc) glUniformMatrix4x2fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4x2fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4x2fv", (GLADapiproc) glUniformMatrix4x2fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4X2FVPROC glad_debug_glUniformMatrix4x2fv = glad_debug_impl_glUniformMatrix4x2fv;
PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4x3dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix4x3dv", (GLADapiproc) glUniformMatrix4x3dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4x3dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4x3dv", (GLADapiproc) glUniformMatrix4x3dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4X3DVPROC glad_debug_glUniformMatrix4x3dv = glad_debug_impl_glUniformMatrix4x3dv;
PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4x3fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix4x3fv", (GLADapiproc) glUniformMatrix4x3fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4x3fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4x3fv", (GLADapiproc) glUniformMatrix4x3fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4X3FVPROC glad_debug_glUniformMatrix4x3fv = glad_debug_impl_glUniformMatrix4x3fv;
PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformSubroutinesuiv(GLenum arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glUniformSubroutinesuiv", (GLADapiproc) glUniformSubroutinesuiv, 3, arg0, arg1, arg2);
    glUniformSubroutinesuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniformSubroutinesuiv", (GLADapiproc) glUniformSubroutinesuiv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORMSUBROUTINESUIVPROC glad_debug_glUniformSubroutinesuiv = glad_debug_impl_glUniformSubroutinesuiv;
PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glUnmapBuffer(GLenum arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glUnmapBuffer", (GLADapiproc) glUnmapBuffer, 1, arg0);
    ret = glUnmapBuffer(arg0);
    _post_call_gl_callback((void*) &ret, "glUnmapBuffer", (GLADapiproc) glUnmapBuffer, 1, arg0);
    return ret;
}
PFNGLUNMAPBUFFERPROC glad_debug_glUnmapBuffer = glad_debug_impl_glUnmapBuffer;
PFNGLUNMAPNAMEDBUFFERPROC glad_glUnmapNamedBuffer = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glUnmapNamedBuffer(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glUnmapNamedBuffer", (GLADapiproc) glUnmapNamedBuffer, 1, arg0);
    ret = glUnmapNamedBuffer(arg0);
    _post_call_gl_callback((void*) &ret, "glUnmapNamedBuffer", (GLADapiproc) glUnmapNamedBuffer, 1, arg0);
    return ret;
}
PFNGLUNMAPNAMEDBUFFERPROC glad_debug_glUnmapNamedBuffer = glad_debug_impl_glUnmapNamedBuffer;
PFNGLUSEPROGRAMPROC glad_glUseProgram = NULL;
void GLAD_API_PTR glad_debug_impl_glUseProgram(GLuint arg0) {
    _pre_call_gl_callback("glUseProgram", (GLADapiproc) glUseProgram, 1, arg0);
    glUseProgram(arg0);
    _post_call_gl_callback(NULL, "glUseProgram", (GLADapiproc) glUseProgram, 1, arg0);
    
}
PFNGLUSEPROGRAMPROC glad_debug_glUseProgram = glad_debug_impl_glUseProgram;
PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages = NULL;
void GLAD_API_PTR glad_debug_impl_glUseProgramStages(GLuint arg0, GLbitfield arg1, GLuint arg2) {
    _pre_call_gl_callback("glUseProgramStages", (GLADapiproc) glUseProgramStages, 3, arg0, arg1, arg2);
    glUseProgramStages(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUseProgramStages", (GLADapiproc) glUseProgramStages, 3, arg0, arg1, arg2);
    
}
PFNGLUSEPROGRAMSTAGESPROC glad_debug_glUseProgramStages = glad_debug_impl_glUseProgramStages;
PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram = NULL;
void GLAD_API_PTR glad_debug_impl_glValidateProgram(GLuint arg0) {
    _pre_call_gl_callback("glValidateProgram", (GLADapiproc) glValidateProgram, 1, arg0);
    glValidateProgram(arg0);
    _post_call_gl_callback(NULL, "glValidateProgram", (GLADapiproc) glValidateProgram, 1, arg0);
    
}
PFNGLVALIDATEPROGRAMPROC glad_debug_glValidateProgram = glad_debug_impl_glValidateProgram;
PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline = NULL;
void GLAD_API_PTR glad_debug_impl_glValidateProgramPipeline(GLuint arg0) {
    _pre_call_gl_callback("glValidateProgramPipeline", (GLADapiproc) glValidateProgramPipeline, 1, arg0);
    glValidateProgramPipeline(arg0);
    _post_call_gl_callback(NULL, "glValidateProgramPipeline", (GLADapiproc) glValidateProgramPipeline, 1, arg0);
    
}
PFNGLVALIDATEPROGRAMPIPELINEPROC glad_debug_glValidateProgramPipeline = glad_debug_impl_glValidateProgramPipeline;
PFNGLVERTEX2DPROC glad_glVertex2d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex2d(GLdouble arg0, GLdouble arg1) {
    _pre_call_gl_callback("glVertex2d", (GLADapiproc) glVertex2d, 2, arg0, arg1);
    glVertex2d(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertex2d", (GLADapiproc) glVertex2d, 2, arg0, arg1);
    
}
PFNGLVERTEX2DPROC glad_debug_glVertex2d = glad_debug_impl_glVertex2d;
PFNGLVERTEX2DVPROC glad_glVertex2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex2dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glVertex2dv", (GLADapiproc) glVertex2dv, 1, arg0);
    glVertex2dv(arg0);
    _post_call_gl_callback(NULL, "glVertex2dv", (GLADapiproc) glVertex2dv, 1, arg0);
    
}
PFNGLVERTEX2DVPROC glad_debug_glVertex2dv = glad_debug_impl_glVertex2dv;
PFNGLVERTEX2FPROC glad_glVertex2f = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex2f(GLfloat arg0, GLfloat arg1) {
    _pre_call_gl_callback("glVertex2f", (GLADapiproc) glVertex2f, 2, arg0, arg1);
    glVertex2f(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertex2f", (GLADapiproc) glVertex2f, 2, arg0, arg1);
    
}
PFNGLVERTEX2FPROC glad_debug_glVertex2f = glad_debug_impl_glVertex2f;
PFNGLVERTEX2FVPROC glad_glVertex2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex2fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glVertex2fv", (GLADapiproc) glVertex2fv, 1, arg0);
    glVertex2fv(arg0);
    _post_call_gl_callback(NULL, "glVertex2fv", (GLADapiproc) glVertex2fv, 1, arg0);
    
}
PFNGLVERTEX2FVPROC glad_debug_glVertex2fv = glad_debug_impl_glVertex2fv;
PFNGLVERTEX2IPROC glad_glVertex2i = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex2i(GLint arg0, GLint arg1) {
    _pre_call_gl_callback("glVertex2i", (GLADapiproc) glVertex2i, 2, arg0, arg1);
    glVertex2i(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertex2i", (GLADapiproc) glVertex2i, 2, arg0, arg1);
    
}
PFNGLVERTEX2IPROC glad_debug_glVertex2i = glad_debug_impl_glVertex2i;
PFNGLVERTEX2IVPROC glad_glVertex2iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex2iv(const GLint * arg0) {
    _pre_call_gl_callback("glVertex2iv", (GLADapiproc) glVertex2iv, 1, arg0);
    glVertex2iv(arg0);
    _post_call_gl_callback(NULL, "glVertex2iv", (GLADapiproc) glVertex2iv, 1, arg0);
    
}
PFNGLVERTEX2IVPROC glad_debug_glVertex2iv = glad_debug_impl_glVertex2iv;
PFNGLVERTEX2SPROC glad_glVertex2s = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex2s(GLshort arg0, GLshort arg1) {
    _pre_call_gl_callback("glVertex2s", (GLADapiproc) glVertex2s, 2, arg0, arg1);
    glVertex2s(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertex2s", (GLADapiproc) glVertex2s, 2, arg0, arg1);
    
}
PFNGLVERTEX2SPROC glad_debug_glVertex2s = glad_debug_impl_glVertex2s;
PFNGLVERTEX2SVPROC glad_glVertex2sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex2sv(const GLshort * arg0) {
    _pre_call_gl_callback("glVertex2sv", (GLADapiproc) glVertex2sv, 1, arg0);
    glVertex2sv(arg0);
    _post_call_gl_callback(NULL, "glVertex2sv", (GLADapiproc) glVertex2sv, 1, arg0);
    
}
PFNGLVERTEX2SVPROC glad_debug_glVertex2sv = glad_debug_impl_glVertex2sv;
PFNGLVERTEX3DPROC glad_glVertex3d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex3d(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glVertex3d", (GLADapiproc) glVertex3d, 3, arg0, arg1, arg2);
    glVertex3d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertex3d", (GLADapiproc) glVertex3d, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEX3DPROC glad_debug_glVertex3d = glad_debug_impl_glVertex3d;
PFNGLVERTEX3DVPROC glad_glVertex3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex3dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glVertex3dv", (GLADapiproc) glVertex3dv, 1, arg0);
    glVertex3dv(arg0);
    _post_call_gl_callback(NULL, "glVertex3dv", (GLADapiproc) glVertex3dv, 1, arg0);
    
}
PFNGLVERTEX3DVPROC glad_debug_glVertex3dv = glad_debug_impl_glVertex3dv;
PFNGLVERTEX3FPROC glad_glVertex3f = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex3f(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glVertex3f", (GLADapiproc) glVertex3f, 3, arg0, arg1, arg2);
    glVertex3f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertex3f", (GLADapiproc) glVertex3f, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEX3FPROC glad_debug_glVertex3f = glad_debug_impl_glVertex3f;
PFNGLVERTEX3FVPROC glad_glVertex3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex3fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glVertex3fv", (GLADapiproc) glVertex3fv, 1, arg0);
    glVertex3fv(arg0);
    _post_call_gl_callback(NULL, "glVertex3fv", (GLADapiproc) glVertex3fv, 1, arg0);
    
}
PFNGLVERTEX3FVPROC glad_debug_glVertex3fv = glad_debug_impl_glVertex3fv;
PFNGLVERTEX3IPROC glad_glVertex3i = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex3i(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glVertex3i", (GLADapiproc) glVertex3i, 3, arg0, arg1, arg2);
    glVertex3i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertex3i", (GLADapiproc) glVertex3i, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEX3IPROC glad_debug_glVertex3i = glad_debug_impl_glVertex3i;
PFNGLVERTEX3IVPROC glad_glVertex3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex3iv(const GLint * arg0) {
    _pre_call_gl_callback("glVertex3iv", (GLADapiproc) glVertex3iv, 1, arg0);
    glVertex3iv(arg0);
    _post_call_gl_callback(NULL, "glVertex3iv", (GLADapiproc) glVertex3iv, 1, arg0);
    
}
PFNGLVERTEX3IVPROC glad_debug_glVertex3iv = glad_debug_impl_glVertex3iv;
PFNGLVERTEX3SPROC glad_glVertex3s = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex3s(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_gl_callback("glVertex3s", (GLADapiproc) glVertex3s, 3, arg0, arg1, arg2);
    glVertex3s(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertex3s", (GLADapiproc) glVertex3s, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEX3SPROC glad_debug_glVertex3s = glad_debug_impl_glVertex3s;
PFNGLVERTEX3SVPROC glad_glVertex3sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex3sv(const GLshort * arg0) {
    _pre_call_gl_callback("glVertex3sv", (GLADapiproc) glVertex3sv, 1, arg0);
    glVertex3sv(arg0);
    _post_call_gl_callback(NULL, "glVertex3sv", (GLADapiproc) glVertex3sv, 1, arg0);
    
}
PFNGLVERTEX3SVPROC glad_debug_glVertex3sv = glad_debug_impl_glVertex3sv;
PFNGLVERTEX4DPROC glad_glVertex4d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex4d(GLdouble arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glVertex4d", (GLADapiproc) glVertex4d, 4, arg0, arg1, arg2, arg3);
    glVertex4d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertex4d", (GLADapiproc) glVertex4d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEX4DPROC glad_debug_glVertex4d = glad_debug_impl_glVertex4d;
PFNGLVERTEX4DVPROC glad_glVertex4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex4dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glVertex4dv", (GLADapiproc) glVertex4dv, 1, arg0);
    glVertex4dv(arg0);
    _post_call_gl_callback(NULL, "glVertex4dv", (GLADapiproc) glVertex4dv, 1, arg0);
    
}
PFNGLVERTEX4DVPROC glad_debug_glVertex4dv = glad_debug_impl_glVertex4dv;
PFNGLVERTEX4FPROC glad_glVertex4f = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex4f(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glVertex4f", (GLADapiproc) glVertex4f, 4, arg0, arg1, arg2, arg3);
    glVertex4f(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertex4f", (GLADapiproc) glVertex4f, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEX4FPROC glad_debug_glVertex4f = glad_debug_impl_glVertex4f;
PFNGLVERTEX4FVPROC glad_glVertex4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex4fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glVertex4fv", (GLADapiproc) glVertex4fv, 1, arg0);
    glVertex4fv(arg0);
    _post_call_gl_callback(NULL, "glVertex4fv", (GLADapiproc) glVertex4fv, 1, arg0);
    
}
PFNGLVERTEX4FVPROC glad_debug_glVertex4fv = glad_debug_impl_glVertex4fv;
PFNGLVERTEX4IPROC glad_glVertex4i = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex4i(GLint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glVertex4i", (GLADapiproc) glVertex4i, 4, arg0, arg1, arg2, arg3);
    glVertex4i(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertex4i", (GLADapiproc) glVertex4i, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEX4IPROC glad_debug_glVertex4i = glad_debug_impl_glVertex4i;
PFNGLVERTEX4IVPROC glad_glVertex4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex4iv(const GLint * arg0) {
    _pre_call_gl_callback("glVertex4iv", (GLADapiproc) glVertex4iv, 1, arg0);
    glVertex4iv(arg0);
    _post_call_gl_callback(NULL, "glVertex4iv", (GLADapiproc) glVertex4iv, 1, arg0);
    
}
PFNGLVERTEX4IVPROC glad_debug_glVertex4iv = glad_debug_impl_glVertex4iv;
PFNGLVERTEX4SPROC glad_glVertex4s = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex4s(GLshort arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_gl_callback("glVertex4s", (GLADapiproc) glVertex4s, 4, arg0, arg1, arg2, arg3);
    glVertex4s(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertex4s", (GLADapiproc) glVertex4s, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEX4SPROC glad_debug_glVertex4s = glad_debug_impl_glVertex4s;
PFNGLVERTEX4SVPROC glad_glVertex4sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertex4sv(const GLshort * arg0) {
    _pre_call_gl_callback("glVertex4sv", (GLADapiproc) glVertex4sv, 1, arg0);
    glVertex4sv(arg0);
    _post_call_gl_callback(NULL, "glVertex4sv", (GLADapiproc) glVertex4sv, 1, arg0);
    
}
PFNGLVERTEX4SVPROC glad_debug_glVertex4sv = glad_debug_impl_glVertex4sv;
PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_glVertexArrayAttribBinding = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexArrayAttribBinding(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glVertexArrayAttribBinding", (GLADapiproc) glVertexArrayAttribBinding, 3, arg0, arg1, arg2);
    glVertexArrayAttribBinding(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexArrayAttribBinding", (GLADapiproc) glVertexArrayAttribBinding, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_debug_glVertexArrayAttribBinding = glad_debug_impl_glVertexArrayAttribBinding;
PFNGLVERTEXARRAYATTRIBFORMATPROC glad_glVertexArrayAttribFormat = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexArrayAttribFormat(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLboolean arg4, GLuint arg5) {
    _pre_call_gl_callback("glVertexArrayAttribFormat", (GLADapiproc) glVertexArrayAttribFormat, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glVertexArrayAttribFormat(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glVertexArrayAttribFormat", (GLADapiproc) glVertexArrayAttribFormat, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLVERTEXARRAYATTRIBFORMATPROC glad_debug_glVertexArrayAttribFormat = glad_debug_impl_glVertexArrayAttribFormat;
PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_glVertexArrayAttribIFormat = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexArrayAttribIFormat(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLuint arg4) {
    _pre_call_gl_callback("glVertexArrayAttribIFormat", (GLADapiproc) glVertexArrayAttribIFormat, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexArrayAttribIFormat(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexArrayAttribIFormat", (GLADapiproc) glVertexArrayAttribIFormat, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_debug_glVertexArrayAttribIFormat = glad_debug_impl_glVertexArrayAttribIFormat;
PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_glVertexArrayAttribLFormat = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexArrayAttribLFormat(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLuint arg4) {
    _pre_call_gl_callback("glVertexArrayAttribLFormat", (GLADapiproc) glVertexArrayAttribLFormat, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexArrayAttribLFormat(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexArrayAttribLFormat", (GLADapiproc) glVertexArrayAttribLFormat, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_debug_glVertexArrayAttribLFormat = glad_debug_impl_glVertexArrayAttribLFormat;
PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_glVertexArrayBindingDivisor = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexArrayBindingDivisor(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glVertexArrayBindingDivisor", (GLADapiproc) glVertexArrayBindingDivisor, 3, arg0, arg1, arg2);
    glVertexArrayBindingDivisor(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexArrayBindingDivisor", (GLADapiproc) glVertexArrayBindingDivisor, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_debug_glVertexArrayBindingDivisor = glad_debug_impl_glVertexArrayBindingDivisor;
PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_glVertexArrayElementBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexArrayElementBuffer(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glVertexArrayElementBuffer", (GLADapiproc) glVertexArrayElementBuffer, 2, arg0, arg1);
    glVertexArrayElementBuffer(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexArrayElementBuffer", (GLADapiproc) glVertexArrayElementBuffer, 2, arg0, arg1);
    
}
PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_debug_glVertexArrayElementBuffer = glad_debug_impl_glVertexArrayElementBuffer;
PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_glVertexArrayVertexBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexArrayVertexBuffer(GLuint arg0, GLuint arg1, GLuint arg2, GLintptr arg3, GLsizei arg4) {
    _pre_call_gl_callback("glVertexArrayVertexBuffer", (GLADapiproc) glVertexArrayVertexBuffer, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexArrayVertexBuffer(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexArrayVertexBuffer", (GLADapiproc) glVertexArrayVertexBuffer, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_debug_glVertexArrayVertexBuffer = glad_debug_impl_glVertexArrayVertexBuffer;
PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_glVertexArrayVertexBuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexArrayVertexBuffers(GLuint arg0, GLuint arg1, GLsizei arg2, const GLuint * arg3, const GLintptr * arg4, const GLsizei * arg5) {
    _pre_call_gl_callback("glVertexArrayVertexBuffers", (GLADapiproc) glVertexArrayVertexBuffers, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glVertexArrayVertexBuffers(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glVertexArrayVertexBuffers", (GLADapiproc) glVertexArrayVertexBuffers, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_debug_glVertexArrayVertexBuffers = glad_debug_impl_glVertexArrayVertexBuffers;
PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1d(GLuint arg0, GLdouble arg1) {
    _pre_call_gl_callback("glVertexAttrib1d", (GLADapiproc) glVertexAttrib1d, 2, arg0, arg1);
    glVertexAttrib1d(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1d", (GLADapiproc) glVertexAttrib1d, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1DPROC glad_debug_glVertexAttrib1d = glad_debug_impl_glVertexAttrib1d;
PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttrib1dv", (GLADapiproc) glVertexAttrib1dv, 2, arg0, arg1);
    glVertexAttrib1dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1dv", (GLADapiproc) glVertexAttrib1dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1DVPROC glad_debug_glVertexAttrib1dv = glad_debug_impl_glVertexAttrib1dv;
PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1f(GLuint arg0, GLfloat arg1) {
    _pre_call_gl_callback("glVertexAttrib1f", (GLADapiproc) glVertexAttrib1f, 2, arg0, arg1);
    glVertexAttrib1f(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1f", (GLADapiproc) glVertexAttrib1f, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1FPROC glad_debug_glVertexAttrib1f = glad_debug_impl_glVertexAttrib1f;
PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1fv(GLuint arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glVertexAttrib1fv", (GLADapiproc) glVertexAttrib1fv, 2, arg0, arg1);
    glVertexAttrib1fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1fv", (GLADapiproc) glVertexAttrib1fv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1FVPROC glad_debug_glVertexAttrib1fv = glad_debug_impl_glVertexAttrib1fv;
PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1s(GLuint arg0, GLshort arg1) {
    _pre_call_gl_callback("glVertexAttrib1s", (GLADapiproc) glVertexAttrib1s, 2, arg0, arg1);
    glVertexAttrib1s(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1s", (GLADapiproc) glVertexAttrib1s, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1SPROC glad_debug_glVertexAttrib1s = glad_debug_impl_glVertexAttrib1s;
PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1sv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttrib1sv", (GLADapiproc) glVertexAttrib1sv, 2, arg0, arg1);
    glVertexAttrib1sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1sv", (GLADapiproc) glVertexAttrib1sv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1SVPROC glad_debug_glVertexAttrib1sv = glad_debug_impl_glVertexAttrib1sv;
PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2d(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glVertexAttrib2d", (GLADapiproc) glVertexAttrib2d, 3, arg0, arg1, arg2);
    glVertexAttrib2d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttrib2d", (GLADapiproc) glVertexAttrib2d, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIB2DPROC glad_debug_glVertexAttrib2d = glad_debug_impl_glVertexAttrib2d;
PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttrib2dv", (GLADapiproc) glVertexAttrib2dv, 2, arg0, arg1);
    glVertexAttrib2dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib2dv", (GLADapiproc) glVertexAttrib2dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB2DVPROC glad_debug_glVertexAttrib2dv = glad_debug_impl_glVertexAttrib2dv;
PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2f(GLuint arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glVertexAttrib2f", (GLADapiproc) glVertexAttrib2f, 3, arg0, arg1, arg2);
    glVertexAttrib2f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttrib2f", (GLADapiproc) glVertexAttrib2f, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIB2FPROC glad_debug_glVertexAttrib2f = glad_debug_impl_glVertexAttrib2f;
PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2fv(GLuint arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glVertexAttrib2fv", (GLADapiproc) glVertexAttrib2fv, 2, arg0, arg1);
    glVertexAttrib2fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib2fv", (GLADapiproc) glVertexAttrib2fv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB2FVPROC glad_debug_glVertexAttrib2fv = glad_debug_impl_glVertexAttrib2fv;
PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2s(GLuint arg0, GLshort arg1, GLshort arg2) {
    _pre_call_gl_callback("glVertexAttrib2s", (GLADapiproc) glVertexAttrib2s, 3, arg0, arg1, arg2);
    glVertexAttrib2s(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttrib2s", (GLADapiproc) glVertexAttrib2s, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIB2SPROC glad_debug_glVertexAttrib2s = glad_debug_impl_glVertexAttrib2s;
PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2sv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttrib2sv", (GLADapiproc) glVertexAttrib2sv, 2, arg0, arg1);
    glVertexAttrib2sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib2sv", (GLADapiproc) glVertexAttrib2sv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB2SVPROC glad_debug_glVertexAttrib2sv = glad_debug_impl_glVertexAttrib2sv;
PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glVertexAttrib3d", (GLADapiproc) glVertexAttrib3d, 4, arg0, arg1, arg2, arg3);
    glVertexAttrib3d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttrib3d", (GLADapiproc) glVertexAttrib3d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIB3DPROC glad_debug_glVertexAttrib3d = glad_debug_impl_glVertexAttrib3d;
PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttrib3dv", (GLADapiproc) glVertexAttrib3dv, 2, arg0, arg1);
    glVertexAttrib3dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib3dv", (GLADapiproc) glVertexAttrib3dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB3DVPROC glad_debug_glVertexAttrib3dv = glad_debug_impl_glVertexAttrib3dv;
PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3f(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glVertexAttrib3f", (GLADapiproc) glVertexAttrib3f, 4, arg0, arg1, arg2, arg3);
    glVertexAttrib3f(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttrib3f", (GLADapiproc) glVertexAttrib3f, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIB3FPROC glad_debug_glVertexAttrib3f = glad_debug_impl_glVertexAttrib3f;
PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3fv(GLuint arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glVertexAttrib3fv", (GLADapiproc) glVertexAttrib3fv, 2, arg0, arg1);
    glVertexAttrib3fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib3fv", (GLADapiproc) glVertexAttrib3fv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB3FVPROC glad_debug_glVertexAttrib3fv = glad_debug_impl_glVertexAttrib3fv;
PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3s(GLuint arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_gl_callback("glVertexAttrib3s", (GLADapiproc) glVertexAttrib3s, 4, arg0, arg1, arg2, arg3);
    glVertexAttrib3s(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttrib3s", (GLADapiproc) glVertexAttrib3s, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIB3SPROC glad_debug_glVertexAttrib3s = glad_debug_impl_glVertexAttrib3s;
PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3sv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttrib3sv", (GLADapiproc) glVertexAttrib3sv, 2, arg0, arg1);
    glVertexAttrib3sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib3sv", (GLADapiproc) glVertexAttrib3sv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB3SVPROC glad_debug_glVertexAttrib3sv = glad_debug_impl_glVertexAttrib3sv;
PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nbv(GLuint arg0, const GLbyte * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Nbv", (GLADapiproc) glVertexAttrib4Nbv, 2, arg0, arg1);
    glVertexAttrib4Nbv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nbv", (GLADapiproc) glVertexAttrib4Nbv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NBVPROC glad_debug_glVertexAttrib4Nbv = glad_debug_impl_glVertexAttrib4Nbv;
PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Niv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Niv", (GLADapiproc) glVertexAttrib4Niv, 2, arg0, arg1);
    glVertexAttrib4Niv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Niv", (GLADapiproc) glVertexAttrib4Niv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NIVPROC glad_debug_glVertexAttrib4Niv = glad_debug_impl_glVertexAttrib4Niv;
PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nsv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Nsv", (GLADapiproc) glVertexAttrib4Nsv, 2, arg0, arg1);
    glVertexAttrib4Nsv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nsv", (GLADapiproc) glVertexAttrib4Nsv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NSVPROC glad_debug_glVertexAttrib4Nsv = glad_debug_impl_glVertexAttrib4Nsv;
PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nub(GLuint arg0, GLubyte arg1, GLubyte arg2, GLubyte arg3, GLubyte arg4) {
    _pre_call_gl_callback("glVertexAttrib4Nub", (GLADapiproc) glVertexAttrib4Nub, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttrib4Nub(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nub", (GLADapiproc) glVertexAttrib4Nub, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIB4NUBPROC glad_debug_glVertexAttrib4Nub = glad_debug_impl_glVertexAttrib4Nub;
PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nubv(GLuint arg0, const GLubyte * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Nubv", (GLADapiproc) glVertexAttrib4Nubv, 2, arg0, arg1);
    glVertexAttrib4Nubv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nubv", (GLADapiproc) glVertexAttrib4Nubv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NUBVPROC glad_debug_glVertexAttrib4Nubv = glad_debug_impl_glVertexAttrib4Nubv;
PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nuiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Nuiv", (GLADapiproc) glVertexAttrib4Nuiv, 2, arg0, arg1);
    glVertexAttrib4Nuiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nuiv", (GLADapiproc) glVertexAttrib4Nuiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NUIVPROC glad_debug_glVertexAttrib4Nuiv = glad_debug_impl_glVertexAttrib4Nuiv;
PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nusv(GLuint arg0, const GLushort * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Nusv", (GLADapiproc) glVertexAttrib4Nusv, 2, arg0, arg1);
    glVertexAttrib4Nusv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nusv", (GLADapiproc) glVertexAttrib4Nusv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NUSVPROC glad_debug_glVertexAttrib4Nusv = glad_debug_impl_glVertexAttrib4Nusv;
PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4bv(GLuint arg0, const GLbyte * arg1) {
    _pre_call_gl_callback("glVertexAttrib4bv", (GLADapiproc) glVertexAttrib4bv, 2, arg0, arg1);
    glVertexAttrib4bv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4bv", (GLADapiproc) glVertexAttrib4bv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4BVPROC glad_debug_glVertexAttrib4bv = glad_debug_impl_glVertexAttrib4bv;
PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_gl_callback("glVertexAttrib4d", (GLADapiproc) glVertexAttrib4d, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttrib4d(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttrib4d", (GLADapiproc) glVertexAttrib4d, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIB4DPROC glad_debug_glVertexAttrib4d = glad_debug_impl_glVertexAttrib4d;
PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttrib4dv", (GLADapiproc) glVertexAttrib4dv, 2, arg0, arg1);
    glVertexAttrib4dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4dv", (GLADapiproc) glVertexAttrib4dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4DVPROC glad_debug_glVertexAttrib4dv = glad_debug_impl_glVertexAttrib4dv;
PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4f(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_gl_callback("glVertexAttrib4f", (GLADapiproc) glVertexAttrib4f, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttrib4f(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttrib4f", (GLADapiproc) glVertexAttrib4f, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIB4FPROC glad_debug_glVertexAttrib4f = glad_debug_impl_glVertexAttrib4f;
PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4fv(GLuint arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glVertexAttrib4fv", (GLADapiproc) glVertexAttrib4fv, 2, arg0, arg1);
    glVertexAttrib4fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4fv", (GLADapiproc) glVertexAttrib4fv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4FVPROC glad_debug_glVertexAttrib4fv = glad_debug_impl_glVertexAttrib4fv;
PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4iv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttrib4iv", (GLADapiproc) glVertexAttrib4iv, 2, arg0, arg1);
    glVertexAttrib4iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4iv", (GLADapiproc) glVertexAttrib4iv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4IVPROC glad_debug_glVertexAttrib4iv = glad_debug_impl_glVertexAttrib4iv;
PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4s(GLuint arg0, GLshort arg1, GLshort arg2, GLshort arg3, GLshort arg4) {
    _pre_call_gl_callback("glVertexAttrib4s", (GLADapiproc) glVertexAttrib4s, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttrib4s(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttrib4s", (GLADapiproc) glVertexAttrib4s, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIB4SPROC glad_debug_glVertexAttrib4s = glad_debug_impl_glVertexAttrib4s;
PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4sv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttrib4sv", (GLADapiproc) glVertexAttrib4sv, 2, arg0, arg1);
    glVertexAttrib4sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4sv", (GLADapiproc) glVertexAttrib4sv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4SVPROC glad_debug_glVertexAttrib4sv = glad_debug_impl_glVertexAttrib4sv;
PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4ubv(GLuint arg0, const GLubyte * arg1) {
    _pre_call_gl_callback("glVertexAttrib4ubv", (GLADapiproc) glVertexAttrib4ubv, 2, arg0, arg1);
    glVertexAttrib4ubv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4ubv", (GLADapiproc) glVertexAttrib4ubv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4UBVPROC glad_debug_glVertexAttrib4ubv = glad_debug_impl_glVertexAttrib4ubv;
PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4uiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttrib4uiv", (GLADapiproc) glVertexAttrib4uiv, 2, arg0, arg1);
    glVertexAttrib4uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4uiv", (GLADapiproc) glVertexAttrib4uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4UIVPROC glad_debug_glVertexAttrib4uiv = glad_debug_impl_glVertexAttrib4uiv;
PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4usv(GLuint arg0, const GLushort * arg1) {
    _pre_call_gl_callback("glVertexAttrib4usv", (GLADapiproc) glVertexAttrib4usv, 2, arg0, arg1);
    glVertexAttrib4usv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4usv", (GLADapiproc) glVertexAttrib4usv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4USVPROC glad_debug_glVertexAttrib4usv = glad_debug_impl_glVertexAttrib4usv;
PFNGLVERTEXATTRIBBINDINGPROC glad_glVertexAttribBinding = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribBinding(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glVertexAttribBinding", (GLADapiproc) glVertexAttribBinding, 2, arg0, arg1);
    glVertexAttribBinding(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribBinding", (GLADapiproc) glVertexAttribBinding, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBBINDINGPROC glad_debug_glVertexAttribBinding = glad_debug_impl_glVertexAttribBinding;
PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribDivisor(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glVertexAttribDivisor", (GLADapiproc) glVertexAttribDivisor, 2, arg0, arg1);
    glVertexAttribDivisor(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribDivisor", (GLADapiproc) glVertexAttribDivisor, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBDIVISORPROC glad_debug_glVertexAttribDivisor = glad_debug_impl_glVertexAttribDivisor;
PFNGLVERTEXATTRIBFORMATPROC glad_glVertexAttribFormat = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribFormat(GLuint arg0, GLint arg1, GLenum arg2, GLboolean arg3, GLuint arg4) {
    _pre_call_gl_callback("glVertexAttribFormat", (GLADapiproc) glVertexAttribFormat, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttribFormat(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttribFormat", (GLADapiproc) glVertexAttribFormat, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIBFORMATPROC glad_debug_glVertexAttribFormat = glad_debug_impl_glVertexAttribFormat;
PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI1i(GLuint arg0, GLint arg1) {
    _pre_call_gl_callback("glVertexAttribI1i", (GLADapiproc) glVertexAttribI1i, 2, arg0, arg1);
    glVertexAttribI1i(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI1i", (GLADapiproc) glVertexAttribI1i, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI1IPROC glad_debug_glVertexAttribI1i = glad_debug_impl_glVertexAttribI1i;
PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI1iv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttribI1iv", (GLADapiproc) glVertexAttribI1iv, 2, arg0, arg1);
    glVertexAttribI1iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI1iv", (GLADapiproc) glVertexAttribI1iv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI1IVPROC glad_debug_glVertexAttribI1iv = glad_debug_impl_glVertexAttribI1iv;
PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI1ui(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glVertexAttribI1ui", (GLADapiproc) glVertexAttribI1ui, 2, arg0, arg1);
    glVertexAttribI1ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI1ui", (GLADapiproc) glVertexAttribI1ui, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI1UIPROC glad_debug_glVertexAttribI1ui = glad_debug_impl_glVertexAttribI1ui;
PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI1uiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttribI1uiv", (GLADapiproc) glVertexAttribI1uiv, 2, arg0, arg1);
    glVertexAttribI1uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI1uiv", (GLADapiproc) glVertexAttribI1uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI1UIVPROC glad_debug_glVertexAttribI1uiv = glad_debug_impl_glVertexAttribI1uiv;
PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI2i(GLuint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glVertexAttribI2i", (GLADapiproc) glVertexAttribI2i, 3, arg0, arg1, arg2);
    glVertexAttribI2i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttribI2i", (GLADapiproc) glVertexAttribI2i, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIBI2IPROC glad_debug_glVertexAttribI2i = glad_debug_impl_glVertexAttribI2i;
PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI2iv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttribI2iv", (GLADapiproc) glVertexAttribI2iv, 2, arg0, arg1);
    glVertexAttribI2iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI2iv", (GLADapiproc) glVertexAttribI2iv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI2IVPROC glad_debug_glVertexAttribI2iv = glad_debug_impl_glVertexAttribI2iv;
PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI2ui(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glVertexAttribI2ui", (GLADapiproc) glVertexAttribI2ui, 3, arg0, arg1, arg2);
    glVertexAttribI2ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttribI2ui", (GLADapiproc) glVertexAttribI2ui, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIBI2UIPROC glad_debug_glVertexAttribI2ui = glad_debug_impl_glVertexAttribI2ui;
PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI2uiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttribI2uiv", (GLADapiproc) glVertexAttribI2uiv, 2, arg0, arg1);
    glVertexAttribI2uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI2uiv", (GLADapiproc) glVertexAttribI2uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI2UIVPROC glad_debug_glVertexAttribI2uiv = glad_debug_impl_glVertexAttribI2uiv;
PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI3i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glVertexAttribI3i", (GLADapiproc) glVertexAttribI3i, 4, arg0, arg1, arg2, arg3);
    glVertexAttribI3i(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribI3i", (GLADapiproc) glVertexAttribI3i, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBI3IPROC glad_debug_glVertexAttribI3i = glad_debug_impl_glVertexAttribI3i;
PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI3iv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttribI3iv", (GLADapiproc) glVertexAttribI3iv, 2, arg0, arg1);
    glVertexAttribI3iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI3iv", (GLADapiproc) glVertexAttribI3iv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI3IVPROC glad_debug_glVertexAttribI3iv = glad_debug_impl_glVertexAttribI3iv;
PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI3ui(GLuint arg0, GLuint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribI3ui", (GLADapiproc) glVertexAttribI3ui, 4, arg0, arg1, arg2, arg3);
    glVertexAttribI3ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribI3ui", (GLADapiproc) glVertexAttribI3ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBI3UIPROC glad_debug_glVertexAttribI3ui = glad_debug_impl_glVertexAttribI3ui;
PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI3uiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttribI3uiv", (GLADapiproc) glVertexAttribI3uiv, 2, arg0, arg1);
    glVertexAttribI3uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI3uiv", (GLADapiproc) glVertexAttribI3uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI3UIVPROC glad_debug_glVertexAttribI3uiv = glad_debug_impl_glVertexAttribI3uiv;
PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4bv(GLuint arg0, const GLbyte * arg1) {
    _pre_call_gl_callback("glVertexAttribI4bv", (GLADapiproc) glVertexAttribI4bv, 2, arg0, arg1);
    glVertexAttribI4bv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4bv", (GLADapiproc) glVertexAttribI4bv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4BVPROC glad_debug_glVertexAttribI4bv = glad_debug_impl_glVertexAttribI4bv;
PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_gl_callback("glVertexAttribI4i", (GLADapiproc) glVertexAttribI4i, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttribI4i(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttribI4i", (GLADapiproc) glVertexAttribI4i, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIBI4IPROC glad_debug_glVertexAttribI4i = glad_debug_impl_glVertexAttribI4i;
PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4iv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttribI4iv", (GLADapiproc) glVertexAttribI4iv, 2, arg0, arg1);
    glVertexAttribI4iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4iv", (GLADapiproc) glVertexAttribI4iv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4IVPROC glad_debug_glVertexAttribI4iv = glad_debug_impl_glVertexAttribI4iv;
PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4sv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttribI4sv", (GLADapiproc) glVertexAttribI4sv, 2, arg0, arg1);
    glVertexAttribI4sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4sv", (GLADapiproc) glVertexAttribI4sv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4SVPROC glad_debug_glVertexAttribI4sv = glad_debug_impl_glVertexAttribI4sv;
PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4ubv(GLuint arg0, const GLubyte * arg1) {
    _pre_call_gl_callback("glVertexAttribI4ubv", (GLADapiproc) glVertexAttribI4ubv, 2, arg0, arg1);
    glVertexAttribI4ubv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4ubv", (GLADapiproc) glVertexAttribI4ubv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4UBVPROC glad_debug_glVertexAttribI4ubv = glad_debug_impl_glVertexAttribI4ubv;
PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4ui(GLuint arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_gl_callback("glVertexAttribI4ui", (GLADapiproc) glVertexAttribI4ui, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttribI4ui(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttribI4ui", (GLADapiproc) glVertexAttribI4ui, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIBI4UIPROC glad_debug_glVertexAttribI4ui = glad_debug_impl_glVertexAttribI4ui;
PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4uiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttribI4uiv", (GLADapiproc) glVertexAttribI4uiv, 2, arg0, arg1);
    glVertexAttribI4uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4uiv", (GLADapiproc) glVertexAttribI4uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4UIVPROC glad_debug_glVertexAttribI4uiv = glad_debug_impl_glVertexAttribI4uiv;
PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4usv(GLuint arg0, const GLushort * arg1) {
    _pre_call_gl_callback("glVertexAttribI4usv", (GLADapiproc) glVertexAttribI4usv, 2, arg0, arg1);
    glVertexAttribI4usv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4usv", (GLADapiproc) glVertexAttribI4usv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4USVPROC glad_debug_glVertexAttribI4usv = glad_debug_impl_glVertexAttribI4usv;
PFNGLVERTEXATTRIBIFORMATPROC glad_glVertexAttribIFormat = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribIFormat(GLuint arg0, GLint arg1, GLenum arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribIFormat", (GLADapiproc) glVertexAttribIFormat, 4, arg0, arg1, arg2, arg3);
    glVertexAttribIFormat(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribIFormat", (GLADapiproc) glVertexAttribIFormat, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBIFORMATPROC glad_debug_glVertexAttribIFormat = glad_debug_impl_glVertexAttribIFormat;
PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribIPointer(GLuint arg0, GLint arg1, GLenum arg2, GLsizei arg3, const void * arg4) {
    _pre_call_gl_callback("glVertexAttribIPointer", (GLADapiproc) glVertexAttribIPointer, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttribIPointer", (GLADapiproc) glVertexAttribIPointer, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIBIPOINTERPROC glad_debug_glVertexAttribIPointer = glad_debug_impl_glVertexAttribIPointer;
PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL1d(GLuint arg0, GLdouble arg1) {
    _pre_call_gl_callback("glVertexAttribL1d", (GLADapiproc) glVertexAttribL1d, 2, arg0, arg1);
    glVertexAttribL1d(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribL1d", (GLADapiproc) glVertexAttribL1d, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBL1DPROC glad_debug_glVertexAttribL1d = glad_debug_impl_glVertexAttribL1d;
PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL1dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttribL1dv", (GLADapiproc) glVertexAttribL1dv, 2, arg0, arg1);
    glVertexAttribL1dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribL1dv", (GLADapiproc) glVertexAttribL1dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBL1DVPROC glad_debug_glVertexAttribL1dv = glad_debug_impl_glVertexAttribL1dv;
PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL2d(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glVertexAttribL2d", (GLADapiproc) glVertexAttribL2d, 3, arg0, arg1, arg2);
    glVertexAttribL2d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttribL2d", (GLADapiproc) glVertexAttribL2d, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIBL2DPROC glad_debug_glVertexAttribL2d = glad_debug_impl_glVertexAttribL2d;
PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL2dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttribL2dv", (GLADapiproc) glVertexAttribL2dv, 2, arg0, arg1);
    glVertexAttribL2dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribL2dv", (GLADapiproc) glVertexAttribL2dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBL2DVPROC glad_debug_glVertexAttribL2dv = glad_debug_impl_glVertexAttribL2dv;
PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL3d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glVertexAttribL3d", (GLADapiproc) glVertexAttribL3d, 4, arg0, arg1, arg2, arg3);
    glVertexAttribL3d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribL3d", (GLADapiproc) glVertexAttribL3d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBL3DPROC glad_debug_glVertexAttribL3d = glad_debug_impl_glVertexAttribL3d;
PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL3dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttribL3dv", (GLADapiproc) glVertexAttribL3dv, 2, arg0, arg1);
    glVertexAttribL3dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribL3dv", (GLADapiproc) glVertexAttribL3dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBL3DVPROC glad_debug_glVertexAttribL3dv = glad_debug_impl_glVertexAttribL3dv;
PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL4d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_gl_callback("glVertexAttribL4d", (GLADapiproc) glVertexAttribL4d, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttribL4d(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttribL4d", (GLADapiproc) glVertexAttribL4d, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIBL4DPROC glad_debug_glVertexAttribL4d = glad_debug_impl_glVertexAttribL4d;
PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL4dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttribL4dv", (GLADapiproc) glVertexAttribL4dv, 2, arg0, arg1);
    glVertexAttribL4dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribL4dv", (GLADapiproc) glVertexAttribL4dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBL4DVPROC glad_debug_glVertexAttribL4dv = glad_debug_impl_glVertexAttribL4dv;
PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribLFormat(GLuint arg0, GLint arg1, GLenum arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribLFormat", (GLADapiproc) glVertexAttribLFormat, 4, arg0, arg1, arg2, arg3);
    glVertexAttribLFormat(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribLFormat", (GLADapiproc) glVertexAttribLFormat, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBLFORMATPROC glad_debug_glVertexAttribLFormat = glad_debug_impl_glVertexAttribLFormat;
PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribLPointer(GLuint arg0, GLint arg1, GLenum arg2, GLsizei arg3, const void * arg4) {
    _pre_call_gl_callback("glVertexAttribLPointer", (GLADapiproc) glVertexAttribLPointer, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttribLPointer(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttribLPointer", (GLADapiproc) glVertexAttribLPointer, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIBLPOINTERPROC glad_debug_glVertexAttribLPointer = glad_debug_impl_glVertexAttribLPointer;
PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP1ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribP1ui", (GLADapiproc) glVertexAttribP1ui, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP1ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP1ui", (GLADapiproc) glVertexAttribP1ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP1UIPROC glad_debug_glVertexAttribP1ui = glad_debug_impl_glVertexAttribP1ui;
PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP1uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glVertexAttribP1uiv", (GLADapiproc) glVertexAttribP1uiv, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP1uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP1uiv", (GLADapiproc) glVertexAttribP1uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP1UIVPROC glad_debug_glVertexAttribP1uiv = glad_debug_impl_glVertexAttribP1uiv;
PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP2ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribP2ui", (GLADapiproc) glVertexAttribP2ui, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP2ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP2ui", (GLADapiproc) glVertexAttribP2ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP2UIPROC glad_debug_glVertexAttribP2ui = glad_debug_impl_glVertexAttribP2ui;
PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP2uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glVertexAttribP2uiv", (GLADapiproc) glVertexAttribP2uiv, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP2uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP2uiv", (GLADapiproc) glVertexAttribP2uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP2UIVPROC glad_debug_glVertexAttribP2uiv = glad_debug_impl_glVertexAttribP2uiv;
PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP3ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribP3ui", (GLADapiproc) glVertexAttribP3ui, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP3ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP3ui", (GLADapiproc) glVertexAttribP3ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP3UIPROC glad_debug_glVertexAttribP3ui = glad_debug_impl_glVertexAttribP3ui;
PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP3uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glVertexAttribP3uiv", (GLADapiproc) glVertexAttribP3uiv, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP3uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP3uiv", (GLADapiproc) glVertexAttribP3uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP3UIVPROC glad_debug_glVertexAttribP3uiv = glad_debug_impl_glVertexAttribP3uiv;
PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP4ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribP4ui", (GLADapiproc) glVertexAttribP4ui, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP4ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP4ui", (GLADapiproc) glVertexAttribP4ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP4UIPROC glad_debug_glVertexAttribP4ui = glad_debug_impl_glVertexAttribP4ui;
PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP4uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glVertexAttribP4uiv", (GLADapiproc) glVertexAttribP4uiv, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP4uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP4uiv", (GLADapiproc) glVertexAttribP4uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP4UIVPROC glad_debug_glVertexAttribP4uiv = glad_debug_impl_glVertexAttribP4uiv;
PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribPointer(GLuint arg0, GLint arg1, GLenum arg2, GLboolean arg3, GLsizei arg4, const void * arg5) {
    _pre_call_gl_callback("glVertexAttribPointer", (GLADapiproc) glVertexAttribPointer, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glVertexAttribPointer", (GLADapiproc) glVertexAttribPointer, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLVERTEXATTRIBPOINTERPROC glad_debug_glVertexAttribPointer = glad_debug_impl_glVertexAttribPointer;
PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexBindingDivisor(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glVertexBindingDivisor", (GLADapiproc) glVertexBindingDivisor, 2, arg0, arg1);
    glVertexBindingDivisor(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexBindingDivisor", (GLADapiproc) glVertexBindingDivisor, 2, arg0, arg1);
    
}
PFNGLVERTEXBINDINGDIVISORPROC glad_debug_glVertexBindingDivisor = glad_debug_impl_glVertexBindingDivisor;
PFNGLVERTEXP2UIPROC glad_glVertexP2ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexP2ui(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glVertexP2ui", (GLADapiproc) glVertexP2ui, 2, arg0, arg1);
    glVertexP2ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexP2ui", (GLADapiproc) glVertexP2ui, 2, arg0, arg1);
    
}
PFNGLVERTEXP2UIPROC glad_debug_glVertexP2ui = glad_debug_impl_glVertexP2ui;
PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexP2uiv(GLenum arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexP2uiv", (GLADapiproc) glVertexP2uiv, 2, arg0, arg1);
    glVertexP2uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexP2uiv", (GLADapiproc) glVertexP2uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXP2UIVPROC glad_debug_glVertexP2uiv = glad_debug_impl_glVertexP2uiv;
PFNGLVERTEXP3UIPROC glad_glVertexP3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexP3ui(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glVertexP3ui", (GLADapiproc) glVertexP3ui, 2, arg0, arg1);
    glVertexP3ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexP3ui", (GLADapiproc) glVertexP3ui, 2, arg0, arg1);
    
}
PFNGLVERTEXP3UIPROC glad_debug_glVertexP3ui = glad_debug_impl_glVertexP3ui;
PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexP3uiv(GLenum arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexP3uiv", (GLADapiproc) glVertexP3uiv, 2, arg0, arg1);
    glVertexP3uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexP3uiv", (GLADapiproc) glVertexP3uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXP3UIVPROC glad_debug_glVertexP3uiv = glad_debug_impl_glVertexP3uiv;
PFNGLVERTEXP4UIPROC glad_glVertexP4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexP4ui(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glVertexP4ui", (GLADapiproc) glVertexP4ui, 2, arg0, arg1);
    glVertexP4ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexP4ui", (GLADapiproc) glVertexP4ui, 2, arg0, arg1);
    
}
PFNGLVERTEXP4UIPROC glad_debug_glVertexP4ui = glad_debug_impl_glVertexP4ui;
PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexP4uiv(GLenum arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexP4uiv", (GLADapiproc) glVertexP4uiv, 2, arg0, arg1);
    glVertexP4uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexP4uiv", (GLADapiproc) glVertexP4uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXP4UIVPROC glad_debug_glVertexP4uiv = glad_debug_impl_glVertexP4uiv;
PFNGLVERTEXPOINTERPROC glad_glVertexPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexPointer(GLint arg0, GLenum arg1, GLsizei arg2, const void * arg3) {
    _pre_call_gl_callback("glVertexPointer", (GLADapiproc) glVertexPointer, 4, arg0, arg1, arg2, arg3);
    glVertexPointer(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexPointer", (GLADapiproc) glVertexPointer, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXPOINTERPROC glad_debug_glVertexPointer = glad_debug_impl_glVertexPointer;
PFNGLVIEWPORTPROC glad_glViewport = NULL;
void GLAD_API_PTR glad_debug_impl_glViewport(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_gl_callback("glViewport", (GLADapiproc) glViewport, 4, arg0, arg1, arg2, arg3);
    glViewport(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glViewport", (GLADapiproc) glViewport, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVIEWPORTPROC glad_debug_glViewport = glad_debug_impl_glViewport;
PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv = NULL;
void GLAD_API_PTR glad_debug_impl_glViewportArrayv(GLuint arg0, GLsizei arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glViewportArrayv", (GLADapiproc) glViewportArrayv, 3, arg0, arg1, arg2);
    glViewportArrayv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glViewportArrayv", (GLADapiproc) glViewportArrayv, 3, arg0, arg1, arg2);
    
}
PFNGLVIEWPORTARRAYVPROC glad_debug_glViewportArrayv = glad_debug_impl_glViewportArrayv;
PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf = NULL;
void GLAD_API_PTR glad_debug_impl_glViewportIndexedf(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_gl_callback("glViewportIndexedf", (GLADapiproc) glViewportIndexedf, 5, arg0, arg1, arg2, arg3, arg4);
    glViewportIndexedf(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glViewportIndexedf", (GLADapiproc) glViewportIndexedf, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVIEWPORTINDEXEDFPROC glad_debug_glViewportIndexedf = glad_debug_impl_glViewportIndexedf;
PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv = NULL;
void GLAD_API_PTR glad_debug_impl_glViewportIndexedfv(GLuint arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glViewportIndexedfv", (GLADapiproc) glViewportIndexedfv, 2, arg0, arg1);
    glViewportIndexedfv(arg0, arg1);
    _post_call_gl_callback(NULL, "glViewportIndexedfv", (GLADapiproc) glViewportIndexedfv, 2, arg0, arg1);
    
}
PFNGLVIEWPORTINDEXEDFVPROC glad_debug_glViewportIndexedfv = glad_debug_impl_glViewportIndexedfv;
PFNGLWAITSYNCPROC glad_glWaitSync = NULL;
void GLAD_API_PTR glad_debug_impl_glWaitSync(GLsync arg0, GLbitfield arg1, GLuint64 arg2) {
    _pre_call_gl_callback("glWaitSync", (GLADapiproc) glWaitSync, 3, arg0, arg1, arg2);
    glWaitSync(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glWaitSync", (GLADapiproc) glWaitSync, 3, arg0, arg1, arg2);
    
}
PFNGLWAITSYNCPROC glad_debug_glWaitSync = glad_debug_impl_glWaitSync;
PFNGLWINDOWPOS2DPROC glad_glWindowPos2d = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos2d(GLdouble arg0, GLdouble arg1) {
    _pre_call_gl_callback("glWindowPos2d", (GLADapiproc) glWindowPos2d, 2, arg0, arg1);
    glWindowPos2d(arg0, arg1);
    _post_call_gl_callback(NULL, "glWindowPos2d", (GLADapiproc) glWindowPos2d, 2, arg0, arg1);
    
}
PFNGLWINDOWPOS2DPROC glad_debug_glWindowPos2d = glad_debug_impl_glWindowPos2d;
PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos2dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glWindowPos2dv", (GLADapiproc) glWindowPos2dv, 1, arg0);
    glWindowPos2dv(arg0);
    _post_call_gl_callback(NULL, "glWindowPos2dv", (GLADapiproc) glWindowPos2dv, 1, arg0);
    
}
PFNGLWINDOWPOS2DVPROC glad_debug_glWindowPos2dv = glad_debug_impl_glWindowPos2dv;
PFNGLWINDOWPOS2FPROC glad_glWindowPos2f = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos2f(GLfloat arg0, GLfloat arg1) {
    _pre_call_gl_callback("glWindowPos2f", (GLADapiproc) glWindowPos2f, 2, arg0, arg1);
    glWindowPos2f(arg0, arg1);
    _post_call_gl_callback(NULL, "glWindowPos2f", (GLADapiproc) glWindowPos2f, 2, arg0, arg1);
    
}
PFNGLWINDOWPOS2FPROC glad_debug_glWindowPos2f = glad_debug_impl_glWindowPos2f;
PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos2fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glWindowPos2fv", (GLADapiproc) glWindowPos2fv, 1, arg0);
    glWindowPos2fv(arg0);
    _post_call_gl_callback(NULL, "glWindowPos2fv", (GLADapiproc) glWindowPos2fv, 1, arg0);
    
}
PFNGLWINDOWPOS2FVPROC glad_debug_glWindowPos2fv = glad_debug_impl_glWindowPos2fv;
PFNGLWINDOWPOS2IPROC glad_glWindowPos2i = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos2i(GLint arg0, GLint arg1) {
    _pre_call_gl_callback("glWindowPos2i", (GLADapiproc) glWindowPos2i, 2, arg0, arg1);
    glWindowPos2i(arg0, arg1);
    _post_call_gl_callback(NULL, "glWindowPos2i", (GLADapiproc) glWindowPos2i, 2, arg0, arg1);
    
}
PFNGLWINDOWPOS2IPROC glad_debug_glWindowPos2i = glad_debug_impl_glWindowPos2i;
PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos2iv(const GLint * arg0) {
    _pre_call_gl_callback("glWindowPos2iv", (GLADapiproc) glWindowPos2iv, 1, arg0);
    glWindowPos2iv(arg0);
    _post_call_gl_callback(NULL, "glWindowPos2iv", (GLADapiproc) glWindowPos2iv, 1, arg0);
    
}
PFNGLWINDOWPOS2IVPROC glad_debug_glWindowPos2iv = glad_debug_impl_glWindowPos2iv;
PFNGLWINDOWPOS2SPROC glad_glWindowPos2s = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos2s(GLshort arg0, GLshort arg1) {
    _pre_call_gl_callback("glWindowPos2s", (GLADapiproc) glWindowPos2s, 2, arg0, arg1);
    glWindowPos2s(arg0, arg1);
    _post_call_gl_callback(NULL, "glWindowPos2s", (GLADapiproc) glWindowPos2s, 2, arg0, arg1);
    
}
PFNGLWINDOWPOS2SPROC glad_debug_glWindowPos2s = glad_debug_impl_glWindowPos2s;
PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos2sv(const GLshort * arg0) {
    _pre_call_gl_callback("glWindowPos2sv", (GLADapiproc) glWindowPos2sv, 1, arg0);
    glWindowPos2sv(arg0);
    _post_call_gl_callback(NULL, "glWindowPos2sv", (GLADapiproc) glWindowPos2sv, 1, arg0);
    
}
PFNGLWINDOWPOS2SVPROC glad_debug_glWindowPos2sv = glad_debug_impl_glWindowPos2sv;
PFNGLWINDOWPOS3DPROC glad_glWindowPos3d = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos3d(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glWindowPos3d", (GLADapiproc) glWindowPos3d, 3, arg0, arg1, arg2);
    glWindowPos3d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glWindowPos3d", (GLADapiproc) glWindowPos3d, 3, arg0, arg1, arg2);
    
}
PFNGLWINDOWPOS3DPROC glad_debug_glWindowPos3d = glad_debug_impl_glWindowPos3d;
PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos3dv(const GLdouble * arg0) {
    _pre_call_gl_callback("glWindowPos3dv", (GLADapiproc) glWindowPos3dv, 1, arg0);
    glWindowPos3dv(arg0);
    _post_call_gl_callback(NULL, "glWindowPos3dv", (GLADapiproc) glWindowPos3dv, 1, arg0);
    
}
PFNGLWINDOWPOS3DVPROC glad_debug_glWindowPos3dv = glad_debug_impl_glWindowPos3dv;
PFNGLWINDOWPOS3FPROC glad_glWindowPos3f = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos3f(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glWindowPos3f", (GLADapiproc) glWindowPos3f, 3, arg0, arg1, arg2);
    glWindowPos3f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glWindowPos3f", (GLADapiproc) glWindowPos3f, 3, arg0, arg1, arg2);
    
}
PFNGLWINDOWPOS3FPROC glad_debug_glWindowPos3f = glad_debug_impl_glWindowPos3f;
PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos3fv(const GLfloat * arg0) {
    _pre_call_gl_callback("glWindowPos3fv", (GLADapiproc) glWindowPos3fv, 1, arg0);
    glWindowPos3fv(arg0);
    _post_call_gl_callback(NULL, "glWindowPos3fv", (GLADapiproc) glWindowPos3fv, 1, arg0);
    
}
PFNGLWINDOWPOS3FVPROC glad_debug_glWindowPos3fv = glad_debug_impl_glWindowPos3fv;
PFNGLWINDOWPOS3IPROC glad_glWindowPos3i = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos3i(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glWindowPos3i", (GLADapiproc) glWindowPos3i, 3, arg0, arg1, arg2);
    glWindowPos3i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glWindowPos3i", (GLADapiproc) glWindowPos3i, 3, arg0, arg1, arg2);
    
}
PFNGLWINDOWPOS3IPROC glad_debug_glWindowPos3i = glad_debug_impl_glWindowPos3i;
PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos3iv(const GLint * arg0) {
    _pre_call_gl_callback("glWindowPos3iv", (GLADapiproc) glWindowPos3iv, 1, arg0);
    glWindowPos3iv(arg0);
    _post_call_gl_callback(NULL, "glWindowPos3iv", (GLADapiproc) glWindowPos3iv, 1, arg0);
    
}
PFNGLWINDOWPOS3IVPROC glad_debug_glWindowPos3iv = glad_debug_impl_glWindowPos3iv;
PFNGLWINDOWPOS3SPROC glad_glWindowPos3s = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos3s(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_gl_callback("glWindowPos3s", (GLADapiproc) glWindowPos3s, 3, arg0, arg1, arg2);
    glWindowPos3s(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glWindowPos3s", (GLADapiproc) glWindowPos3s, 3, arg0, arg1, arg2);
    
}
PFNGLWINDOWPOS3SPROC glad_debug_glWindowPos3s = glad_debug_impl_glWindowPos3s;
PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv = NULL;
void GLAD_API_PTR glad_debug_impl_glWindowPos3sv(const GLshort * arg0) {
    _pre_call_gl_callback("glWindowPos3sv", (GLADapiproc) glWindowPos3sv, 1, arg0);
    glWindowPos3sv(arg0);
    _post_call_gl_callback(NULL, "glWindowPos3sv", (GLADapiproc) glWindowPos3sv, 1, arg0);
    
}
PFNGLWINDOWPOS3SVPROC glad_debug_glWindowPos3sv = glad_debug_impl_glWindowPos3sv;


static void glad_gl_load_GL_VERSION_1_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_0) return;
    glAccum = (PFNGLACCUMPROC) load("glAccum", userptr);
    glAlphaFunc = (PFNGLALPHAFUNCPROC) load("glAlphaFunc", userptr);
    glBegin = (PFNGLBEGINPROC) load("glBegin", userptr);
    glBitmap = (PFNGLBITMAPPROC) load("glBitmap", userptr);
    glBlendFunc = (PFNGLBLENDFUNCPROC) load("glBlendFunc", userptr);
    glCallList = (PFNGLCALLLISTPROC) load("glCallList", userptr);
    glCallLists = (PFNGLCALLLISTSPROC) load("glCallLists", userptr);
    glClear = (PFNGLCLEARPROC) load("glClear", userptr);
    glClearAccum = (PFNGLCLEARACCUMPROC) load("glClearAccum", userptr);
    glClearColor = (PFNGLCLEARCOLORPROC) load("glClearColor", userptr);
    glClearDepth = (PFNGLCLEARDEPTHPROC) load("glClearDepth", userptr);
    glClearIndex = (PFNGLCLEARINDEXPROC) load("glClearIndex", userptr);
    glClearStencil = (PFNGLCLEARSTENCILPROC) load("glClearStencil", userptr);
    glClipPlane = (PFNGLCLIPPLANEPROC) load("glClipPlane", userptr);
    glColor3b = (PFNGLCOLOR3BPROC) load("glColor3b", userptr);
    glColor3bv = (PFNGLCOLOR3BVPROC) load("glColor3bv", userptr);
    glColor3d = (PFNGLCOLOR3DPROC) load("glColor3d", userptr);
    glColor3dv = (PFNGLCOLOR3DVPROC) load("glColor3dv", userptr);
    glColor3f = (PFNGLCOLOR3FPROC) load("glColor3f", userptr);
    glColor3fv = (PFNGLCOLOR3FVPROC) load("glColor3fv", userptr);
    glColor3i = (PFNGLCOLOR3IPROC) load("glColor3i", userptr);
    glColor3iv = (PFNGLCOLOR3IVPROC) load("glColor3iv", userptr);
    glColor3s = (PFNGLCOLOR3SPROC) load("glColor3s", userptr);
    glColor3sv = (PFNGLCOLOR3SVPROC) load("glColor3sv", userptr);
    glColor3ub = (PFNGLCOLOR3UBPROC) load("glColor3ub", userptr);
    glColor3ubv = (PFNGLCOLOR3UBVPROC) load("glColor3ubv", userptr);
    glColor3ui = (PFNGLCOLOR3UIPROC) load("glColor3ui", userptr);
    glColor3uiv = (PFNGLCOLOR3UIVPROC) load("glColor3uiv", userptr);
    glColor3us = (PFNGLCOLOR3USPROC) load("glColor3us", userptr);
    glColor3usv = (PFNGLCOLOR3USVPROC) load("glColor3usv", userptr);
    glColor4b = (PFNGLCOLOR4BPROC) load("glColor4b", userptr);
    glColor4bv = (PFNGLCOLOR4BVPROC) load("glColor4bv", userptr);
    glColor4d = (PFNGLCOLOR4DPROC) load("glColor4d", userptr);
    glColor4dv = (PFNGLCOLOR4DVPROC) load("glColor4dv", userptr);
    glColor4f = (PFNGLCOLOR4FPROC) load("glColor4f", userptr);
    glColor4fv = (PFNGLCOLOR4FVPROC) load("glColor4fv", userptr);
    glColor4i = (PFNGLCOLOR4IPROC) load("glColor4i", userptr);
    glColor4iv = (PFNGLCOLOR4IVPROC) load("glColor4iv", userptr);
    glColor4s = (PFNGLCOLOR4SPROC) load("glColor4s", userptr);
    glColor4sv = (PFNGLCOLOR4SVPROC) load("glColor4sv", userptr);
    glColor4ub = (PFNGLCOLOR4UBPROC) load("glColor4ub", userptr);
    glColor4ubv = (PFNGLCOLOR4UBVPROC) load("glColor4ubv", userptr);
    glColor4ui = (PFNGLCOLOR4UIPROC) load("glColor4ui", userptr);
    glColor4uiv = (PFNGLCOLOR4UIVPROC) load("glColor4uiv", userptr);
    glColor4us = (PFNGLCOLOR4USPROC) load("glColor4us", userptr);
    glColor4usv = (PFNGLCOLOR4USVPROC) load("glColor4usv", userptr);
    glColorMask = (PFNGLCOLORMASKPROC) load("glColorMask", userptr);
    glColorMaterial = (PFNGLCOLORMATERIALPROC) load("glColorMaterial", userptr);
    glCopyPixels = (PFNGLCOPYPIXELSPROC) load("glCopyPixels", userptr);
    glCullFace = (PFNGLCULLFACEPROC) load("glCullFace", userptr);
    glDeleteLists = (PFNGLDELETELISTSPROC) load("glDeleteLists", userptr);
    glDepthFunc = (PFNGLDEPTHFUNCPROC) load("glDepthFunc", userptr);
    glDepthMask = (PFNGLDEPTHMASKPROC) load("glDepthMask", userptr);
    glDepthRange = (PFNGLDEPTHRANGEPROC) load("glDepthRange", userptr);
    glDisable = (PFNGLDISABLEPROC) load("glDisable", userptr);
    glDrawBuffer = (PFNGLDRAWBUFFERPROC) load("glDrawBuffer", userptr);
    glDrawPixels = (PFNGLDRAWPIXELSPROC) load("glDrawPixels", userptr);
    glEdgeFlag = (PFNGLEDGEFLAGPROC) load("glEdgeFlag", userptr);
    glEdgeFlagv = (PFNGLEDGEFLAGVPROC) load("glEdgeFlagv", userptr);
    glEnable = (PFNGLENABLEPROC) load("glEnable", userptr);
    glEnd = (PFNGLENDPROC) load("glEnd", userptr);
    glEndList = (PFNGLENDLISTPROC) load("glEndList", userptr);
    glEvalCoord1d = (PFNGLEVALCOORD1DPROC) load("glEvalCoord1d", userptr);
    glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC) load("glEvalCoord1dv", userptr);
    glEvalCoord1f = (PFNGLEVALCOORD1FPROC) load("glEvalCoord1f", userptr);
    glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC) load("glEvalCoord1fv", userptr);
    glEvalCoord2d = (PFNGLEVALCOORD2DPROC) load("glEvalCoord2d", userptr);
    glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC) load("glEvalCoord2dv", userptr);
    glEvalCoord2f = (PFNGLEVALCOORD2FPROC) load("glEvalCoord2f", userptr);
    glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC) load("glEvalCoord2fv", userptr);
    glEvalMesh1 = (PFNGLEVALMESH1PROC) load("glEvalMesh1", userptr);
    glEvalMesh2 = (PFNGLEVALMESH2PROC) load("glEvalMesh2", userptr);
    glEvalPoint1 = (PFNGLEVALPOINT1PROC) load("glEvalPoint1", userptr);
    glEvalPoint2 = (PFNGLEVALPOINT2PROC) load("glEvalPoint2", userptr);
    glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC) load("glFeedbackBuffer", userptr);
    glFinish = (PFNGLFINISHPROC) load("glFinish", userptr);
    glFlush = (PFNGLFLUSHPROC) load("glFlush", userptr);
    glFogf = (PFNGLFOGFPROC) load("glFogf", userptr);
    glFogfv = (PFNGLFOGFVPROC) load("glFogfv", userptr);
    glFogi = (PFNGLFOGIPROC) load("glFogi", userptr);
    glFogiv = (PFNGLFOGIVPROC) load("glFogiv", userptr);
    glFrontFace = (PFNGLFRONTFACEPROC) load("glFrontFace", userptr);
    glFrustum = (PFNGLFRUSTUMPROC) load("glFrustum", userptr);
    glGenLists = (PFNGLGENLISTSPROC) load("glGenLists", userptr);
    glGetBooleanv = (PFNGLGETBOOLEANVPROC) load("glGetBooleanv", userptr);
    glGetClipPlane = (PFNGLGETCLIPPLANEPROC) load("glGetClipPlane", userptr);
    glGetDoublev = (PFNGLGETDOUBLEVPROC) load("glGetDoublev", userptr);
    glGetError = (PFNGLGETERRORPROC) load("glGetError", userptr);
    glGetFloatv = (PFNGLGETFLOATVPROC) load("glGetFloatv", userptr);
    glGetIntegerv = (PFNGLGETINTEGERVPROC) load("glGetIntegerv", userptr);
    glGetLightfv = (PFNGLGETLIGHTFVPROC) load("glGetLightfv", userptr);
    glGetLightiv = (PFNGLGETLIGHTIVPROC) load("glGetLightiv", userptr);
    glGetMapdv = (PFNGLGETMAPDVPROC) load("glGetMapdv", userptr);
    glGetMapfv = (PFNGLGETMAPFVPROC) load("glGetMapfv", userptr);
    glGetMapiv = (PFNGLGETMAPIVPROC) load("glGetMapiv", userptr);
    glGetMaterialfv = (PFNGLGETMATERIALFVPROC) load("glGetMaterialfv", userptr);
    glGetMaterialiv = (PFNGLGETMATERIALIVPROC) load("glGetMaterialiv", userptr);
    glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC) load("glGetPixelMapfv", userptr);
    glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC) load("glGetPixelMapuiv", userptr);
    glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC) load("glGetPixelMapusv", userptr);
    glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC) load("glGetPolygonStipple", userptr);
    glGetString = (PFNGLGETSTRINGPROC) load("glGetString", userptr);
    glGetTexEnvfv = (PFNGLGETTEXENVFVPROC) load("glGetTexEnvfv", userptr);
    glGetTexEnviv = (PFNGLGETTEXENVIVPROC) load("glGetTexEnviv", userptr);
    glGetTexGendv = (PFNGLGETTEXGENDVPROC) load("glGetTexGendv", userptr);
    glGetTexGenfv = (PFNGLGETTEXGENFVPROC) load("glGetTexGenfv", userptr);
    glGetTexGeniv = (PFNGLGETTEXGENIVPROC) load("glGetTexGeniv", userptr);
    glGetTexImage = (PFNGLGETTEXIMAGEPROC) load("glGetTexImage", userptr);
    glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) load("glGetTexLevelParameterfv", userptr);
    glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) load("glGetTexLevelParameteriv", userptr);
    glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) load("glGetTexParameterfv", userptr);
    glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) load("glGetTexParameteriv", userptr);
    glHint = (PFNGLHINTPROC) load("glHint", userptr);
    glIndexMask = (PFNGLINDEXMASKPROC) load("glIndexMask", userptr);
    glIndexd = (PFNGLINDEXDPROC) load("glIndexd", userptr);
    glIndexdv = (PFNGLINDEXDVPROC) load("glIndexdv", userptr);
    glIndexf = (PFNGLINDEXFPROC) load("glIndexf", userptr);
    glIndexfv = (PFNGLINDEXFVPROC) load("glIndexfv", userptr);
    glIndexi = (PFNGLINDEXIPROC) load("glIndexi", userptr);
    glIndexiv = (PFNGLINDEXIVPROC) load("glIndexiv", userptr);
    glIndexs = (PFNGLINDEXSPROC) load("glIndexs", userptr);
    glIndexsv = (PFNGLINDEXSVPROC) load("glIndexsv", userptr);
    glInitNames = (PFNGLINITNAMESPROC) load("glInitNames", userptr);
    glIsEnabled = (PFNGLISENABLEDPROC) load("glIsEnabled", userptr);
    glIsList = (PFNGLISLISTPROC) load("glIsList", userptr);
    glLightModelf = (PFNGLLIGHTMODELFPROC) load("glLightModelf", userptr);
    glLightModelfv = (PFNGLLIGHTMODELFVPROC) load("glLightModelfv", userptr);
    glLightModeli = (PFNGLLIGHTMODELIPROC) load("glLightModeli", userptr);
    glLightModeliv = (PFNGLLIGHTMODELIVPROC) load("glLightModeliv", userptr);
    glLightf = (PFNGLLIGHTFPROC) load("glLightf", userptr);
    glLightfv = (PFNGLLIGHTFVPROC) load("glLightfv", userptr);
    glLighti = (PFNGLLIGHTIPROC) load("glLighti", userptr);
    glLightiv = (PFNGLLIGHTIVPROC) load("glLightiv", userptr);
    glLineStipple = (PFNGLLINESTIPPLEPROC) load("glLineStipple", userptr);
    glLineWidth = (PFNGLLINEWIDTHPROC) load("glLineWidth", userptr);
    glListBase = (PFNGLLISTBASEPROC) load("glListBase", userptr);
    glLoadIdentity = (PFNGLLOADIDENTITYPROC) load("glLoadIdentity", userptr);
    glLoadMatrixd = (PFNGLLOADMATRIXDPROC) load("glLoadMatrixd", userptr);
    glLoadMatrixf = (PFNGLLOADMATRIXFPROC) load("glLoadMatrixf", userptr);
    glLoadName = (PFNGLLOADNAMEPROC) load("glLoadName", userptr);
    glLogicOp = (PFNGLLOGICOPPROC) load("glLogicOp", userptr);
    glMap1d = (PFNGLMAP1DPROC) load("glMap1d", userptr);
    glMap1f = (PFNGLMAP1FPROC) load("glMap1f", userptr);
    glMap2d = (PFNGLMAP2DPROC) load("glMap2d", userptr);
    glMap2f = (PFNGLMAP2FPROC) load("glMap2f", userptr);
    glMapGrid1d = (PFNGLMAPGRID1DPROC) load("glMapGrid1d", userptr);
    glMapGrid1f = (PFNGLMAPGRID1FPROC) load("glMapGrid1f", userptr);
    glMapGrid2d = (PFNGLMAPGRID2DPROC) load("glMapGrid2d", userptr);
    glMapGrid2f = (PFNGLMAPGRID2FPROC) load("glMapGrid2f", userptr);
    glMaterialf = (PFNGLMATERIALFPROC) load("glMaterialf", userptr);
    glMaterialfv = (PFNGLMATERIALFVPROC) load("glMaterialfv", userptr);
    glMateriali = (PFNGLMATERIALIPROC) load("glMateriali", userptr);
    glMaterialiv = (PFNGLMATERIALIVPROC) load("glMaterialiv", userptr);
    glMatrixMode = (PFNGLMATRIXMODEPROC) load("glMatrixMode", userptr);
    glMultMatrixd = (PFNGLMULTMATRIXDPROC) load("glMultMatrixd", userptr);
    glMultMatrixf = (PFNGLMULTMATRIXFPROC) load("glMultMatrixf", userptr);
    glNewList = (PFNGLNEWLISTPROC) load("glNewList", userptr);
    glNormal3b = (PFNGLNORMAL3BPROC) load("glNormal3b", userptr);
    glNormal3bv = (PFNGLNORMAL3BVPROC) load("glNormal3bv", userptr);
    glNormal3d = (PFNGLNORMAL3DPROC) load("glNormal3d", userptr);
    glNormal3dv = (PFNGLNORMAL3DVPROC) load("glNormal3dv", userptr);
    glNormal3f = (PFNGLNORMAL3FPROC) load("glNormal3f", userptr);
    glNormal3fv = (PFNGLNORMAL3FVPROC) load("glNormal3fv", userptr);
    glNormal3i = (PFNGLNORMAL3IPROC) load("glNormal3i", userptr);
    glNormal3iv = (PFNGLNORMAL3IVPROC) load("glNormal3iv", userptr);
    glNormal3s = (PFNGLNORMAL3SPROC) load("glNormal3s", userptr);
    glNormal3sv = (PFNGLNORMAL3SVPROC) load("glNormal3sv", userptr);
    glOrtho = (PFNGLORTHOPROC) load("glOrtho", userptr);
    glPassThrough = (PFNGLPASSTHROUGHPROC) load("glPassThrough", userptr);
    glPixelMapfv = (PFNGLPIXELMAPFVPROC) load("glPixelMapfv", userptr);
    glPixelMapuiv = (PFNGLPIXELMAPUIVPROC) load("glPixelMapuiv", userptr);
    glPixelMapusv = (PFNGLPIXELMAPUSVPROC) load("glPixelMapusv", userptr);
    glPixelStoref = (PFNGLPIXELSTOREFPROC) load("glPixelStoref", userptr);
    glPixelStorei = (PFNGLPIXELSTOREIPROC) load("glPixelStorei", userptr);
    glPixelTransferf = (PFNGLPIXELTRANSFERFPROC) load("glPixelTransferf", userptr);
    glPixelTransferi = (PFNGLPIXELTRANSFERIPROC) load("glPixelTransferi", userptr);
    glPixelZoom = (PFNGLPIXELZOOMPROC) load("glPixelZoom", userptr);
    glPointSize = (PFNGLPOINTSIZEPROC) load("glPointSize", userptr);
    glPolygonMode = (PFNGLPOLYGONMODEPROC) load("glPolygonMode", userptr);
    glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC) load("glPolygonStipple", userptr);
    glPopAttrib = (PFNGLPOPATTRIBPROC) load("glPopAttrib", userptr);
    glPopMatrix = (PFNGLPOPMATRIXPROC) load("glPopMatrix", userptr);
    glPopName = (PFNGLPOPNAMEPROC) load("glPopName", userptr);
    glPushAttrib = (PFNGLPUSHATTRIBPROC) load("glPushAttrib", userptr);
    glPushMatrix = (PFNGLPUSHMATRIXPROC) load("glPushMatrix", userptr);
    glPushName = (PFNGLPUSHNAMEPROC) load("glPushName", userptr);
    glRasterPos2d = (PFNGLRASTERPOS2DPROC) load("glRasterPos2d", userptr);
    glRasterPos2dv = (PFNGLRASTERPOS2DVPROC) load("glRasterPos2dv", userptr);
    glRasterPos2f = (PFNGLRASTERPOS2FPROC) load("glRasterPos2f", userptr);
    glRasterPos2fv = (PFNGLRASTERPOS2FVPROC) load("glRasterPos2fv", userptr);
    glRasterPos2i = (PFNGLRASTERPOS2IPROC) load("glRasterPos2i", userptr);
    glRasterPos2iv = (PFNGLRASTERPOS2IVPROC) load("glRasterPos2iv", userptr);
    glRasterPos2s = (PFNGLRASTERPOS2SPROC) load("glRasterPos2s", userptr);
    glRasterPos2sv = (PFNGLRASTERPOS2SVPROC) load("glRasterPos2sv", userptr);
    glRasterPos3d = (PFNGLRASTERPOS3DPROC) load("glRasterPos3d", userptr);
    glRasterPos3dv = (PFNGLRASTERPOS3DVPROC) load("glRasterPos3dv", userptr);
    glRasterPos3f = (PFNGLRASTERPOS3FPROC) load("glRasterPos3f", userptr);
    glRasterPos3fv = (PFNGLRASTERPOS3FVPROC) load("glRasterPos3fv", userptr);
    glRasterPos3i = (PFNGLRASTERPOS3IPROC) load("glRasterPos3i", userptr);
    glRasterPos3iv = (PFNGLRASTERPOS3IVPROC) load("glRasterPos3iv", userptr);
    glRasterPos3s = (PFNGLRASTERPOS3SPROC) load("glRasterPos3s", userptr);
    glRasterPos3sv = (PFNGLRASTERPOS3SVPROC) load("glRasterPos3sv", userptr);
    glRasterPos4d = (PFNGLRASTERPOS4DPROC) load("glRasterPos4d", userptr);
    glRasterPos4dv = (PFNGLRASTERPOS4DVPROC) load("glRasterPos4dv", userptr);
    glRasterPos4f = (PFNGLRASTERPOS4FPROC) load("glRasterPos4f", userptr);
    glRasterPos4fv = (PFNGLRASTERPOS4FVPROC) load("glRasterPos4fv", userptr);
    glRasterPos4i = (PFNGLRASTERPOS4IPROC) load("glRasterPos4i", userptr);
    glRasterPos4iv = (PFNGLRASTERPOS4IVPROC) load("glRasterPos4iv", userptr);
    glRasterPos4s = (PFNGLRASTERPOS4SPROC) load("glRasterPos4s", userptr);
    glRasterPos4sv = (PFNGLRASTERPOS4SVPROC) load("glRasterPos4sv", userptr);
    glReadBuffer = (PFNGLREADBUFFERPROC) load("glReadBuffer", userptr);
    glReadPixels = (PFNGLREADPIXELSPROC) load("glReadPixels", userptr);
    glRectd = (PFNGLRECTDPROC) load("glRectd", userptr);
    glRectdv = (PFNGLRECTDVPROC) load("glRectdv", userptr);
    glRectf = (PFNGLRECTFPROC) load("glRectf", userptr);
    glRectfv = (PFNGLRECTFVPROC) load("glRectfv", userptr);
    glRecti = (PFNGLRECTIPROC) load("glRecti", userptr);
    glRectiv = (PFNGLRECTIVPROC) load("glRectiv", userptr);
    glRects = (PFNGLRECTSPROC) load("glRects", userptr);
    glRectsv = (PFNGLRECTSVPROC) load("glRectsv", userptr);
    glRenderMode = (PFNGLRENDERMODEPROC) load("glRenderMode", userptr);
    glRotated = (PFNGLROTATEDPROC) load("glRotated", userptr);
    glRotatef = (PFNGLROTATEFPROC) load("glRotatef", userptr);
    glScaled = (PFNGLSCALEDPROC) load("glScaled", userptr);
    glScalef = (PFNGLSCALEFPROC) load("glScalef", userptr);
    glScissor = (PFNGLSCISSORPROC) load("glScissor", userptr);
    glSelectBuffer = (PFNGLSELECTBUFFERPROC) load("glSelectBuffer", userptr);
    glShadeModel = (PFNGLSHADEMODELPROC) load("glShadeModel", userptr);
    glStencilFunc = (PFNGLSTENCILFUNCPROC) load("glStencilFunc", userptr);
    glStencilMask = (PFNGLSTENCILMASKPROC) load("glStencilMask", userptr);
    glStencilOp = (PFNGLSTENCILOPPROC) load("glStencilOp", userptr);
    glTexCoord1d = (PFNGLTEXCOORD1DPROC) load("glTexCoord1d", userptr);
    glTexCoord1dv = (PFNGLTEXCOORD1DVPROC) load("glTexCoord1dv", userptr);
    glTexCoord1f = (PFNGLTEXCOORD1FPROC) load("glTexCoord1f", userptr);
    glTexCoord1fv = (PFNGLTEXCOORD1FVPROC) load("glTexCoord1fv", userptr);
    glTexCoord1i = (PFNGLTEXCOORD1IPROC) load("glTexCoord1i", userptr);
    glTexCoord1iv = (PFNGLTEXCOORD1IVPROC) load("glTexCoord1iv", userptr);
    glTexCoord1s = (PFNGLTEXCOORD1SPROC) load("glTexCoord1s", userptr);
    glTexCoord1sv = (PFNGLTEXCOORD1SVPROC) load("glTexCoord1sv", userptr);
    glTexCoord2d = (PFNGLTEXCOORD2DPROC) load("glTexCoord2d", userptr);
    glTexCoord2dv = (PFNGLTEXCOORD2DVPROC) load("glTexCoord2dv", userptr);
    glTexCoord2f = (PFNGLTEXCOORD2FPROC) load("glTexCoord2f", userptr);
    glTexCoord2fv = (PFNGLTEXCOORD2FVPROC) load("glTexCoord2fv", userptr);
    glTexCoord2i = (PFNGLTEXCOORD2IPROC) load("glTexCoord2i", userptr);
    glTexCoord2iv = (PFNGLTEXCOORD2IVPROC) load("glTexCoord2iv", userptr);
    glTexCoord2s = (PFNGLTEXCOORD2SPROC) load("glTexCoord2s", userptr);
    glTexCoord2sv = (PFNGLTEXCOORD2SVPROC) load("glTexCoord2sv", userptr);
    glTexCoord3d = (PFNGLTEXCOORD3DPROC) load("glTexCoord3d", userptr);
    glTexCoord3dv = (PFNGLTEXCOORD3DVPROC) load("glTexCoord3dv", userptr);
    glTexCoord3f = (PFNGLTEXCOORD3FPROC) load("glTexCoord3f", userptr);
    glTexCoord3fv = (PFNGLTEXCOORD3FVPROC) load("glTexCoord3fv", userptr);
    glTexCoord3i = (PFNGLTEXCOORD3IPROC) load("glTexCoord3i", userptr);
    glTexCoord3iv = (PFNGLTEXCOORD3IVPROC) load("glTexCoord3iv", userptr);
    glTexCoord3s = (PFNGLTEXCOORD3SPROC) load("glTexCoord3s", userptr);
    glTexCoord3sv = (PFNGLTEXCOORD3SVPROC) load("glTexCoord3sv", userptr);
    glTexCoord4d = (PFNGLTEXCOORD4DPROC) load("glTexCoord4d", userptr);
    glTexCoord4dv = (PFNGLTEXCOORD4DVPROC) load("glTexCoord4dv", userptr);
    glTexCoord4f = (PFNGLTEXCOORD4FPROC) load("glTexCoord4f", userptr);
    glTexCoord4fv = (PFNGLTEXCOORD4FVPROC) load("glTexCoord4fv", userptr);
    glTexCoord4i = (PFNGLTEXCOORD4IPROC) load("glTexCoord4i", userptr);
    glTexCoord4iv = (PFNGLTEXCOORD4IVPROC) load("glTexCoord4iv", userptr);
    glTexCoord4s = (PFNGLTEXCOORD4SPROC) load("glTexCoord4s", userptr);
    glTexCoord4sv = (PFNGLTEXCOORD4SVPROC) load("glTexCoord4sv", userptr);
    glTexEnvf = (PFNGLTEXENVFPROC) load("glTexEnvf", userptr);
    glTexEnvfv = (PFNGLTEXENVFVPROC) load("glTexEnvfv", userptr);
    glTexEnvi = (PFNGLTEXENVIPROC) load("glTexEnvi", userptr);
    glTexEnviv = (PFNGLTEXENVIVPROC) load("glTexEnviv", userptr);
    glTexGend = (PFNGLTEXGENDPROC) load("glTexGend", userptr);
    glTexGendv = (PFNGLTEXGENDVPROC) load("glTexGendv", userptr);
    glTexGenf = (PFNGLTEXGENFPROC) load("glTexGenf", userptr);
    glTexGenfv = (PFNGLTEXGENFVPROC) load("glTexGenfv", userptr);
    glTexGeni = (PFNGLTEXGENIPROC) load("glTexGeni", userptr);
    glTexGeniv = (PFNGLTEXGENIVPROC) load("glTexGeniv", userptr);
    glTexImage1D = (PFNGLTEXIMAGE1DPROC) load("glTexImage1D", userptr);
    glTexImage2D = (PFNGLTEXIMAGE2DPROC) load("glTexImage2D", userptr);
    glTexParameterf = (PFNGLTEXPARAMETERFPROC) load("glTexParameterf", userptr);
    glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) load("glTexParameterfv", userptr);
    glTexParameteri = (PFNGLTEXPARAMETERIPROC) load("glTexParameteri", userptr);
    glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) load("glTexParameteriv", userptr);
    glTranslated = (PFNGLTRANSLATEDPROC) load("glTranslated", userptr);
    glTranslatef = (PFNGLTRANSLATEFPROC) load("glTranslatef", userptr);
    glVertex2d = (PFNGLVERTEX2DPROC) load("glVertex2d", userptr);
    glVertex2dv = (PFNGLVERTEX2DVPROC) load("glVertex2dv", userptr);
    glVertex2f = (PFNGLVERTEX2FPROC) load("glVertex2f", userptr);
    glVertex2fv = (PFNGLVERTEX2FVPROC) load("glVertex2fv", userptr);
    glVertex2i = (PFNGLVERTEX2IPROC) load("glVertex2i", userptr);
    glVertex2iv = (PFNGLVERTEX2IVPROC) load("glVertex2iv", userptr);
    glVertex2s = (PFNGLVERTEX2SPROC) load("glVertex2s", userptr);
    glVertex2sv = (PFNGLVERTEX2SVPROC) load("glVertex2sv", userptr);
    glVertex3d = (PFNGLVERTEX3DPROC) load("glVertex3d", userptr);
    glVertex3dv = (PFNGLVERTEX3DVPROC) load("glVertex3dv", userptr);
    glVertex3f = (PFNGLVERTEX3FPROC) load("glVertex3f", userptr);
    glVertex3fv = (PFNGLVERTEX3FVPROC) load("glVertex3fv", userptr);
    glVertex3i = (PFNGLVERTEX3IPROC) load("glVertex3i", userptr);
    glVertex3iv = (PFNGLVERTEX3IVPROC) load("glVertex3iv", userptr);
    glVertex3s = (PFNGLVERTEX3SPROC) load("glVertex3s", userptr);
    glVertex3sv = (PFNGLVERTEX3SVPROC) load("glVertex3sv", userptr);
    glVertex4d = (PFNGLVERTEX4DPROC) load("glVertex4d", userptr);
    glVertex4dv = (PFNGLVERTEX4DVPROC) load("glVertex4dv", userptr);
    glVertex4f = (PFNGLVERTEX4FPROC) load("glVertex4f", userptr);
    glVertex4fv = (PFNGLVERTEX4FVPROC) load("glVertex4fv", userptr);
    glVertex4i = (PFNGLVERTEX4IPROC) load("glVertex4i", userptr);
    glVertex4iv = (PFNGLVERTEX4IVPROC) load("glVertex4iv", userptr);
    glVertex4s = (PFNGLVERTEX4SPROC) load("glVertex4s", userptr);
    glVertex4sv = (PFNGLVERTEX4SVPROC) load("glVertex4sv", userptr);
    glViewport = (PFNGLVIEWPORTPROC) load("glViewport", userptr);
}
static void glad_gl_load_GL_VERSION_1_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_1) return;
    glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC) load("glAreTexturesResident", userptr);
    glArrayElement = (PFNGLARRAYELEMENTPROC) load("glArrayElement", userptr);
    glBindTexture = (PFNGLBINDTEXTUREPROC) load("glBindTexture", userptr);
    glColorPointer = (PFNGLCOLORPOINTERPROC) load("glColorPointer", userptr);
    glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC) load("glCopyTexImage1D", userptr);
    glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load("glCopyTexImage2D", userptr);
    glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC) load("glCopyTexSubImage1D", userptr);
    glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load("glCopyTexSubImage2D", userptr);
    glDeleteTextures = (PFNGLDELETETEXTURESPROC) load("glDeleteTextures", userptr);
    glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC) load("glDisableClientState", userptr);
    glDrawArrays = (PFNGLDRAWARRAYSPROC) load("glDrawArrays", userptr);
    glDrawElements = (PFNGLDRAWELEMENTSPROC) load("glDrawElements", userptr);
    glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC) load("glEdgeFlagPointer", userptr);
    glEnableClientState = (PFNGLENABLECLIENTSTATEPROC) load("glEnableClientState", userptr);
    glGenTextures = (PFNGLGENTEXTURESPROC) load("glGenTextures", userptr);
    glGetPointerv = (PFNGLGETPOINTERVPROC) load("glGetPointerv", userptr);
    glIndexPointer = (PFNGLINDEXPOINTERPROC) load("glIndexPointer", userptr);
    glIndexub = (PFNGLINDEXUBPROC) load("glIndexub", userptr);
    glIndexubv = (PFNGLINDEXUBVPROC) load("glIndexubv", userptr);
    glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC) load("glInterleavedArrays", userptr);
    glIsTexture = (PFNGLISTEXTUREPROC) load("glIsTexture", userptr);
    glNormalPointer = (PFNGLNORMALPOINTERPROC) load("glNormalPointer", userptr);
    glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) load("glPolygonOffset", userptr);
    glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC) load("glPopClientAttrib", userptr);
    glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC) load("glPrioritizeTextures", userptr);
    glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC) load("glPushClientAttrib", userptr);
    glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC) load("glTexCoordPointer", userptr);
    glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC) load("glTexSubImage1D", userptr);
    glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load("glTexSubImage2D", userptr);
    glVertexPointer = (PFNGLVERTEXPOINTERPROC) load("glVertexPointer", userptr);
}
static void glad_gl_load_GL_VERSION_1_2( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_2) return;
    glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) load("glCopyTexSubImage3D", userptr);
    glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) load("glDrawRangeElements", userptr);
    glTexImage3D = (PFNGLTEXIMAGE3DPROC) load("glTexImage3D", userptr);
    glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) load("glTexSubImage3D", userptr);
}
static void glad_gl_load_GL_VERSION_1_3( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_3) return;
    glActiveTexture = (PFNGLACTIVETEXTUREPROC) load("glActiveTexture", userptr);
    glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC) load("glClientActiveTexture", userptr);
    glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC) load("glCompressedTexImage1D", userptr);
    glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) load("glCompressedTexImage2D", userptr);
    glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) load("glCompressedTexImage3D", userptr);
    glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) load("glCompressedTexSubImage1D", userptr);
    glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) load("glCompressedTexSubImage2D", userptr);
    glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) load("glCompressedTexSubImage3D", userptr);
    glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC) load("glGetCompressedTexImage", userptr);
    glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC) load("glLoadTransposeMatrixd", userptr);
    glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC) load("glLoadTransposeMatrixf", userptr);
    glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC) load("glMultTransposeMatrixd", userptr);
    glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC) load("glMultTransposeMatrixf", userptr);
    glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC) load("glMultiTexCoord1d", userptr);
    glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC) load("glMultiTexCoord1dv", userptr);
    glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC) load("glMultiTexCoord1f", userptr);
    glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC) load("glMultiTexCoord1fv", userptr);
    glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC) load("glMultiTexCoord1i", userptr);
    glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC) load("glMultiTexCoord1iv", userptr);
    glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC) load("glMultiTexCoord1s", userptr);
    glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC) load("glMultiTexCoord1sv", userptr);
    glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC) load("glMultiTexCoord2d", userptr);
    glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC) load("glMultiTexCoord2dv", userptr);
    glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC) load("glMultiTexCoord2f", userptr);
    glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC) load("glMultiTexCoord2fv", userptr);
    glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC) load("glMultiTexCoord2i", userptr);
    glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC) load("glMultiTexCoord2iv", userptr);
    glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC) load("glMultiTexCoord2s", userptr);
    glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC) load("glMultiTexCoord2sv", userptr);
    glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC) load("glMultiTexCoord3d", userptr);
    glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC) load("glMultiTexCoord3dv", userptr);
    glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC) load("glMultiTexCoord3f", userptr);
    glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC) load("glMultiTexCoord3fv", userptr);
    glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC) load("glMultiTexCoord3i", userptr);
    glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC) load("glMultiTexCoord3iv", userptr);
    glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC) load("glMultiTexCoord3s", userptr);
    glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC) load("glMultiTexCoord3sv", userptr);
    glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC) load("glMultiTexCoord4d", userptr);
    glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC) load("glMultiTexCoord4dv", userptr);
    glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC) load("glMultiTexCoord4f", userptr);
    glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC) load("glMultiTexCoord4fv", userptr);
    glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC) load("glMultiTexCoord4i", userptr);
    glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC) load("glMultiTexCoord4iv", userptr);
    glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC) load("glMultiTexCoord4s", userptr);
    glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC) load("glMultiTexCoord4sv", userptr);
    glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) load("glSampleCoverage", userptr);
}
static void glad_gl_load_GL_VERSION_1_4( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_4) return;
    glBlendColor = (PFNGLBLENDCOLORPROC) load("glBlendColor", userptr);
    glBlendEquation = (PFNGLBLENDEQUATIONPROC) load("glBlendEquation", userptr);
    glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) load("glBlendFuncSeparate", userptr);
    glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC) load("glFogCoordPointer", userptr);
    glFogCoordd = (PFNGLFOGCOORDDPROC) load("glFogCoordd", userptr);
    glFogCoorddv = (PFNGLFOGCOORDDVPROC) load("glFogCoorddv", userptr);
    glFogCoordf = (PFNGLFOGCOORDFPROC) load("glFogCoordf", userptr);
    glFogCoordfv = (PFNGLFOGCOORDFVPROC) load("glFogCoordfv", userptr);
    glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC) load("glMultiDrawArrays", userptr);
    glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC) load("glMultiDrawElements", userptr);
    glPointParameterf = (PFNGLPOINTPARAMETERFPROC) load("glPointParameterf", userptr);
    glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC) load("glPointParameterfv", userptr);
    glPointParameteri = (PFNGLPOINTPARAMETERIPROC) load("glPointParameteri", userptr);
    glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC) load("glPointParameteriv", userptr);
    glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC) load("glSecondaryColor3b", userptr);
    glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC) load("glSecondaryColor3bv", userptr);
    glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC) load("glSecondaryColor3d", userptr);
    glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC) load("glSecondaryColor3dv", userptr);
    glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC) load("glSecondaryColor3f", userptr);
    glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC) load("glSecondaryColor3fv", userptr);
    glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC) load("glSecondaryColor3i", userptr);
    glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC) load("glSecondaryColor3iv", userptr);
    glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC) load("glSecondaryColor3s", userptr);
    glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC) load("glSecondaryColor3sv", userptr);
    glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC) load("glSecondaryColor3ub", userptr);
    glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC) load("glSecondaryColor3ubv", userptr);
    glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC) load("glSecondaryColor3ui", userptr);
    glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC) load("glSecondaryColor3uiv", userptr);
    glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC) load("glSecondaryColor3us", userptr);
    glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC) load("glSecondaryColor3usv", userptr);
    glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC) load("glSecondaryColorPointer", userptr);
    glWindowPos2d = (PFNGLWINDOWPOS2DPROC) load("glWindowPos2d", userptr);
    glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC) load("glWindowPos2dv", userptr);
    glWindowPos2f = (PFNGLWINDOWPOS2FPROC) load("glWindowPos2f", userptr);
    glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC) load("glWindowPos2fv", userptr);
    glWindowPos2i = (PFNGLWINDOWPOS2IPROC) load("glWindowPos2i", userptr);
    glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC) load("glWindowPos2iv", userptr);
    glWindowPos2s = (PFNGLWINDOWPOS2SPROC) load("glWindowPos2s", userptr);
    glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC) load("glWindowPos2sv", userptr);
    glWindowPos3d = (PFNGLWINDOWPOS3DPROC) load("glWindowPos3d", userptr);
    glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC) load("glWindowPos3dv", userptr);
    glWindowPos3f = (PFNGLWINDOWPOS3FPROC) load("glWindowPos3f", userptr);
    glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC) load("glWindowPos3fv", userptr);
    glWindowPos3i = (PFNGLWINDOWPOS3IPROC) load("glWindowPos3i", userptr);
    glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC) load("glWindowPos3iv", userptr);
    glWindowPos3s = (PFNGLWINDOWPOS3SPROC) load("glWindowPos3s", userptr);
    glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC) load("glWindowPos3sv", userptr);
}
static void glad_gl_load_GL_VERSION_1_5( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_5) return;
    glBeginQuery = (PFNGLBEGINQUERYPROC) load("glBeginQuery", userptr);
    glBindBuffer = (PFNGLBINDBUFFERPROC) load("glBindBuffer", userptr);
    glBufferData = (PFNGLBUFFERDATAPROC) load("glBufferData", userptr);
    glBufferSubData = (PFNGLBUFFERSUBDATAPROC) load("glBufferSubData", userptr);
    glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) load("glDeleteBuffers", userptr);
    glDeleteQueries = (PFNGLDELETEQUERIESPROC) load("glDeleteQueries", userptr);
    glEndQuery = (PFNGLENDQUERYPROC) load("glEndQuery", userptr);
    glGenBuffers = (PFNGLGENBUFFERSPROC) load("glGenBuffers", userptr);
    glGenQueries = (PFNGLGENQUERIESPROC) load("glGenQueries", userptr);
    glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) load("glGetBufferParameteriv", userptr);
    glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) load("glGetBufferPointerv", userptr);
    glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC) load("glGetBufferSubData", userptr);
    glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC) load("glGetQueryObjectiv", userptr);
    glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) load("glGetQueryObjectuiv", userptr);
    glGetQueryiv = (PFNGLGETQUERYIVPROC) load("glGetQueryiv", userptr);
    glIsBuffer = (PFNGLISBUFFERPROC) load("glIsBuffer", userptr);
    glIsQuery = (PFNGLISQUERYPROC) load("glIsQuery", userptr);
    glMapBuffer = (PFNGLMAPBUFFERPROC) load("glMapBuffer", userptr);
    glUnmapBuffer = (PFNGLUNMAPBUFFERPROC) load("glUnmapBuffer", userptr);
}
static void glad_gl_load_GL_VERSION_2_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_2_0) return;
    glAttachShader = (PFNGLATTACHSHADERPROC) load("glAttachShader", userptr);
    glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) load("glBindAttribLocation", userptr);
    glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) load("glBlendEquationSeparate", userptr);
    glCompileShader = (PFNGLCOMPILESHADERPROC) load("glCompileShader", userptr);
    glCreateProgram = (PFNGLCREATEPROGRAMPROC) load("glCreateProgram", userptr);
    glCreateShader = (PFNGLCREATESHADERPROC) load("glCreateShader", userptr);
    glDeleteProgram = (PFNGLDELETEPROGRAMPROC) load("glDeleteProgram", userptr);
    glDeleteShader = (PFNGLDELETESHADERPROC) load("glDeleteShader", userptr);
    glDetachShader = (PFNGLDETACHSHADERPROC) load("glDetachShader", userptr);
    glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) load("glDisableVertexAttribArray", userptr);
    glDrawBuffers = (PFNGLDRAWBUFFERSPROC) load("glDrawBuffers", userptr);
    glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) load("glEnableVertexAttribArray", userptr);
    glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) load("glGetActiveAttrib", userptr);
    glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) load("glGetActiveUniform", userptr);
    glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) load("glGetAttachedShaders", userptr);
    glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) load("glGetAttribLocation", userptr);
    glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) load("glGetProgramInfoLog", userptr);
    glGetProgramiv = (PFNGLGETPROGRAMIVPROC) load("glGetProgramiv", userptr);
    glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) load("glGetShaderInfoLog", userptr);
    glGetShaderSource = (PFNGLGETSHADERSOURCEPROC) load("glGetShaderSource", userptr);
    glGetShaderiv = (PFNGLGETSHADERIVPROC) load("glGetShaderiv", userptr);
    glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) load("glGetUniformLocation", userptr);
    glGetUniformfv = (PFNGLGETUNIFORMFVPROC) load("glGetUniformfv", userptr);
    glGetUniformiv = (PFNGLGETUNIFORMIVPROC) load("glGetUniformiv", userptr);
    glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load("glGetVertexAttribPointerv", userptr);
    glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) load("glGetVertexAttribdv", userptr);
    glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load("glGetVertexAttribfv", userptr);
    glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load("glGetVertexAttribiv", userptr);
    glIsProgram = (PFNGLISPROGRAMPROC) load("glIsProgram", userptr);
    glIsShader = (PFNGLISSHADERPROC) load("glIsShader", userptr);
    glLinkProgram = (PFNGLLINKPROGRAMPROC) load("glLinkProgram", userptr);
    glShaderSource = (PFNGLSHADERSOURCEPROC) load("glShaderSource", userptr);
    glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) load("glStencilFuncSeparate", userptr);
    glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) load("glStencilMaskSeparate", userptr);
    glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) load("glStencilOpSeparate", userptr);
    glUniform1f = (PFNGLUNIFORM1FPROC) load("glUniform1f", userptr);
    glUniform1fv = (PFNGLUNIFORM1FVPROC) load("glUniform1fv", userptr);
    glUniform1i = (PFNGLUNIFORM1IPROC) load("glUniform1i", userptr);
    glUniform1iv = (PFNGLUNIFORM1IVPROC) load("glUniform1iv", userptr);
    glUniform2f = (PFNGLUNIFORM2FPROC) load("glUniform2f", userptr);
    glUniform2fv = (PFNGLUNIFORM2FVPROC) load("glUniform2fv", userptr);
    glUniform2i = (PFNGLUNIFORM2IPROC) load("glUniform2i", userptr);
    glUniform2iv = (PFNGLUNIFORM2IVPROC) load("glUniform2iv", userptr);
    glUniform3f = (PFNGLUNIFORM3FPROC) load("glUniform3f", userptr);
    glUniform3fv = (PFNGLUNIFORM3FVPROC) load("glUniform3fv", userptr);
    glUniform3i = (PFNGLUNIFORM3IPROC) load("glUniform3i", userptr);
    glUniform3iv = (PFNGLUNIFORM3IVPROC) load("glUniform3iv", userptr);
    glUniform4f = (PFNGLUNIFORM4FPROC) load("glUniform4f", userptr);
    glUniform4fv = (PFNGLUNIFORM4FVPROC) load("glUniform4fv", userptr);
    glUniform4i = (PFNGLUNIFORM4IPROC) load("glUniform4i", userptr);
    glUniform4iv = (PFNGLUNIFORM4IVPROC) load("glUniform4iv", userptr);
    glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) load("glUniformMatrix2fv", userptr);
    glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) load("glUniformMatrix3fv", userptr);
    glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) load("glUniformMatrix4fv", userptr);
    glUseProgram = (PFNGLUSEPROGRAMPROC) load("glUseProgram", userptr);
    glValidateProgram = (PFNGLVALIDATEPROGRAMPROC) load("glValidateProgram", userptr);
    glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) load("glVertexAttrib1d", userptr);
    glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) load("glVertexAttrib1dv", userptr);
    glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load("glVertexAttrib1f", userptr);
    glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load("glVertexAttrib1fv", userptr);
    glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) load("glVertexAttrib1s", userptr);
    glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) load("glVertexAttrib1sv", userptr);
    glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) load("glVertexAttrib2d", userptr);
    glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) load("glVertexAttrib2dv", userptr);
    glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load("glVertexAttrib2f", userptr);
    glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load("glVertexAttrib2fv", userptr);
    glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) load("glVertexAttrib2s", userptr);
    glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) load("glVertexAttrib2sv", userptr);
    glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) load("glVertexAttrib3d", userptr);
    glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) load("glVertexAttrib3dv", userptr);
    glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load("glVertexAttrib3f", userptr);
    glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load("glVertexAttrib3fv", userptr);
    glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) load("glVertexAttrib3s", userptr);
    glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) load("glVertexAttrib3sv", userptr);
    glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC) load("glVertexAttrib4Nbv", userptr);
    glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC) load("glVertexAttrib4Niv", userptr);
    glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC) load("glVertexAttrib4Nsv", userptr);
    glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) load("glVertexAttrib4Nub", userptr);
    glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) load("glVertexAttrib4Nubv", userptr);
    glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC) load("glVertexAttrib4Nuiv", userptr);
    glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC) load("glVertexAttrib4Nusv", userptr);
    glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC) load("glVertexAttrib4bv", userptr);
    glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) load("glVertexAttrib4d", userptr);
    glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) load("glVertexAttrib4dv", userptr);
    glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load("glVertexAttrib4f", userptr);
    glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load("glVertexAttrib4fv", userptr);
    glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC) load("glVertexAttrib4iv", userptr);
    glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) load("glVertexAttrib4s", userptr);
    glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) load("glVertexAttrib4sv", userptr);
    glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC) load("glVertexAttrib4ubv", userptr);
    glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC) load("glVertexAttrib4uiv", userptr);
    glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC) load("glVertexAttrib4usv", userptr);
    glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) load("glVertexAttribPointer", userptr);
}
static void glad_gl_load_GL_VERSION_2_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_2_1) return;
    glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) load("glUniformMatrix2x3fv", userptr);
    glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) load("glUniformMatrix2x4fv", userptr);
    glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) load("glUniformMatrix3x2fv", userptr);
    glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) load("glUniformMatrix3x4fv", userptr);
    glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) load("glUniformMatrix4x2fv", userptr);
    glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) load("glUniformMatrix4x3fv", userptr);
}
static void glad_gl_load_GL_VERSION_3_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_0) return;
    glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC) load("glBeginConditionalRender", userptr);
    glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) load("glBeginTransformFeedback", userptr);
    glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load("glBindBufferBase", userptr);
    glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load("glBindBufferRange", userptr);
    glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC) load("glBindFragDataLocation", userptr);
    glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load("glBindFramebuffer", userptr);
    glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load("glBindRenderbuffer", userptr);
    glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) load("glBindVertexArray", userptr);
    glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load("glBlitFramebuffer", userptr);
    glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load("glCheckFramebufferStatus", userptr);
    glClampColor = (PFNGLCLAMPCOLORPROC) load("glClampColor", userptr);
    glClearBufferfi = (PFNGLCLEARBUFFERFIPROC) load("glClearBufferfi", userptr);
    glClearBufferfv = (PFNGLCLEARBUFFERFVPROC) load("glClearBufferfv", userptr);
    glClearBufferiv = (PFNGLCLEARBUFFERIVPROC) load("glClearBufferiv", userptr);
    glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) load("glClearBufferuiv", userptr);
    glColorMaski = (PFNGLCOLORMASKIPROC) load("glColorMaski", userptr);
    glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load("glDeleteFramebuffers", userptr);
    glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load("glDeleteRenderbuffers", userptr);
    glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) load("glDeleteVertexArrays", userptr);
    glDisablei = (PFNGLDISABLEIPROC) load("glDisablei", userptr);
    glEnablei = (PFNGLENABLEIPROC) load("glEnablei", userptr);
    glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC) load("glEndConditionalRender", userptr);
    glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) load("glEndTransformFeedback", userptr);
    glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) load("glFlushMappedBufferRange", userptr);
    glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load("glFramebufferRenderbuffer", userptr);
    glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) load("glFramebufferTexture1D", userptr);
    glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load("glFramebufferTexture2D", userptr);
    glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) load("glFramebufferTexture3D", userptr);
    glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load("glFramebufferTextureLayer", userptr);
    glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load("glGenFramebuffers", userptr);
    glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load("glGenRenderbuffers", userptr);
    glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) load("glGenVertexArrays", userptr);
    glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) load("glGenerateMipmap", userptr);
    glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC) load("glGetBooleani_v", userptr);
    glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) load("glGetFragDataLocation", userptr);
    glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load("glGetFramebufferAttachmentParameteriv", userptr);
    glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load("glGetIntegeri_v", userptr);
    glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load("glGetRenderbufferParameteriv", userptr);
    glGetStringi = (PFNGLGETSTRINGIPROC) load("glGetStringi", userptr);
    glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC) load("glGetTexParameterIiv", userptr);
    glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC) load("glGetTexParameterIuiv", userptr);
    glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) load("glGetTransformFeedbackVarying", userptr);
    glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC) load("glGetUniformuiv", userptr);
    glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) load("glGetVertexAttribIiv", userptr);
    glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) load("glGetVertexAttribIuiv", userptr);
    glIsEnabledi = (PFNGLISENABLEDIPROC) load("glIsEnabledi", userptr);
    glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) load("glIsFramebuffer", userptr);
    glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) load("glIsRenderbuffer", userptr);
    glIsVertexArray = (PFNGLISVERTEXARRAYPROC) load("glIsVertexArray", userptr);
    glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) load("glMapBufferRange", userptr);
    glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load("glRenderbufferStorage", userptr);
    glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load("glRenderbufferStorageMultisample", userptr);
    glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC) load("glTexParameterIiv", userptr);
    glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC) load("glTexParameterIuiv", userptr);
    glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) load("glTransformFeedbackVaryings", userptr);
    glUniform1ui = (PFNGLUNIFORM1UIPROC) load("glUniform1ui", userptr);
    glUniform1uiv = (PFNGLUNIFORM1UIVPROC) load("glUniform1uiv", userptr);
    glUniform2ui = (PFNGLUNIFORM2UIPROC) load("glUniform2ui", userptr);
    glUniform2uiv = (PFNGLUNIFORM2UIVPROC) load("glUniform2uiv", userptr);
    glUniform3ui = (PFNGLUNIFORM3UIPROC) load("glUniform3ui", userptr);
    glUniform3uiv = (PFNGLUNIFORM3UIVPROC) load("glUniform3uiv", userptr);
    glUniform4ui = (PFNGLUNIFORM4UIPROC) load("glUniform4ui", userptr);
    glUniform4uiv = (PFNGLUNIFORM4UIVPROC) load("glUniform4uiv", userptr);
    glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC) load("glVertexAttribI1i", userptr);
    glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC) load("glVertexAttribI1iv", userptr);
    glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC) load("glVertexAttribI1ui", userptr);
    glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC) load("glVertexAttribI1uiv", userptr);
    glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC) load("glVertexAttribI2i", userptr);
    glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC) load("glVertexAttribI2iv", userptr);
    glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC) load("glVertexAttribI2ui", userptr);
    glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC) load("glVertexAttribI2uiv", userptr);
    glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC) load("glVertexAttribI3i", userptr);
    glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC) load("glVertexAttribI3iv", userptr);
    glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC) load("glVertexAttribI3ui", userptr);
    glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC) load("glVertexAttribI3uiv", userptr);
    glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC) load("glVertexAttribI4bv", userptr);
    glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) load("glVertexAttribI4i", userptr);
    glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) load("glVertexAttribI4iv", userptr);
    glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC) load("glVertexAttribI4sv", userptr);
    glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC) load("glVertexAttribI4ubv", userptr);
    glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) load("glVertexAttribI4ui", userptr);
    glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) load("glVertexAttribI4uiv", userptr);
    glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC) load("glVertexAttribI4usv", userptr);
    glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) load("glVertexAttribIPointer", userptr);
}
static void glad_gl_load_GL_VERSION_3_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_1) return;
    glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load("glBindBufferBase", userptr);
    glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load("glBindBufferRange", userptr);
    glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load("glCopyBufferSubData", userptr);
    glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) load("glDrawArraysInstanced", userptr);
    glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) load("glDrawElementsInstanced", userptr);
    glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) load("glGetActiveUniformBlockName", userptr);
    glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) load("glGetActiveUniformBlockiv", userptr);
    glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) load("glGetActiveUniformName", userptr);
    glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) load("glGetActiveUniformsiv", userptr);
    glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load("glGetIntegeri_v", userptr);
    glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) load("glGetUniformBlockIndex", userptr);
    glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) load("glGetUniformIndices", userptr);
    glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC) load("glPrimitiveRestartIndex", userptr);
    glTexBuffer = (PFNGLTEXBUFFERPROC) load("glTexBuffer", userptr);
    glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) load("glUniformBlockBinding", userptr);
}
static void glad_gl_load_GL_VERSION_3_2( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_2) return;
    glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) load("glClientWaitSync", userptr);
    glDeleteSync = (PFNGLDELETESYNCPROC) load("glDeleteSync", userptr);
    glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) load("glDrawElementsBaseVertex", userptr);
    glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) load("glDrawElementsInstancedBaseVertex", userptr);
    glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) load("glDrawRangeElementsBaseVertex", userptr);
    glFenceSync = (PFNGLFENCESYNCPROC) load("glFenceSync", userptr);
    glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) load("glFramebufferTexture", userptr);
    glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) load("glGetBufferParameteri64v", userptr);
    glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC) load("glGetInteger64i_v", userptr);
    glGetInteger64v = (PFNGLGETINTEGER64VPROC) load("glGetInteger64v", userptr);
    glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) load("glGetMultisamplefv", userptr);
    glGetSynciv = (PFNGLGETSYNCIVPROC) load("glGetSynciv", userptr);
    glIsSync = (PFNGLISSYNCPROC) load("glIsSync", userptr);
    glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) load("glMultiDrawElementsBaseVertex", userptr);
    glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) load("glProvokingVertex", userptr);
    glSampleMaski = (PFNGLSAMPLEMASKIPROC) load("glSampleMaski", userptr);
    glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) load("glTexImage2DMultisample", userptr);
    glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) load("glTexImage3DMultisample", userptr);
    glWaitSync = (PFNGLWAITSYNCPROC) load("glWaitSync", userptr);
}
static void glad_gl_load_GL_VERSION_3_3( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_3) return;
    glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) load("glBindFragDataLocationIndexed", userptr);
    glBindSampler = (PFNGLBINDSAMPLERPROC) load("glBindSampler", userptr);
    glColorP3ui = (PFNGLCOLORP3UIPROC) load("glColorP3ui", userptr);
    glColorP3uiv = (PFNGLCOLORP3UIVPROC) load("glColorP3uiv", userptr);
    glColorP4ui = (PFNGLCOLORP4UIPROC) load("glColorP4ui", userptr);
    glColorP4uiv = (PFNGLCOLORP4UIVPROC) load("glColorP4uiv", userptr);
    glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) load("glDeleteSamplers", userptr);
    glGenSamplers = (PFNGLGENSAMPLERSPROC) load("glGenSamplers", userptr);
    glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC) load("glGetFragDataIndex", userptr);
    glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC) load("glGetQueryObjecti64v", userptr);
    glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) load("glGetQueryObjectui64v", userptr);
    glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) load("glGetSamplerParameterIiv", userptr);
    glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) load("glGetSamplerParameterIuiv", userptr);
    glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) load("glGetSamplerParameterfv", userptr);
    glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) load("glGetSamplerParameteriv", userptr);
    glIsSampler = (PFNGLISSAMPLERPROC) load("glIsSampler", userptr);
    glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC) load("glMultiTexCoordP1ui", userptr);
    glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC) load("glMultiTexCoordP1uiv", userptr);
    glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC) load("glMultiTexCoordP2ui", userptr);
    glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC) load("glMultiTexCoordP2uiv", userptr);
    glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC) load("glMultiTexCoordP3ui", userptr);
    glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC) load("glMultiTexCoordP3uiv", userptr);
    glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC) load("glMultiTexCoordP4ui", userptr);
    glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC) load("glMultiTexCoordP4uiv", userptr);
    glNormalP3ui = (PFNGLNORMALP3UIPROC) load("glNormalP3ui", userptr);
    glNormalP3uiv = (PFNGLNORMALP3UIVPROC) load("glNormalP3uiv", userptr);
    glQueryCounter = (PFNGLQUERYCOUNTERPROC) load("glQueryCounter", userptr);
    glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) load("glSamplerParameterIiv", userptr);
    glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) load("glSamplerParameterIuiv", userptr);
    glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) load("glSamplerParameterf", userptr);
    glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) load("glSamplerParameterfv", userptr);
    glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) load("glSamplerParameteri", userptr);
    glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) load("glSamplerParameteriv", userptr);
    glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC) load("glSecondaryColorP3ui", userptr);
    glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC) load("glSecondaryColorP3uiv", userptr);
    glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC) load("glTexCoordP1ui", userptr);
    glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC) load("glTexCoordP1uiv", userptr);
    glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC) load("glTexCoordP2ui", userptr);
    glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC) load("glTexCoordP2uiv", userptr);
    glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC) load("glTexCoordP3ui", userptr);
    glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC) load("glTexCoordP3uiv", userptr);
    glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC) load("glTexCoordP4ui", userptr);
    glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC) load("glTexCoordP4uiv", userptr);
    glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) load("glVertexAttribDivisor", userptr);
    glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC) load("glVertexAttribP1ui", userptr);
    glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC) load("glVertexAttribP1uiv", userptr);
    glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC) load("glVertexAttribP2ui", userptr);
    glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC) load("glVertexAttribP2uiv", userptr);
    glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC) load("glVertexAttribP3ui", userptr);
    glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC) load("glVertexAttribP3uiv", userptr);
    glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC) load("glVertexAttribP4ui", userptr);
    glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC) load("glVertexAttribP4uiv", userptr);
    glVertexP2ui = (PFNGLVERTEXP2UIPROC) load("glVertexP2ui", userptr);
    glVertexP2uiv = (PFNGLVERTEXP2UIVPROC) load("glVertexP2uiv", userptr);
    glVertexP3ui = (PFNGLVERTEXP3UIPROC) load("glVertexP3ui", userptr);
    glVertexP3uiv = (PFNGLVERTEXP3UIVPROC) load("glVertexP3uiv", userptr);
    glVertexP4ui = (PFNGLVERTEXP4UIPROC) load("glVertexP4ui", userptr);
    glVertexP4uiv = (PFNGLVERTEXP4UIVPROC) load("glVertexP4uiv", userptr);
}
static void glad_gl_load_GL_VERSION_4_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_4_0) return;
    glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC) load("glBeginQueryIndexed", userptr);
    glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) load("glBindTransformFeedback", userptr);
    glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC) load("glBlendEquationSeparatei", userptr);
    glBlendEquationi = (PFNGLBLENDEQUATIONIPROC) load("glBlendEquationi", userptr);
    glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC) load("glBlendFuncSeparatei", userptr);
    glBlendFunci = (PFNGLBLENDFUNCIPROC) load("glBlendFunci", userptr);
    glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) load("glDeleteTransformFeedbacks", userptr);
    glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) load("glDrawArraysIndirect", userptr);
    glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) load("glDrawElementsIndirect", userptr);
    glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC) load("glDrawTransformFeedback", userptr);
    glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) load("glDrawTransformFeedbackStream", userptr);
    glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC) load("glEndQueryIndexed", userptr);
    glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) load("glGenTransformFeedbacks", userptr);
    glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC) load("glGetActiveSubroutineName", userptr);
    glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) load("glGetActiveSubroutineUniformName", userptr);
    glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) load("glGetActiveSubroutineUniformiv", userptr);
    glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC) load("glGetProgramStageiv", userptr);
    glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC) load("glGetQueryIndexediv", userptr);
    glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC) load("glGetSubroutineIndex", userptr);
    glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) load("glGetSubroutineUniformLocation", userptr);
    glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC) load("glGetUniformSubroutineuiv", userptr);
    glGetUniformdv = (PFNGLGETUNIFORMDVPROC) load("glGetUniformdv", userptr);
    glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) load("glIsTransformFeedback", userptr);
    glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC) load("glMinSampleShading", userptr);
    glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC) load("glPatchParameterfv", userptr);
    glPatchParameteri = (PFNGLPATCHPARAMETERIPROC) load("glPatchParameteri", userptr);
    glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) load("glPauseTransformFeedback", userptr);
    glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) load("glResumeTransformFeedback", userptr);
    glUniform1d = (PFNGLUNIFORM1DPROC) load("glUniform1d", userptr);
    glUniform1dv = (PFNGLUNIFORM1DVPROC) load("glUniform1dv", userptr);
    glUniform2d = (PFNGLUNIFORM2DPROC) load("glUniform2d", userptr);
    glUniform2dv = (PFNGLUNIFORM2DVPROC) load("glUniform2dv", userptr);
    glUniform3d = (PFNGLUNIFORM3DPROC) load("glUniform3d", userptr);
    glUniform3dv = (PFNGLUNIFORM3DVPROC) load("glUniform3dv", userptr);
    glUniform4d = (PFNGLUNIFORM4DPROC) load("glUniform4d", userptr);
    glUniform4dv = (PFNGLUNIFORM4DVPROC) load("glUniform4dv", userptr);
    glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC) load("glUniformMatrix2dv", userptr);
    glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC) load("glUniformMatrix2x3dv", userptr);
    glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC) load("glUniformMatrix2x4dv", userptr);
    glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC) load("glUniformMatrix3dv", userptr);
    glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC) load("glUniformMatrix3x2dv", userptr);
    glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC) load("glUniformMatrix3x4dv", userptr);
    glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC) load("glUniformMatrix4dv", userptr);
    glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC) load("glUniformMatrix4x2dv", userptr);
    glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC) load("glUniformMatrix4x3dv", userptr);
    glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC) load("glUniformSubroutinesuiv", userptr);
}
static void glad_gl_load_GL_VERSION_4_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_4_1) return;
    glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) load("glActiveShaderProgram", userptr);
    glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) load("glBindProgramPipeline", userptr);
    glClearDepthf = (PFNGLCLEARDEPTHFPROC) load("glClearDepthf", userptr);
    glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) load("glCreateShaderProgramv", userptr);
    glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) load("glDeleteProgramPipelines", userptr);
    glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC) load("glDepthRangeArrayv", userptr);
    glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC) load("glDepthRangeIndexed", userptr);
    glDepthRangef = (PFNGLDEPTHRANGEFPROC) load("glDepthRangef", userptr);
    glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) load("glGenProgramPipelines", userptr);
    glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC) load("glGetDoublei_v", userptr);
    glGetFloati_v = (PFNGLGETFLOATI_VPROC) load("glGetFloati_v", userptr);
    glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) load("glGetProgramBinary", userptr);
    glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) load("glGetProgramPipelineInfoLog", userptr);
    glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) load("glGetProgramPipelineiv", userptr);
    glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) load("glGetShaderPrecisionFormat", userptr);
    glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC) load("glGetVertexAttribLdv", userptr);
    glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) load("glIsProgramPipeline", userptr);
    glProgramBinary = (PFNGLPROGRAMBINARYPROC) load("glProgramBinary", userptr);
    glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load("glProgramParameteri", userptr);
    glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC) load("glProgramUniform1d", userptr);
    glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC) load("glProgramUniform1dv", userptr);
    glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) load("glProgramUniform1f", userptr);
    glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) load("glProgramUniform1fv", userptr);
    glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) load("glProgramUniform1i", userptr);
    glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) load("glProgramUniform1iv", userptr);
    glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) load("glProgramUniform1ui", userptr);
    glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) load("glProgramUniform1uiv", userptr);
    glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC) load("glProgramUniform2d", userptr);
    glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC) load("glProgramUniform2dv", userptr);
    glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) load("glProgramUniform2f", userptr);
    glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) load("glProgramUniform2fv", userptr);
    glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) load("glProgramUniform2i", userptr);
    glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) load("glProgramUniform2iv", userptr);
    glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) load("glProgramUniform2ui", userptr);
    glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) load("glProgramUniform2uiv", userptr);
    glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC) load("glProgramUniform3d", userptr);
    glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC) load("glProgramUniform3dv", userptr);
    glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) load("glProgramUniform3f", userptr);
    glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) load("glProgramUniform3fv", userptr);
    glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) load("glProgramUniform3i", userptr);
    glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) load("glProgramUniform3iv", userptr);
    glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) load("glProgramUniform3ui", userptr);
    glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) load("glProgramUniform3uiv", userptr);
    glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC) load("glProgramUniform4d", userptr);
    glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC) load("glProgramUniform4dv", userptr);
    glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) load("glProgramUniform4f", userptr);
    glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) load("glProgramUniform4fv", userptr);
    glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) load("glProgramUniform4i", userptr);
    glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) load("glProgramUniform4iv", userptr);
    glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) load("glProgramUniform4ui", userptr);
    glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) load("glProgramUniform4uiv", userptr);
    glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC) load("glProgramUniformMatrix2dv", userptr);
    glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) load("glProgramUniformMatrix2fv", userptr);
    glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) load("glProgramUniformMatrix2x3dv", userptr);
    glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) load("glProgramUniformMatrix2x3fv", userptr);
    glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) load("glProgramUniformMatrix2x4dv", userptr);
    glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) load("glProgramUniformMatrix2x4fv", userptr);
    glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC) load("glProgramUniformMatrix3dv", userptr);
    glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) load("glProgramUniformMatrix3fv", userptr);
    glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) load("glProgramUniformMatrix3x2dv", userptr);
    glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) load("glProgramUniformMatrix3x2fv", userptr);
    glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) load("glProgramUniformMatrix3x4dv", userptr);
    glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) load("glProgramUniformMatrix3x4fv", userptr);
    glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC) load("glProgramUniformMatrix4dv", userptr);
    glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) load("glProgramUniformMatrix4fv", userptr);
    glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) load("glProgramUniformMatrix4x2dv", userptr);
    glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) load("glProgramUniformMatrix4x2fv", userptr);
    glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) load("glProgramUniformMatrix4x3dv", userptr);
    glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) load("glProgramUniformMatrix4x3fv", userptr);
    glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) load("glReleaseShaderCompiler", userptr);
    glScissorArrayv = (PFNGLSCISSORARRAYVPROC) load("glScissorArrayv", userptr);
    glScissorIndexed = (PFNGLSCISSORINDEXEDPROC) load("glScissorIndexed", userptr);
    glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC) load("glScissorIndexedv", userptr);
    glShaderBinary = (PFNGLSHADERBINARYPROC) load("glShaderBinary", userptr);
    glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) load("glUseProgramStages", userptr);
    glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) load("glValidateProgramPipeline", userptr);
    glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC) load("glVertexAttribL1d", userptr);
    glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC) load("glVertexAttribL1dv", userptr);
    glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC) load("glVertexAttribL2d", userptr);
    glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC) load("glVertexAttribL2dv", userptr);
    glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC) load("glVertexAttribL3d", userptr);
    glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC) load("glVertexAttribL3dv", userptr);
    glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC) load("glVertexAttribL4d", userptr);
    glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC) load("glVertexAttribL4dv", userptr);
    glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC) load("glVertexAttribLPointer", userptr);
    glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC) load("glViewportArrayv", userptr);
    glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC) load("glViewportIndexedf", userptr);
    glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC) load("glViewportIndexedfv", userptr);
}
static void glad_gl_load_GL_VERSION_4_2( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_4_2) return;
    glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) load("glBindImageTexture", userptr);
    glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) load("glDrawArraysInstancedBaseInstance", userptr);
    glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) load("glDrawElementsInstancedBaseInstance", userptr);
    glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) load("glDrawElementsInstancedBaseVertexBaseInstance", userptr);
    glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) load("glDrawTransformFeedbackInstanced", userptr);
    glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) load("glDrawTransformFeedbackStreamInstanced", userptr);
    glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) load("glGetActiveAtomicCounterBufferiv", userptr);
    glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) load("glGetInternalformativ", userptr);
    glMemoryBarrier = (PFNGLMEMORYBARRIERPROC) load("glMemoryBarrier", userptr);
    glTexStorage1D = (PFNGLTEXSTORAGE1DPROC) load("glTexStorage1D", userptr);
    glTexStorage2D = (PFNGLTEXSTORAGE2DPROC) load("glTexStorage2D", userptr);
    glTexStorage3D = (PFNGLTEXSTORAGE3DPROC) load("glTexStorage3D", userptr);
}
static void glad_gl_load_GL_VERSION_4_3( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_4_3) return;
    glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC) load("glBindVertexBuffer", userptr);
    glClearBufferData = (PFNGLCLEARBUFFERDATAPROC) load("glClearBufferData", userptr);
    glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC) load("glClearBufferSubData", userptr);
    glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC) load("glCopyImageSubData", userptr);
    glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) load("glDebugMessageCallback", userptr);
    glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC) load("glDebugMessageControl", userptr);
    glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC) load("glDebugMessageInsert", userptr);
    glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC) load("glDispatchCompute", userptr);
    glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC) load("glDispatchComputeIndirect", userptr);
    glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC) load("glFramebufferParameteri", userptr);
    glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC) load("glGetDebugMessageLog", userptr);
    glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC) load("glGetFramebufferParameteriv", userptr);
    glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC) load("glGetInternalformati64v", userptr);
    glGetObjectLabel = (PFNGLGETOBJECTLABELPROC) load("glGetObjectLabel", userptr);
    glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC) load("glGetObjectPtrLabel", userptr);
    glGetPointerv = (PFNGLGETPOINTERVPROC) load("glGetPointerv", userptr);
    glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC) load("glGetProgramInterfaceiv", userptr);
    glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC) load("glGetProgramResourceIndex", userptr);
    glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC) load("glGetProgramResourceLocation", userptr);
    glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) load("glGetProgramResourceLocationIndex", userptr);
    glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC) load("glGetProgramResourceName", userptr);
    glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC) load("glGetProgramResourceiv", userptr);
    glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC) load("glInvalidateBufferData", userptr);
    glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC) load("glInvalidateBufferSubData", userptr);
    glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC) load("glInvalidateFramebuffer", userptr);
    glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) load("glInvalidateSubFramebuffer", userptr);
    glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC) load("glInvalidateTexImage", userptr);
    glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC) load("glInvalidateTexSubImage", userptr);
    glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC) load("glMultiDrawArraysIndirect", userptr);
    glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC) load("glMultiDrawElementsIndirect", userptr);
    glObjectLabel = (PFNGLOBJECTLABELPROC) load("glObjectLabel", userptr);
    glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC) load("glObjectPtrLabel", userptr);
    glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC) load("glPopDebugGroup", userptr);
    glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC) load("glPushDebugGroup", userptr);
    glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC) load("glShaderStorageBlockBinding", userptr);
    glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC) load("glTexBufferRange", userptr);
    glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC) load("glTexStorage2DMultisample", userptr);
    glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC) load("glTexStorage3DMultisample", userptr);
    glTextureView = (PFNGLTEXTUREVIEWPROC) load("glTextureView", userptr);
    glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC) load("glVertexAttribBinding", userptr);
    glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC) load("glVertexAttribFormat", userptr);
    glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC) load("glVertexAttribIFormat", userptr);
    glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC) load("glVertexAttribLFormat", userptr);
    glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC) load("glVertexBindingDivisor", userptr);
}
static void glad_gl_load_GL_VERSION_4_4( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_4_4) return;
    glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC) load("glBindBuffersBase", userptr);
    glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC) load("glBindBuffersRange", userptr);
    glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC) load("glBindImageTextures", userptr);
    glBindSamplers = (PFNGLBINDSAMPLERSPROC) load("glBindSamplers", userptr);
    glBindTextures = (PFNGLBINDTEXTURESPROC) load("glBindTextures", userptr);
    glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC) load("glBindVertexBuffers", userptr);
    glBufferStorage = (PFNGLBUFFERSTORAGEPROC) load("glBufferStorage", userptr);
    glClearTexImage = (PFNGLCLEARTEXIMAGEPROC) load("glClearTexImage", userptr);
    glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC) load("glClearTexSubImage", userptr);
}
static void glad_gl_load_GL_VERSION_4_5( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_4_5) return;
    glBindTextureUnit = (PFNGLBINDTEXTUREUNITPROC) load("glBindTextureUnit", userptr);
    glBlitNamedFramebuffer = (PFNGLBLITNAMEDFRAMEBUFFERPROC) load("glBlitNamedFramebuffer", userptr);
    glCheckNamedFramebufferStatus = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) load("glCheckNamedFramebufferStatus", userptr);
    glClearNamedBufferData = (PFNGLCLEARNAMEDBUFFERDATAPROC) load("glClearNamedBufferData", userptr);
    glClearNamedBufferSubData = (PFNGLCLEARNAMEDBUFFERSUBDATAPROC) load("glClearNamedBufferSubData", userptr);
    glClearNamedFramebufferfi = (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) load("glClearNamedFramebufferfi", userptr);
    glClearNamedFramebufferfv = (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) load("glClearNamedFramebufferfv", userptr);
    glClearNamedFramebufferiv = (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) load("glClearNamedFramebufferiv", userptr);
    glClearNamedFramebufferuiv = (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) load("glClearNamedFramebufferuiv", userptr);
    glClipControl = (PFNGLCLIPCONTROLPROC) load("glClipControl", userptr);
    glCompressedTextureSubImage1D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) load("glCompressedTextureSubImage1D", userptr);
    glCompressedTextureSubImage2D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) load("glCompressedTextureSubImage2D", userptr);
    glCompressedTextureSubImage3D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) load("glCompressedTextureSubImage3D", userptr);
    glCopyNamedBufferSubData = (PFNGLCOPYNAMEDBUFFERSUBDATAPROC) load("glCopyNamedBufferSubData", userptr);
    glCopyTextureSubImage1D = (PFNGLCOPYTEXTURESUBIMAGE1DPROC) load("glCopyTextureSubImage1D", userptr);
    glCopyTextureSubImage2D = (PFNGLCOPYTEXTURESUBIMAGE2DPROC) load("glCopyTextureSubImage2D", userptr);
    glCopyTextureSubImage3D = (PFNGLCOPYTEXTURESUBIMAGE3DPROC) load("glCopyTextureSubImage3D", userptr);
    glCreateBuffers = (PFNGLCREATEBUFFERSPROC) load("glCreateBuffers", userptr);
    glCreateFramebuffers = (PFNGLCREATEFRAMEBUFFERSPROC) load("glCreateFramebuffers", userptr);
    glCreateProgramPipelines = (PFNGLCREATEPROGRAMPIPELINESPROC) load("glCreateProgramPipelines", userptr);
    glCreateQueries = (PFNGLCREATEQUERIESPROC) load("glCreateQueries", userptr);
    glCreateRenderbuffers = (PFNGLCREATERENDERBUFFERSPROC) load("glCreateRenderbuffers", userptr);
    glCreateSamplers = (PFNGLCREATESAMPLERSPROC) load("glCreateSamplers", userptr);
    glCreateTextures = (PFNGLCREATETEXTURESPROC) load("glCreateTextures", userptr);
    glCreateTransformFeedbacks = (PFNGLCREATETRANSFORMFEEDBACKSPROC) load("glCreateTransformFeedbacks", userptr);
    glCreateVertexArrays = (PFNGLCREATEVERTEXARRAYSPROC) load("glCreateVertexArrays", userptr);
    glDisableVertexArrayAttrib = (PFNGLDISABLEVERTEXARRAYATTRIBPROC) load("glDisableVertexArrayAttrib", userptr);
    glEnableVertexArrayAttrib = (PFNGLENABLEVERTEXARRAYATTRIBPROC) load("glEnableVertexArrayAttrib", userptr);
    glFlushMappedNamedBufferRange = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) load("glFlushMappedNamedBufferRange", userptr);
    glGenerateTextureMipmap = (PFNGLGENERATETEXTUREMIPMAPPROC) load("glGenerateTextureMipmap", userptr);
    glGetCompressedTextureImage = (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) load("glGetCompressedTextureImage", userptr);
    glGetCompressedTextureSubImage = (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) load("glGetCompressedTextureSubImage", userptr);
    glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC) load("glGetGraphicsResetStatus", userptr);
    glGetNamedBufferParameteri64v = (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) load("glGetNamedBufferParameteri64v", userptr);
    glGetNamedBufferParameteriv = (PFNGLGETNAMEDBUFFERPARAMETERIVPROC) load("glGetNamedBufferParameteriv", userptr);
    glGetNamedBufferPointerv = (PFNGLGETNAMEDBUFFERPOINTERVPROC) load("glGetNamedBufferPointerv", userptr);
    glGetNamedBufferSubData = (PFNGLGETNAMEDBUFFERSUBDATAPROC) load("glGetNamedBufferSubData", userptr);
    glGetNamedFramebufferAttachmentParameteriv = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load("glGetNamedFramebufferAttachmentParameteriv", userptr);
    glGetNamedFramebufferParameteriv = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) load("glGetNamedFramebufferParameteriv", userptr);
    glGetNamedRenderbufferParameteriv = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) load("glGetNamedRenderbufferParameteriv", userptr);
    glGetQueryBufferObjecti64v = (PFNGLGETQUERYBUFFEROBJECTI64VPROC) load("glGetQueryBufferObjecti64v", userptr);
    glGetQueryBufferObjectiv = (PFNGLGETQUERYBUFFEROBJECTIVPROC) load("glGetQueryBufferObjectiv", userptr);
    glGetQueryBufferObjectui64v = (PFNGLGETQUERYBUFFEROBJECTUI64VPROC) load("glGetQueryBufferObjectui64v", userptr);
    glGetQueryBufferObjectuiv = (PFNGLGETQUERYBUFFEROBJECTUIVPROC) load("glGetQueryBufferObjectuiv", userptr);
    glGetTextureImage = (PFNGLGETTEXTUREIMAGEPROC) load("glGetTextureImage", userptr);
    glGetTextureLevelParameterfv = (PFNGLGETTEXTURELEVELPARAMETERFVPROC) load("glGetTextureLevelParameterfv", userptr);
    glGetTextureLevelParameteriv = (PFNGLGETTEXTURELEVELPARAMETERIVPROC) load("glGetTextureLevelParameteriv", userptr);
    glGetTextureParameterIiv = (PFNGLGETTEXTUREPARAMETERIIVPROC) load("glGetTextureParameterIiv", userptr);
    glGetTextureParameterIuiv = (PFNGLGETTEXTUREPARAMETERIUIVPROC) load("glGetTextureParameterIuiv", userptr);
    glGetTextureParameterfv = (PFNGLGETTEXTUREPARAMETERFVPROC) load("glGetTextureParameterfv", userptr);
    glGetTextureParameteriv = (PFNGLGETTEXTUREPARAMETERIVPROC) load("glGetTextureParameteriv", userptr);
    glGetTextureSubImage = (PFNGLGETTEXTURESUBIMAGEPROC) load("glGetTextureSubImage", userptr);
    glGetTransformFeedbacki64_v = (PFNGLGETTRANSFORMFEEDBACKI64_VPROC) load("glGetTransformFeedbacki64_v", userptr);
    glGetTransformFeedbacki_v = (PFNGLGETTRANSFORMFEEDBACKI_VPROC) load("glGetTransformFeedbacki_v", userptr);
    glGetTransformFeedbackiv = (PFNGLGETTRANSFORMFEEDBACKIVPROC) load("glGetTransformFeedbackiv", userptr);
    glGetVertexArrayIndexed64iv = (PFNGLGETVERTEXARRAYINDEXED64IVPROC) load("glGetVertexArrayIndexed64iv", userptr);
    glGetVertexArrayIndexediv = (PFNGLGETVERTEXARRAYINDEXEDIVPROC) load("glGetVertexArrayIndexediv", userptr);
    glGetVertexArrayiv = (PFNGLGETVERTEXARRAYIVPROC) load("glGetVertexArrayiv", userptr);
    glGetnColorTable = (PFNGLGETNCOLORTABLEPROC) load("glGetnColorTable", userptr);
    glGetnCompressedTexImage = (PFNGLGETNCOMPRESSEDTEXIMAGEPROC) load("glGetnCompressedTexImage", userptr);
    glGetnConvolutionFilter = (PFNGLGETNCONVOLUTIONFILTERPROC) load("glGetnConvolutionFilter", userptr);
    glGetnHistogram = (PFNGLGETNHISTOGRAMPROC) load("glGetnHistogram", userptr);
    glGetnMapdv = (PFNGLGETNMAPDVPROC) load("glGetnMapdv", userptr);
    glGetnMapfv = (PFNGLGETNMAPFVPROC) load("glGetnMapfv", userptr);
    glGetnMapiv = (PFNGLGETNMAPIVPROC) load("glGetnMapiv", userptr);
    glGetnMinmax = (PFNGLGETNMINMAXPROC) load("glGetnMinmax", userptr);
    glGetnPixelMapfv = (PFNGLGETNPIXELMAPFVPROC) load("glGetnPixelMapfv", userptr);
    glGetnPixelMapuiv = (PFNGLGETNPIXELMAPUIVPROC) load("glGetnPixelMapuiv", userptr);
    glGetnPixelMapusv = (PFNGLGETNPIXELMAPUSVPROC) load("glGetnPixelMapusv", userptr);
    glGetnPolygonStipple = (PFNGLGETNPOLYGONSTIPPLEPROC) load("glGetnPolygonStipple", userptr);
    glGetnSeparableFilter = (PFNGLGETNSEPARABLEFILTERPROC) load("glGetnSeparableFilter", userptr);
    glGetnTexImage = (PFNGLGETNTEXIMAGEPROC) load("glGetnTexImage", userptr);
    glGetnUniformdv = (PFNGLGETNUNIFORMDVPROC) load("glGetnUniformdv", userptr);
    glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC) load("glGetnUniformfv", userptr);
    glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC) load("glGetnUniformiv", userptr);
    glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC) load("glGetnUniformuiv", userptr);
    glInvalidateNamedFramebufferData = (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) load("glInvalidateNamedFramebufferData", userptr);
    glInvalidateNamedFramebufferSubData = (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) load("glInvalidateNamedFramebufferSubData", userptr);
    glMapNamedBuffer = (PFNGLMAPNAMEDBUFFERPROC) load("glMapNamedBuffer", userptr);
    glMapNamedBufferRange = (PFNGLMAPNAMEDBUFFERRANGEPROC) load("glMapNamedBufferRange", userptr);
    glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC) load("glMemoryBarrierByRegion", userptr);
    glNamedBufferData = (PFNGLNAMEDBUFFERDATAPROC) load("glNamedBufferData", userptr);
    glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC) load("glNamedBufferStorage", userptr);
    glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC) load("glNamedBufferSubData", userptr);
    glNamedFramebufferDrawBuffer = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) load("glNamedFramebufferDrawBuffer", userptr);
    glNamedFramebufferDrawBuffers = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) load("glNamedFramebufferDrawBuffers", userptr);
    glNamedFramebufferParameteri = (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) load("glNamedFramebufferParameteri", userptr);
    glNamedFramebufferReadBuffer = (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) load("glNamedFramebufferReadBuffer", userptr);
    glNamedFramebufferRenderbuffer = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) load("glNamedFramebufferRenderbuffer", userptr);
    glNamedFramebufferTexture = (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) load("glNamedFramebufferTexture", userptr);
    glNamedFramebufferTextureLayer = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) load("glNamedFramebufferTextureLayer", userptr);
    glNamedRenderbufferStorage = (PFNGLNAMEDRENDERBUFFERSTORAGEPROC) load("glNamedRenderbufferStorage", userptr);
    glNamedRenderbufferStorageMultisample = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) load("glNamedRenderbufferStorageMultisample", userptr);
    glReadnPixels = (PFNGLREADNPIXELSPROC) load("glReadnPixels", userptr);
    glTextureBarrier = (PFNGLTEXTUREBARRIERPROC) load("glTextureBarrier", userptr);
    glTextureBuffer = (PFNGLTEXTUREBUFFERPROC) load("glTextureBuffer", userptr);
    glTextureBufferRange = (PFNGLTEXTUREBUFFERRANGEPROC) load("glTextureBufferRange", userptr);
    glTextureParameterIiv = (PFNGLTEXTUREPARAMETERIIVPROC) load("glTextureParameterIiv", userptr);
    glTextureParameterIuiv = (PFNGLTEXTUREPARAMETERIUIVPROC) load("glTextureParameterIuiv", userptr);
    glTextureParameterf = (PFNGLTEXTUREPARAMETERFPROC) load("glTextureParameterf", userptr);
    glTextureParameterfv = (PFNGLTEXTUREPARAMETERFVPROC) load("glTextureParameterfv", userptr);
    glTextureParameteri = (PFNGLTEXTUREPARAMETERIPROC) load("glTextureParameteri", userptr);
    glTextureParameteriv = (PFNGLTEXTUREPARAMETERIVPROC) load("glTextureParameteriv", userptr);
    glTextureStorage1D = (PFNGLTEXTURESTORAGE1DPROC) load("glTextureStorage1D", userptr);
    glTextureStorage2D = (PFNGLTEXTURESTORAGE2DPROC) load("glTextureStorage2D", userptr);
    glTextureStorage2DMultisample = (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) load("glTextureStorage2DMultisample", userptr);
    glTextureStorage3D = (PFNGLTEXTURESTORAGE3DPROC) load("glTextureStorage3D", userptr);
    glTextureStorage3DMultisample = (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) load("glTextureStorage3DMultisample", userptr);
    glTextureSubImage1D = (PFNGLTEXTURESUBIMAGE1DPROC) load("glTextureSubImage1D", userptr);
    glTextureSubImage2D = (PFNGLTEXTURESUBIMAGE2DPROC) load("glTextureSubImage2D", userptr);
    glTextureSubImage3D = (PFNGLTEXTURESUBIMAGE3DPROC) load("glTextureSubImage3D", userptr);
    glTransformFeedbackBufferBase = (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) load("glTransformFeedbackBufferBase", userptr);
    glTransformFeedbackBufferRange = (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) load("glTransformFeedbackBufferRange", userptr);
    glUnmapNamedBuffer = (PFNGLUNMAPNAMEDBUFFERPROC) load("glUnmapNamedBuffer", userptr);
    glVertexArrayAttribBinding = (PFNGLVERTEXARRAYATTRIBBINDINGPROC) load("glVertexArrayAttribBinding", userptr);
    glVertexArrayAttribFormat = (PFNGLVERTEXARRAYATTRIBFORMATPROC) load("glVertexArrayAttribFormat", userptr);
    glVertexArrayAttribIFormat = (PFNGLVERTEXARRAYATTRIBIFORMATPROC) load("glVertexArrayAttribIFormat", userptr);
    glVertexArrayAttribLFormat = (PFNGLVERTEXARRAYATTRIBLFORMATPROC) load("glVertexArrayAttribLFormat", userptr);
    glVertexArrayBindingDivisor = (PFNGLVERTEXARRAYBINDINGDIVISORPROC) load("glVertexArrayBindingDivisor", userptr);
    glVertexArrayElementBuffer = (PFNGLVERTEXARRAYELEMENTBUFFERPROC) load("glVertexArrayElementBuffer", userptr);
    glVertexArrayVertexBuffer = (PFNGLVERTEXARRAYVERTEXBUFFERPROC) load("glVertexArrayVertexBuffer", userptr);
    glVertexArrayVertexBuffers = (PFNGLVERTEXARRAYVERTEXBUFFERSPROC) load("glVertexArrayVertexBuffers", userptr);
}
static void glad_gl_load_GL_VERSION_4_6( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_4_6) return;
    glMultiDrawArraysIndirectCount = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC) load("glMultiDrawArraysIndirectCount", userptr);
    glMultiDrawElementsIndirectCount = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC) load("glMultiDrawElementsIndirectCount", userptr);
    glPolygonOffsetClamp = (PFNGLPOLYGONOFFSETCLAMPPROC) load("glPolygonOffsetClamp", userptr);
    glSpecializeShader = (PFNGLSPECIALIZESHADERPROC) load("glSpecializeShader", userptr);
}



#if defined(GL_ES_VERSION_3_0) || defined(GL_VERSION_3_0)
#define GLAD_GL_IS_SOME_NEW_VERSION 1
#else
#define GLAD_GL_IS_SOME_NEW_VERSION 0
#endif

static int glad_gl_get_extensions( int version, const char **out_exts, unsigned int *out_num_exts_i, char ***out_exts_i) {
#if GLAD_GL_IS_SOME_NEW_VERSION
    if(GLAD_VERSION_MAJOR(version) < 3) {
#else
    (void) version;
    (void) out_num_exts_i;
    (void) out_exts_i;
#endif
        if (glGetString == NULL) {
            return 0;
        }
        *out_exts = (const char *)glGetString(GL_EXTENSIONS);
#if GLAD_GL_IS_SOME_NEW_VERSION
    } else {
        unsigned int index = 0;
        unsigned int num_exts_i = 0;
        char **exts_i = NULL;
        if (glGetStringi == NULL || glGetIntegerv == NULL) {
            return 0;
        }
        glGetIntegerv(GL_NUM_EXTENSIONS, (int*) &num_exts_i);
        if (num_exts_i > 0) {
            exts_i = (char **) malloc(num_exts_i * (sizeof *exts_i));
        }
        if (exts_i == NULL) {
            return 0;
        }
        for(index = 0; index < num_exts_i; index++) {
            const char *gl_str_tmp = (const char*) glGetStringi(GL_EXTENSIONS, index);
            size_t len = strlen(gl_str_tmp) + 1;

            char *local_str = (char*) malloc(len * sizeof(char));
            if(local_str != NULL) {
                memcpy(local_str, gl_str_tmp, len * sizeof(char));
            }

            exts_i[index] = local_str;
        }

        *out_num_exts_i = num_exts_i;
        *out_exts_i = exts_i;
    }
#endif
    return 1;
}
static void glad_gl_free_extensions(char **exts_i, unsigned int num_exts_i) {
    if (exts_i != NULL) {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            free((void *) (exts_i[index]));
        }
        free((void *)exts_i);
        exts_i = NULL;
    }
}
static int glad_gl_has_extension(int version, const char *exts, unsigned int num_exts_i, char **exts_i, const char *ext) {
    if(GLAD_VERSION_MAJOR(version) < 3 || !GLAD_GL_IS_SOME_NEW_VERSION) {
        const char *extensions;
        const char *loc;
        const char *terminator;
        extensions = exts;
        if(extensions == NULL || ext == NULL) {
            return 0;
        }
        while(1) {
            loc = strstr(extensions, ext);
            if(loc == NULL) {
                return 0;
            }
            terminator = loc + strlen(ext);
            if((loc == extensions || *(loc - 1) == ' ') &&
                (*terminator == ' ' || *terminator == '\0')) {
                return 1;
            }
            extensions = terminator;
        }
    } else {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            const char *e = exts_i[index];
            if(strcmp(e, ext) == 0) {
                return 1;
            }
        }
    }
    return 0;
}

static GLADapiproc glad_gl_get_proc_from_userptr(const char* name, void *userptr) {
    return (GLAD_GNUC_EXTENSION (GLADapiproc (*)(const char *name)) userptr)(name);
}

static int glad_gl_find_extensions_gl( int version) {
    const char *exts = NULL;
    unsigned int num_exts_i = 0;
    char **exts_i = NULL;
    if (!glad_gl_get_extensions(version, &exts, &num_exts_i, &exts_i)) return 0;

    (void) glad_gl_has_extension;

    glad_gl_free_extensions(exts_i, num_exts_i);

    return 1;
}

static int glad_gl_find_core_gl(void) {
    int i, major, minor;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        NULL
    };
    version = (const char*) glGetString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    GLAD_GL_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
    GLAD_GL_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
    GLAD_GL_VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
    GLAD_GL_VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;
    GLAD_GL_VERSION_1_4 = (major == 1 && minor >= 4) || major > 1;
    GLAD_GL_VERSION_1_5 = (major == 1 && minor >= 5) || major > 1;
    GLAD_GL_VERSION_2_0 = (major == 2 && minor >= 0) || major > 2;
    GLAD_GL_VERSION_2_1 = (major == 2 && minor >= 1) || major > 2;
    GLAD_GL_VERSION_3_0 = (major == 3 && minor >= 0) || major > 3;
    GLAD_GL_VERSION_3_1 = (major == 3 && minor >= 1) || major > 3;
    GLAD_GL_VERSION_3_2 = (major == 3 && minor >= 2) || major > 3;
    GLAD_GL_VERSION_3_3 = (major == 3 && minor >= 3) || major > 3;
    GLAD_GL_VERSION_4_0 = (major == 4 && minor >= 0) || major > 4;
    GLAD_GL_VERSION_4_1 = (major == 4 && minor >= 1) || major > 4;
    GLAD_GL_VERSION_4_2 = (major == 4 && minor >= 2) || major > 4;
    GLAD_GL_VERSION_4_3 = (major == 4 && minor >= 3) || major > 4;
    GLAD_GL_VERSION_4_4 = (major == 4 && minor >= 4) || major > 4;
    GLAD_GL_VERSION_4_5 = (major == 4 && minor >= 5) || major > 4;
    GLAD_GL_VERSION_4_6 = (major == 4 && minor >= 6) || major > 4;

    return GLAD_MAKE_VERSION(major, minor);
}

int gladLoadGLUserPtr( GLADuserptrloadfunc load, void *userptr) {
    int version;

    glGetString = (PFNGLGETSTRINGPROC) load("glGetString", userptr);
    if(glGetString == NULL) return 0;
    if(glGetString(GL_VERSION) == NULL) return 0;
    version = glad_gl_find_core_gl();

    glad_gl_load_GL_VERSION_1_0(load, userptr);
    glad_gl_load_GL_VERSION_1_1(load, userptr);
    glad_gl_load_GL_VERSION_1_2(load, userptr);
    glad_gl_load_GL_VERSION_1_3(load, userptr);
    glad_gl_load_GL_VERSION_1_4(load, userptr);
    glad_gl_load_GL_VERSION_1_5(load, userptr);
    glad_gl_load_GL_VERSION_2_0(load, userptr);
    glad_gl_load_GL_VERSION_2_1(load, userptr);
    glad_gl_load_GL_VERSION_3_0(load, userptr);
    glad_gl_load_GL_VERSION_3_1(load, userptr);
    glad_gl_load_GL_VERSION_3_2(load, userptr);
    glad_gl_load_GL_VERSION_3_3(load, userptr);
    glad_gl_load_GL_VERSION_4_0(load, userptr);
    glad_gl_load_GL_VERSION_4_1(load, userptr);
    glad_gl_load_GL_VERSION_4_2(load, userptr);
    glad_gl_load_GL_VERSION_4_3(load, userptr);
    glad_gl_load_GL_VERSION_4_4(load, userptr);
    glad_gl_load_GL_VERSION_4_5(load, userptr);
    glad_gl_load_GL_VERSION_4_6(load, userptr);

    if (!glad_gl_find_extensions_gl(version)) return 0;



    return version;
}


int gladLoadGL( GLADloadfunc load) {
    return gladLoadGLUserPtr( glad_gl_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}





#endif /* GLAD_GL_IMPLEMENTATION */

